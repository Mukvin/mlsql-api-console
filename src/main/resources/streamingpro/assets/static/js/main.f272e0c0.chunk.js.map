{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/et/ButtonToCommand.js","backend_service/backend/RestConst.js","backend_service/Dicts.js","backend_service/backend/Backend.js","backend_service/RemoteAction.js","backend_service/ActionProxy.js","common/LogMonitor.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/dash/MLSQLHTML.js","components/query/MLSQLDash.js","components/notebook/CodeBlock.js","components/notebook/CommandGroup.js","components/notebook/service/Engine.js","components/notebook/DataTable.js","components/notebook/DisplayGroup.js","components/notebook/ExecuteUnit.js","components/notebook/NoteBook.js","components/python/PythonACE.js","components/python/PythonEditor.js","components/editor/TabEditor.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","components/team/CreateTeam.js","components/team/remote/Service.js","components/team/Teams.js","components/team/InviteMember.js","components/team/remote/Views.js","components/team/TeamMembers.js","components/team/AddRoleForTeam.js","components/team/TeamRoles.js","components/team/AddMemberForRole.js","components/team/AddTableForTeam.js","components/team/TeamTables.js","components/team/RoleMembers.js","components/team/TeamCards.js","components/cluster/remote/Service.js","components/cluster/ClusterBackends.js","components/cluster/AddClusterBackend.js","components/cluster/AddTagToRole.js","components/cluster/ConfigureDefaultBackend.js","components/cluster/AddExistClusterBackendToRole.js","components/cluster/ConfigureSchedulerBackend.js","components/cluster/ClusterCards.js","components/team/RoleTables.js","components/team/AddTableForRole.js","components/auth/AuthCards.js","components/demo/Setup.js","components/team/MLSQLChangePassword.js","components/team/SettingCards.js","components/team/MainPage.js","components/MLSQLManagerApp.js","components/script_plugins/ResultView.js","components/script_plugins/ScriptPluginView.js","components/script_plugins/MainPage.js","components/script_plugins/MLSQLScriptPluginsApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","console","log","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","res","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","skipAuth","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","text","get","catch","okFun","failFun","new_request","resStatus","extractMsg","err","message","USER_TAGS_UPDATE","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","FILE_UPLOAD","CREATE_TEAM","CHECK_TEAM_NAME","LIST_TEAMS","LIST_TEAMS_INVITED","ADD_TEAMS_MEMBER","ACCEPT_TEAMS_MEMBER","REFUSE_TEAMS_MEMBER","ADD_TEAMS_ROLE","ADD_TEAMS_TABLE","ADD_ROLES_TABLE","ADD_ROLES_MEMBER","CHNAGE_PASSWORD","MLSQLAuth","apiResponse","removeItem","error","m","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","assert","condition","Error","ButtonToCommand","makeSQL","BACKEND_URL","DELETE","GlobalParamNames","USER_NAME","USER_ID","ADMIN_TOKEN","LOGIN_TOKEN","RestResponse","Backend","fetch_config","arguments","length","_request","asyncToGenerator","regenerator_default","a","mark","_callee","action","basic_config","final_config","response","_args","wrap","_context","prev","next","objectSpread","sent","abrupt","t0","stop","_x","_x2","apply","RemoteAction","RUN","ActionProxy","backend","_userName","_runScript","_callee2","_res$content","temp","_context2","post","_x3","_get","_callee3","_context3","_x4","_x5","_post","_callee4","_context4","_x6","_x7","LogMonitor","appendLog","_cancelQueryLog","intervalTimer","clearInterval","_queryLog","cancelQueryLog","setInterval","api","runScript","concat","map","item","split","Option","Select","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","BackendConfig","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","getAllText","getSelection","selectionRange","getSelectionRange","session","getTextRange","appendToEditor","p","getCursorPosition","insert","focus","queryApp","msg","row","getLength","column","getDashBoard","dash","getDisplay","display","enterLoading","commandGroup","loading","resourceProgressRef","enter","jobProgress","taskProgressRef","exitLoading","exit","etOver","evt","et","etRef","eventName","getData","popName","processType","pathAlias","tableHidden","pathHidden","outputTableHidden","outputTableAlias","tableAlias","etPop","language","parent","React","logMonitor","cancelQuery","bind","executeQuery","parentCallback","newValue","measureTime","Date","getTime","startTime","queryLog","update","select","finalSQL","failRes","setData","stringify","_this2","react","className","onDragOver","preventDefault","onDrop","re_resizable_lib","defaultSize","height","onResize","resize","lib_default","ref","mode","theme","width","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","autoScrollEditorIntoView","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_JobProgress","MLSQLAceEditor_TaskProgress","MLSQLAceEditor_ResourceProgress","CommandGroup","_this3","es_button","onClick","es_select","style","JobProgress","_this4","setTimeout","resourceCompute","hasOwnProperty","jsonArray","progress","currentJobIndex","totalJob","percent","successPercent","title","ResourceProgress","_this5","activeTasks","totalCores","currentJobGroupActiveTasks","TaskProgress","_this6","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","forEach","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","isDir","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isExpanded","toggleIsExpanded","scriptFile","openExistsOrNewEditor","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","return","CreateScriptDialog","fileName","target","finish","create","endsWith","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","confirmDelete","confirmAlert","removeFile","closeOnEscape","closeOnClickOutside","isCreateProject","createDocMenuItem","menuItem","icon","createFolderTitle","createFolder","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","data","config","render","isPrototypeOf","type","substring","keys","basket","rows","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","modal","visible","onCancel","onOk","cancelText","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","file","attach","end","f","react_default","createElement","size","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","Component","randomColor","generateColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","dataType","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","margin","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender","dataForRender2","jsonItem","moment","utc","timestamp","format","inputRowsPerSecond","processedRowsPerSecond","numInputRows","titleMap","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","span","Charts","hasLegend","subTitle","pre","now","valueFormat","val","isResource","MLSQLHTML","MLSQLHTML_MLSQLHTMLPanel","MLSQLHTMLPanel","refresh","sandbox","srcDoc","frameBorder","scrolling","ifr","Panel","Collapse","TabPane","Tabs","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","collapse","header","tabs","defaultActiveKey","tab","UploadDropZone_UploadDropzone","PureComponent","CodeBlock","originalEditor","container","lineHeight","maxLines","initialCode","evtExecute","isExecute","executeUnit","execute","cancelExecute","es_icon","spin","Engine","run","show_result","fail_result","newRunScript","saveFile","code","DataTable","parseData","_this$parseData","_this$parseData2","slicedToArray","_this$parseData3","_this$parseData4","DataTable_ReactMarkdown","DisplayGroup","displayData","errorMsg","displayTableRef","displayDashRef","displayDash","displayError","displayTable","DataTable_DataTable","ExecuteUnit","codeBlock","displayGroup","notebook","nextExecuteUnit","codeBlockIsEmpty","getCodeStr","CodeBlock_CodeBlock","CommandGroup_CommandGroup","DisplayGroup_DisplayGroup","CODE_SPLITTER","NodeBook","createNewExecuteUnit","ExecuteUnit_ExecuteUnit","addRef","instance","executeUnitRefs","slice","executeUnits","saveNoteBook","engine","PythonACE","runMode","executeMode","ex","PythonACE_CommandGroup","PythonEditor","python_PythonACE","TabEditor","pushRef","myRefs","getCurrentEditor","activeKey","currentItem","panes","displayEditor","onEdit","targetKey","addFull","tabName","newTabIndex","src_components_MLSQLAceEditor","NoteBook_NodeBook","PythonEditor_PythonEditor","add","getPaneIndexByActiveKey","lastIndex","pane","remove","filter","editorRefList","closeEditor","TabEditor_TabPane","closable","InputGroup","Input","Group","ETLoadParams","etPopLoad","compact","ETPopLoad","getAttribute","sourceType","sourceTypeV","es_row","param","es_col","input","marginBottom","addonBefore","description","loadParamsRef","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","etpop","datasourcesRender","ETPopLoad_Option","ETPopLoad_InputGroup","showSearch","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","ETLoadParams_ETLoadParams","TextArea","ETPopAlgorithm","renderParam","ETPopAlgorithm_InputGroup","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","ETBaseTool_InputGroup","showOutputTableName","pathNameForRender","showPathName","asStr","ETPopTool","_ETBaseTool","esm_get","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","args","Array","_key","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataTypeV","udfType","udfTypeV","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","href","appendChild","click","removeChild","ETStreamProgress","jobType","ETStreamProgress_Option","ETPop","disableEtModalVisible","etModalVisible","enableEtModalVisible","popChild","renderContent","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","Modal_default","okText","MLSQLETQuick","itemData","onDragStart","renderPop","ETPop_ETPop","etDoubleClick","padding","MLSQLETQuick_Panel","gutter","card","tag_default","tyle","help","draggable","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","MLSQLQueryApp","script","fileToEditorMap","editorRef","editorGroup","tempFileToEditorMap","tableAndDash","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","MLSQLETQuick_MLSQLETQuick","TabEditor_TabEditor","VIEW_CONSOLE","VIEW_TEAM","VIEW_DEMO","VIEW_SCRIPT_PLUGINS","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","TEAM_VIEW_BASIC","SETUP_VIEW_BASIC","CLUSTER_VIEW_BASIC","AUTH_VIEW_BASIC","SETTING_VIEW_BASIC","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","Item","generateView","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","renderView","currentView","BigDL_BigDL","NLP_NLP","Basic_Basic","Header","Layout","Content","Footer","Sider","MainPage","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","layout","minHeight","es_menu","defaultSelectedKeys","block","Demos_Demos","textAlign","MLSQLDemoApp","MainPage_MainPage","CreateTeamForm","handleSubmit","form","validateFields","resJson","teamCards","teamsRef","warning","failStr","teamNameCheck","rule","getFieldDecorator","es_form","onSubmit","rules","required","validator","prefix","htmlType","MLSQLCreateTeamForm","Form","Service","apiUrl","stateKey","defineProperty","MESSAGE_TIMEOUT","teamName","roleName","tableId","Teams","accept","teamInvite","fetchTeams","teamYourJoinRef","refuse","renderCommand","actions","Meta","InviteMember","renderTeams","teams","MLSQLInviteMember","Views","renderTeamsForSelect","onTeamSelect","currentTeamName","TeamService","fetchRoles","renderRoles","roles","renderMembers","members","renderBackends","backends","teamSelect","onChangeCallback","roleSelect","backendSelect","memberSelect","TeamMembers","selectTeam","member","currentTeam","fetchMembersByTeam","removeTeamMember","AddRoleForTeam","MLSQLAddRoleForTeam","TeamRoles","removeRole","AddMemberForRole","roleMembersRef","MLSQLAddMemberForRole","AddTableForTeam","renderTableTypes","tableTypes","renderSourceTypes","sourceTypes","fetchTableTypes","fetchSourceTypes","MLSQLAddTableForTeam","RoleMembers","onRoleSelect","currentRoleName","fetchMembersByRole","removeRoleMember","TeamCards","openNotificationWithIcon","notification","teamRolesRef","teamMembersRef","roleTablesRef","Teams_Teams","TeamMembers_TeamMembers","TeamRoles_TeamRoles","RoleMembers_RoleMembers","newParams","names","backendName","merge","ClusterBackends","dataViewer","tag","fetchBackends","ecsResourcePoolId","newitem","objectWithoutProperties","CluserService","removeBackend","TeamViews","AddClusterBackend","acc","ClusterService","addBackend","checkBackendName","MLSQLAddClusterBackend","AddTagToRole","renderTags","tagsWithDuplicate","items","Set","ConfigureDefaultBackend","includes","MLSQLConfigureDefaultBackend","AddExistClusterBackendToRole","updateBackendTags","fetchBackendNamesByTeam","backendNames","fetchBackendsByNames","MLSQLAddExistClusterBackendToRole","ConfigureSchedulerBackend","isScheduler","MLSQLConfigureSchedulerDefaultBackend","ClusterCards","backendsRef","ClusterBackends_ClusterBackends","RoleTables","currentRole","fetchTablesByRole","tableNameId","removeRoleTable","defaultValue","renderTables","tables","tableType","operateType","AddTableForRole","authCards","fetchTables","fetchOperateTypes","db","renderOperateTypes","operateTypes","MLSQLAddTableForRole","AuthCards","RoleTables_RoleTables","Setup","Setup_Step","margin-top","ChangePassword","MLSQLChangePassword","SettingCards","switchToSetup","switchToCluster","switchToAuth","switchToSetting","Setup_Setup","TeamCards_TeamCards","ClusterCards_ClusterCards","AuthCards_AuthCards","SettingCards_SettingCards","app","MainPage_Sider","MainPage_Header","MainPage_Content","MainPage_Footer","MLSQLManagerApp","team_MainPage_MainPage","ResultView","nav","entries","collected_params","current_plugin_name","formItemLayout","labelCol","wrapperCol","formTailLayout","offset","ScriptPluginView","buildForm","ResultView_ResultView","formItems","formItem","desc","final","values","pushParam","ScriptPluginView_Step","ScriptPluginViewForm","showTut","pluginName","data_plugin","data_menu","script_plugins_MainPage_Sider","script_plugins_MainPage_Header","script_plugins_MainPage_Content","script_plugins_MainPage_Footer","MLSQLScriptPluginsApp","script_plugins_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","MLSQLDemoApp_MLSQLDemoApp","MLSQLManagerApp_MLSQLManagerApp","MLSQLScriptPluginsApp_MLSQLScriptPluginsApp","validateUserName","validatePassword","isEmail","test","normal","inject","App","menuRef","switchToTeam","switchToConsole","switchToDemo","switchToScriptPlugins","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f272e0c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                console.log(e)\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    let res = str\n                    try {\n                        res = JSON.parse(str)[\"msg\"]\n                    } catch (e) {\n\n                    }\n                    serverErrorCallback(res)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes            \n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            let res = str\n                            try {\n                                res = JSON.parse(str)[\"msg\"]\n                            } catch (e) {\n\n                            }\n                            serverErrorCallback(\"backend status:\" + ok.status + \"\\n\" + res)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        let res = str\n                        try {\n                            res = JSON.parse(str)[\"msg\"]\n                        } catch (e) {\n\n                        }\n                        serverErrorCallback(res)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        }).then((res) => {\n            successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n        })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n\n    newRunScript(params, sql, okFun, failFun) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                failFun(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.new_request(HTTP.Method.POST, finalParams, okFun, failFun)\n        })\n    }\n\n    new_request(method, body, okFun, failFun) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        let resStatus = 0\n\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        }).then((res) => {\n            resStatus = res.status\n            if (resStatus === 200) {\n                res.json().then((value) => {\n                    okFun(value)\n                })\n            }\n            return res\n        }).then(res => {\n            const extractMsg = () => {\n                res.text().then(value => {\n                        try {\n                            failFun(JSON.parse(value)[\"msg\"])\n                        } catch (e) {\n                            failFun(value)\n                        }\n                    }\n                )\n            }\n\n            switch (resStatus) {\n                case 201:\n                    break\n                case 400:\n                    extractMsg()\n                    break\n                case 500:\n                    extractMsg()\n                    break\n                default:\n                    console.log('unhandled')\n                    break\n            }\n        })\n            .catch((err) => {\n                failFun(err.message)\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n\nexport const CREATE_TEAM = BACKEND_SERVER + \"/api_v1/team/create\";\nexport const CHECK_TEAM_NAME = BACKEND_SERVER + \"/api_v1/team/name/check\";\nexport const LIST_TEAMS = BACKEND_SERVER + \"/api_v1/team\";\n\nexport const LIST_TEAMS_JOINED = BACKEND_SERVER + \"/api_v1/team/joined\";\nexport const LIST_TEAMS_INVITED = BACKEND_SERVER + \"/api_v1/team/invited\";\n\nexport const LIST_TEAMS_IN = BACKEND_SERVER + \"/api_v1/team/in\";\n\n\nexport const ADD_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/add\";\nexport const REMOVE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/remove\";\nexport const LIST_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/members\";\n\nexport const ACCEPT_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/accept\";\nexport const REFUSE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/refuse\";\n\nexport const ADD_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/add\";\nexport const REMOVE_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/remove\";\nexport const LIST_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/roles\";\n\nexport const ADD_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/add\";\nexport const REMOVE_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/remove\";\nexport const LIST_TEAMS_TABLES = BACKEND_SERVER + \"/api_v1/team/tables\";\n\n\nexport const ADD_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/add\";\nexport const REMOVE_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/remove\";\nexport const LIST_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/tables\";\n\nexport const ADD_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/add\";\nexport const REMOVE_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/remove\";\nexport const LIST_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/members\";\n\nexport const LIST_BACKENDS_BY_TEAM = BACKEND_SERVER + \"/api_v1/backends\";\n\nexport const CHNAGE_PASSWORD = BACKEND_SERVER + \"/api_v1/changepassword\";","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const BACKEND_URL = BACKEND_SERVER;\n\n\nexport class Method{\n    static GET = \"get\"\n    static POST = \"post\"\n    static PUT = \"put\"\n    static DELETE  = \"delete\"    \n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n\n","export class LangKey{\n    static firstName = \"firstName\"   \n}\nexport class GlobalParamNames {\n    static USER_NAME = \"userName\"\n    static USER_ID = \"userId\"\n    static ADMIN_TOKEN = \"admin_token\"\n    static LOGIN_TOKEN = \"access-token\"\n}","import { BACKEND_URL, AccessToken } from './RestConst'\nimport { GlobalParamNames } from '../Dicts'\n\nexport class RestResponse {\n    constructor(status, content) {\n        this.status = status\n        this.content = content\n    }\n}\n\nexport class Backend {\n\n    constructor(url, fetch_config = {}) {\n        this.url = url\n        if (!this.url) {\n            this.url = BACKEND_URL\n        }\n        this.fetch_config = fetch_config\n    }\n\n    async request(action, params, method = \"GET\") {\n        method = method.toUpperCase();\n        const userName = sessionStorage.getItem(GlobalParamNames.USER_NAME)\n        //const loginToken = sessionStorage.getItem(GlobalParamNames.LOGIN_TOKEN)\n        if (userName) {\n            params[GlobalParamNames.USER_NAME] = userName\n        }\n\n        // if (loginToken) {\n        //     params[GlobalParamNames.LOGIN_TOKEN] = loginToken\n        // }\n\n        let formBody = [];\n        for (let property in params) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(params[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n        let newurl = this.url + action\n\n        if (formBody.length > 0) {\n            newurl = newurl + \"?\"\n        }\n\n        if (method === \"GET\") {\n            newurl = newurl + formBody.join(\"&\")\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n\n        const basic_config = {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(AccessToken) || ''\n            },\n            body: formBody\n        }\n\n        const final_config = { ...basic_config, ...this.fetch_config }\n\n        try {\n            console.log(newurl)\n            const response = await fetch(newurl, final_config);\n            if (!response.ok) {\n                const error = await response.text()\n                return new RestResponse(response.status, error);\n            }\n            const json = await response.json();\n            return new RestResponse(200, json);\n        } catch (err) {\n            return new RestResponse(500, err);\n        }\n    }\n}\n","export default class RemoteAction{\n    static RUN = \"/api_v1/run/script\"\n    static USER_NAME = \"/api_v1/user/userName\"\n}","import { RestResponse, Backend } from './backend/Backend'\nimport RemoteAction from './RemoteAction'\nimport { Method, Status } from './backend/RestConst'\n\n\nexport class ActionProxy {\n  constructor() {\n    this.backend = new Backend()\n  }\n\n  async userName() {\n    const res = await this.get(RemoteAction.USER_NAME, {})\n    return res\n  }\n\n  async runScript(sql, jobName, params) {\n    const res = await this.userName()\n    if (res.status !== 200) {\n      return res\n    }\n    const { userName, backendTags } = res.content\n\n    const finalParams = {\n      sql: sql,\n      owner: userName,\n      jobName: jobName,\n      sessionPerUser: true,\n      show_stack: true,\n      skipAuth: false,\n      tags: backendTags || \"\"\n    }\n    Object.assign(finalParams, params)\n    const temp = await this.post(RemoteAction.RUN, finalParams)\n    return temp\n  }\n\n  /**\n   * \n   * @param {string} action \n   * @param {{}} params \n   * @return {RestResponse}\n   */\n  async get(action, params) {\n    const res = await this.backend.request(action, params, Method.GET)\n    return res\n  }\n\n  /**\n   * \n   * @param {string} action \n   * @param {{}} params \n   * @returns {RestResponse}\n   */\n  async post(action, params) {\n    const res = await this.backend.request(action, params, Method.POST)\n    return res\n  }\n}\n\n","import {ActionProxy} from '../backend_service/ActionProxy'\nconst uuidv4 = require('uuid/v4');\n\nexport class LogMonitor {\n    constructor(appendLog) {\n        this.appendLog = appendLog\n        this.log = {}\n    }\n    async cancelQueryLog() {\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer)\n            this.intervalTimer = null\n        }\n    }\n\n    async queryLog() {\n        this.cancelQueryLog()\n        this.intervalTimer = setInterval(async () => {\n            const jobName = uuidv4()\n            const api = new ActionProxy()            \n            const res = await api.runScript(`load _mlsql_.\\`log/${this.log['offset'] || -1}\\` where filePath=\"engine_log\" as output;`, jobName, {})\n            const jsonObj = res.content[0]\n            if (jsonObj['value'].length > 0) {\n                this.appendLog(jsonObj['value'].map(item => {\n                    return item.split(\"__MMMMMM__\")[1]\n                }).join(\"\\n\"))\n            }\n            this.log['offset'] = jsonObj[\"offset\"]\n        }, 2000)\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\nimport {Select} from 'antd';\nimport {Resizable} from \"re-resizable\";\nimport { LogMonitor } from \"../common/LogMonitor\";\nimport {ActionProxy} from '../backend_service/ActionProxy'\n\nconst {Option} = Select;\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.language = this.props.language || \"sql\"\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.jobProgress = React.createRef()\n        this.taskProgressRef = React.createRef()\n\n        this.logMonitor = new LogMonitor(this.appendLog)\n\n        this.cancelQuery = this.cancelQuery.bind(this)\n        this.executeQuery = this.executeQuery.bind(this)\n\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId}, () => {\n            this.aceEditorRef.current.editor.setValue(value, 1)\n        })\n\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    self.appendLog(wow[\"msg\"])\n                }, (jsonErr) => {\n                    self.appendLog(jsonErr)\n                })\n            } else {\n                self.appendLog(\"saved\")\n            }\n\n        }, (fail) => {\n            self.appendLog(fail)\n        })\n\n    }\n\n    async executeQuery(){\n        this.logMonitor.queryLog()\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)    \n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n        self.getDisplay().update(JSON.parse(\"[]\"))\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        const timeout = this.commandGroup.current.state.timeout\n        this.jobName = jobName\n\n        const api = new ActionProxy()\n        const res = await api.runScript(finalSQL, jobName, {\n            jobName: jobName,\n            background: (this.state.background || false),\n            timeout: timeout\n        }) \n        \n        //clean status\n        try {\n            this.logMonitor.cancelQueryLog()\n            self.exitLoading() \n            this.jobName = null\n        }catch(e){\n\n        }                \n        if(res.status !== 200){            \n            let failRes = \"\"\n            try {\n                failRes = JSON.parse(res.content)[0][\"msg\"]\n            } catch (e) {\n                failRes = res.content\n            }            \n            self.appendLog(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")            \n            return \n        }\n\n        if(res.status === 200){\n            try {\n                self.queryApp.setData(res.content)\n                self.getDisplay().update(res.content)\n                self.appendLog(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.appendLog(\"Can not display the result. raw data:\\n\" + JSON.stringify(res.content, null, 2))\n            }\n                                   \n        }        \n\n    }\n\n    async cancelQuery() {\n        if (!this.jobName) return\n        const jobName = uuidv4()\n        const api = new ActionProxy()\n        const res = await api.runScript(\"!kill \" + this.jobName+\";\", jobName, {})                        \n        try {\n            this.appendLog(res.content[0]['description'])                \n        }catch(e){\n            this.appendLog(res.content)\n        }\n        \n        this.jobName = null\n        this.logMonitor.cancelQueryLog()\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    appendLog = (msg) => {\n        const editor = this.getMessageBoxAceEditor()\n        const session = editor.session\n        session.insert({\n            row: session.getLength(),\n            column: 0\n        }, \"\\n\" + msg)\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.jobProgress.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})        \n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.jobProgress.current.exit()\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()        \n    }\n    etOver = (evt) => {\n        const et = this.queryApp.etRef.current\n        const eventName = et.getData(\"eventName\")\n        const popName = et.getData(\"popName\")\n        const processType = et.getData(\"processType\")\n        const pathAlias = et.getData(\"pathAlias\")\n        const tableHidden = et.getData(\"tableHidden\")\n        const pathHidden = et.getData(\"pathHidden\")\n        const outputTableHidden = et.getData(\"outputTableHidden\")\n        const outputTableAlias = et.getData(\"outputTableAlias\")\n        const tableAlias = et.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            et.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}>\n                    <Resizable defaultSize={{height: \"500px\"}} onResize={()=>{this.aceEditorRef.current.editor.resize();}}><AceEditor\n                        ref={this.aceEditorRef}\n                        mode={this.language}\n                        theme=\"github\"\n                        width={\"100%\"}\n                        height={\"100%\"}\n                        onChange={this.onChange}\n                        name=\"mlsql_editor\"\n                        fontSize={16}\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        editorProps={{\n                            $blockScrolling: Infinity\n                        }}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: false,\n                            showLineNumbers: true,\n                            tabSize: 2,\n                            autoScrollEditorIntoView: true\n                        }}\n                    /></Resizable>\n                </div>\n\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <JobProgress ref={this.jobProgress} parent={this}></JobProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, timeout: \"-1\"}\n        this.parent = props.parent\n    }\n\n    onChange = (value) => {\n        this.setState({timeout: value})\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.cancelQuery}>Cancel</Button>      \n                <Button onClick={this.parent.executeSave}>Save</Button>                \n                Job Timeout:<Select\n                onChange={this.onChange}\n                style={{width: \"120px\"}}\n            >\n                <Option value=\"10000\">10s</Option>\n                <Option value=\"30000\">30s</Option>\n                <Option value=\"60000\">60s</Option>\n                <Option value=\"1800000\">30m</Option>\n                <Option value=\"7200000\">2h</Option>\n                <Option value=\"28800000\">8h</Option>\n                <Option value=\"-1\">unlimited</Option>\n            </Select>\n            </div>\n        )\n    }\n\n}\n\nclass JobProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`jobs/get/${jobName}\\` as wow;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    console.log(jsonObj)\n                                    const p = jsonObj.progress.currentJobIndex / jsonObj.progress.totalJob * 100\n                                    self.setState({\n                                        percent: p,\n                                        successPercent: p,\n                                        title: `Jobs: current/Total: ${jsonObj.progress.currentJobIndex}/${jsonObj.progress.totalJob })`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    self.setState({\n                                        percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                        successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                        title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if (self.taskCompute === \"loading\") {\n                            return\n                        }\n                        self.taskCompute = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute = \"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute = \"loaded\"\n                            try {\n                                self.parent.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 1000)\n            }\n\n        }, 1000)\n\n    }\n\n    exit = () => {\n        this.taskCompute = \"loaded\"\n        this.resourceCompute = \"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu isDir={node.isDir} parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.openExistsOrNewEditor({id: node.id, content: scriptFile.content, name: scriptFile.name})\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.toggleIsExpanded(nodeData.id, false)\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.toggleIsExpanded(nodeData.id, true)\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && (!params.fileName.endsWith(\".mlsql\") && !params.fileName.endsWith(\".nb\") && !params.fileName.endsWith(\".py\"))) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql or .nb or .py\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n        this.isDir = this.props.isDir\n    }\n\n    confirmDelete = () => {\n        confirmAlert({\n            title: 'Confirm to delete',\n            message: 'Are you sure to do this ？',\n            buttons: [\n                {\n                    label: 'confirm',\n                    onClick: () => this.removeFile()\n                },\n                {\n                    label: 'cancel',\n                    onClick: () => {\n                    }\n                }\n            ],\n            closeOnEscape: true, closeOnClickOutside: false\n        });\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject() && this.isDir) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n    createFolder = () => {\n        if (this.isDir) {\n            return <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n        if (this.isCreateProject()) {\n            return <MenuItem icon=\"folder-new\" text=\"Create Project\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.confirmDelete()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    {this.createFolder()}\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table,Modal} from 'antd';\n\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if (keyColumn.key == \"html\") {            \n            keyColumn[\"render\"] = value => <pre>{value.substring(0,300)}</pre>\n            return\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded. \\n You can check the files with command: !hdfs -ls /tmp/upload; \"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough or backend fails\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend} from 'recharts';\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).format('DD,h:mm:ss')\n            dataForRender.push({\n                x: x,\n                inputRowsPerSecond: jsonItem.inputRowsPerSecond,\n                processedRowsPerSecond: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                numInputRows: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            dataForRender2: dataForRender2\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender}>\n                <Line type=\"monotone\" dataKey=\"inputRowsPerSecond\" stroke=\"#8884d8\"/>\n                <Line type=\"monotone\" dataKey=\"processedRowsPerSecond\" stroke=\"#82ca9d\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender2}>\n                <Line type=\"monotone\" dataKey=\"numInputRows\" stroke=\"#8884d8\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React from 'react';\nimport {Resizable} from \"re-resizable\";\n\n\nexport default class MLSQLHTML {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLHTML.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"html\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        return <MLSQLHTMLPanel data={item}></MLSQLHTMLPanel>\n    }\n\n}\n\nexport class MLSQLHTMLPanel extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {data: this.props.data}\n    }\n\n    refresh = (data) => {\n        this.setState({data: data})\n    }\n\n    render() {\n        return (\n            <div>\n                <Resizable defaultSize={{height: \"500px\"}}>\n                    <iframe\n                        sandbox=\"allow-scripts\"\n                        style={{width: '100%', height: \"100%\"}}\n                        srcDoc={this.state.data[\"html\"]}\n                        frameBorder=\"0\"\n                        scrolling=\"yes\"\n                        ref={(f) => {\n                            this.ifr = f;\n                        }}\n\n                    />\n                </Resizable>\n            </div>\n        );\n        \n    }\n\n\n}","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\nimport MLSQLHTML from \"../dash/MLSQLHTML\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        if (MLSQLHTML.isShouldRender(data)) {\n            return MLSQLHTML.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import React from 'react'\nimport AceEditor from \"react-ace\";\n\n/**\n * onLoad(editor){\n  // Your editor options comes here\n   editor.on('change', (arg, activeEditor) => {\n      const aceEditor = activeEditor;\n      const newHeight = aceEditor.getSession().getScreenLength() *\n        (aceEditor.renderer.lineHeight + aceEditor.renderer.scrollBar.getWidth());\n       aceEditor.container.style.height = `${newHeight}px`;\n      aceEditor.resize();\n    });\n}\n */\nexport default class CodeBlock extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    originalEditor = () => {\n        return this.editor.editor\n    }\n\n    componentDidMount() {\n        this.originalEditor().container.style.lineHeight = 3\n    }\n\n    render() {\n        return (\n            <AceEditor\n                maxLines={Infinity}\n                width={\"100%\"}\n                ref={et => {\n                    this.editor = et\n                }}\n                value={this.props.initialCode}\n                mode=\"sql\"\n                theme=\"github\"\n\n            />\n        )\n    }\n}","import React from 'react'\nimport {Icon} from \"antd\";\n\nexport default class CommandGroup extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {isExecute: false, executeUnit: props.executeUnit}\n    }\n\n    evtExecute = () => {\n        this.setState({isExecute: true})\n        this.state.executeUnit.execute()\n    }\n\n    cancelExecute = () => {\n        this.setState({isExecute: false})\n    }\n\n    render() {\n        return <div>\n            {\n                this.state.isExecute ? <span onClick={this.cancelExecute}><Icon type=\"sync\" spin/></span> :\n                    <span onClick={this.evtExecute}><Icon type=\"caret-right\"/></span>\n            }\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport * as BackendConfig from \"../../../service/BackendConfig\";\nimport * as HTTP from \"../../../service/HTTPMethod\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport default class Engine {\n\n    /**\n     * @param {Number} timeout\n     */\n    constructor(timeout) {\n        this.timeout = timeout\n    }\n\n    /**\n     * @param {string} sql\n     * @param {(msg)=>{}} show_result\n     */\n    run = (sql, show_result, fail_result) => {\n        const jobName = uuidv4()\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n\n        api.newRunScript({\n            jobName: jobName,\n            timeout: this.timeout\n        }, sql, show_result, fail_result)\n\n\n    }\n\n    /**\n     * @param {string} code\n     * @param {string} scriptId\n     * @param {(msg)=>{}} show_result\n     */\n    saveFile = (code, scriptId, show_result) => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        api.request(HTTP.Method.POST, {\n            id: scriptId,\n            content: code\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    show_result(wow[\"msg\"])\n                }, (jsonErr) => {\n                    show_result(jsonErr)\n                })\n            } else {\n                show_result(\"saved\")\n            }\n\n        }, (fail) => {\n            show_result(fail)\n        })\n    }\n}","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table, Modal} from 'antd';\n\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class DataTable extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const [keys, rows] = this.parseData(props.data || [], props.config || {})\n        this.state = {columns: keys, rows: rows, view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data, config) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (config && config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    parseData = (data, config) => {\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n        return [keys, rows]\n    }\n\n    refresh = (data, config) => {\n        // e.g. [{\"a\":1}]\n        const [keys, rows] = this.parseData(data, config)\n        this.setState({columns: keys, rows: rows, config: config})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={self.state.columns}\n                    dataSource={self.state.rows}/>\n                <Modal\n                    title={\"View\"}\n                    visible={self.state.view.enabled}\n                    onCancel={self.disablePreview}\n                    onOk={self.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={self.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport DataTable from \"./DataTable\";\nimport MLSQLHTML, {MLSQLHTMLPanel} from \"../dash/MLSQLHTML\";\nimport AceEditor from \"react-ace\";\n\nexport default class DisplayGroup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {errorMsg: \"\"}\n    }\n\n\n    refresh = (displayData) => {\n        this.setState({displayData: displayData, errorMsg: \"\"})\n        if (this.displayTableRef) {\n            this.displayTableRef.refresh(this.state.displayData, {})\n        }\n\n        if (this.displayDashRef) {\n            const item = this.state.displayData[0]\n            this.displayDashRef.refresh(item)\n        }\n\n    }\n\n    fail = (msg) => {\n        this.setState({errorMsg: msg})\n        if (this.editor) {\n            this.editor.editor.setValue(msg)\n        }\n    }\n\n    displayDash = () => {\n        if (this.state.displayData && MLSQLHTML.isShouldRender(this.state.displayData)) {\n            const item = this.state.displayData[0]\n            return <MLSQLHTMLPanel data={item} ref={(et) => this.displayDashRef = et}></MLSQLHTMLPanel>\n        } else {\n            return <div></div>\n        }\n\n    }\n\n    displayError = () => {\n        if (this.state.errorMsg) {\n            return <div><AceEditor\n                maxLines={Infinity}\n                width={\"100%\"}\n                ref={et => {\n                    this.editor = et\n                }}\n                value={this.state.errorMsg}\n                mode=\"text\"\n                theme=\"ace/theme/textmate\"\n\n            /></div>\n        } else {\n            return <div></div>\n        }\n    }\n\n    displayTable = () => {\n        if (this.state.displayData) {\n            return <DataTable data={this.state.displayData} ref={(et) => this.displayTableRef = et}></DataTable>\n        } else {\n            return <div></div>\n        }\n\n    }\n\n    render() {\n        return <div>\n            {this.displayError()}\n            {\n                this.displayTable()\n            }{this.displayDash()}</div>\n\n    }\n}","import React from 'react'\nimport CodeBlock from \"./CodeBlock\";\nimport CommandGroup from \"./CommandGroup\";\nimport Engine from \"./service/Engine\";\nimport DisplayGroup from \"./DisplayGroup\";\n\n\nexport default class ExecuteUnit extends React.Component {\n    constructor(props) {\n        super(props)\n        this.notebook = props.parent\n    }\n\n    execute = () => {\n        const sql = this.codeBlock.originalEditor().getValue()\n        const engine = new Engine(5 * 60 * 1000)\n        engine.run(sql, (msg) => {\n            this.displayGroup.refresh(msg)\n            this.commandGroup.setState({isExecute: false})\n            this.notebook.nextExecuteUnit()\n        }, msg => {\n            this.displayGroup.fail(msg)\n            this.commandGroup.setState({isExecute: false})\n        })\n    }\n\n    codeBlockIsEmpty = () => {\n        return this.getCodeStr() === \"\"\n    }\n\n    getCodeStr = () => {\n        return this.codeBlock.originalEditor().getValue()\n    }\n\n\n    render() {\n        return <div>\n            <CodeBlock initialCode={this.props.initialCode} ref={et => {\n                this.codeBlock = et\n            }} executeUnit={this}/>\n            <CommandGroup ref={et => {\n                this.commandGroup = et\n            }} executeUnit={this}/>\n            <DisplayGroup ref={et => this.displayGroup = et}/>\n\n        </div>\n    }\n}\n\n","import React from 'react'\nimport ExecuteUnit from \"./ExecuteUnit\";\nimport Engine from \"./service/Engine\";\n\nconst CODE_SPLITTER = \"set notebooksplitter='notebooksplitter';\"\n\nexport default class NodeBook extends React.Component {\n    constructor(props) {\n        super(props)\n        this.executeUnitRefs = []\n        this.executeUnits = [this.createNewExecuteUnit(\"\")]\n        this.state = {executeUnits: this.executeUnits}\n        this.engine = new Engine(5 * 60 * 1000)\n    }\n\n    createNewExecuteUnit = (initialCode) => {\n        return <ExecuteUnit parent={this} initialCode={initialCode} ref={et => this.addRef(et)}/>\n    }\n\n    addRef = (instance) => {\n        if (instance) {\n            this.executeUnitRefs.push(instance)\n        }\n    }\n\n    nextExecuteUnit = () => {\n        const isLastEmpty = () => {\n            return this.executeUnitRefs.slice(-1)[0].codeBlockIsEmpty()\n        }\n        if (!isLastEmpty()) {\n            this.executeUnits.push(this.createNewExecuteUnit())\n            this.setState({executeUnits: this.executeUnits})\n        }\n        this.saveNoteBook()\n    }\n\n    saveNoteBook = () => {\n        const value = this.executeUnitRefs.map((instance) => {\n            return instance.getCodeStr()\n        }).join(CODE_SPLITTER)\n\n        this.engine.saveFile(value, this.scriptId, (msg) => {\n        })\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    text = (value, scriptId) => {\n        this.scriptId = scriptId\n        this.initialCode = value\n        if (value && value !== \"undefined\") {\n            this.executeUnitRefs = []\n            this.executeUnits = this.initialCode.split(CODE_SPLITTER).map((initialCode) => {\n                return this.createNewExecuteUnit(initialCode)\n            })\n            this.setState({executeUnits: this.executeUnits})\n        }\n    }\n\n    render() {\n        return <div>\n            {\n                this.state.executeUnits\n            }\n        </div>\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport '../MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport { Button, Tooltip, Progress } from 'antd';\nimport { MLSQLAPI } from \"../../service/MLSQLAPI\";\nimport * as BackendConfig from \"../../service/BackendConfig\";\nimport * as HTTP from \"../../service/HTTPMethod\";\nimport { Select } from 'antd';\nimport { Resizable } from \"re-resizable\";\nimport {ActionProxy} from '../../backend_service/ActionProxy'\nimport { LogMonitor } from \"../../common/LogMonitor\";\n\nconst { Option } = Select;\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass PythonACE extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.language = this.props.language || \"sql\"\n        this.queryApp = this.props.parent.queryApp\n\n        this.state = { value: \"\", loading: false }\n        \n        this.executeQuery = this.executeQuery.bind(this)\n        this.cancelQuery = this.cancelQuery.bind(this)\n        \n        this.logMonitor = new LogMonitor(this.appendLog)        \n        \n        this.log = {}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({ value: value, scriptId: scriptId }, () => {\n            this.aceEditorRef.editor.setValue(value, 1)\n        })\n\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    self.appendLog(wow[\"msg\"])\n                }, (jsonErr) => {\n                    self.appendLog(jsonErr)\n                })\n            } else {\n                self.appendLog(\"saved\")\n            }\n\n        }, (fail) => {\n            self.appendLog(fail)\n        })\n\n    }\n\n    async executeQuery() {\n        this.commandGroup.setState({loading:true})\n        this.jobName = uuidv4()        \n        const api = new ActionProxy()\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n        self.getDisplay().update(JSON.parse(\"[]\"))\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const scriptId = self.state.scriptId\n        this.logMonitor.queryLog()\n        const res = await api.runScript(finalSQL, this.jobName, {\n            scriptId: scriptId,\n            runMode: \"python\",\n            executeMode: \"python\"\n        })        \n        if (res.status !== 200) {\n            this.logMonitor.cancelQueryLog()            \n            this.appendLog(res.content) \n            this.commandGroup.setState({loading:false})           \n            return\n        }\n        try {            \n            this.appendLog(res.content.join(\"\\n\"))\n        }catch(ex){\n            this.appendLog(res.content[\"msg\"])\n        }\n        this.logMonitor.cancelQueryLog()\n        this.commandGroup.setState({loading:false})\n    }\n\n    async cancelQuery() {\n        if (!this.jobName) return\n        const jobName = uuidv4()\n        const api = new ActionProxy()\n        const res = await api.runScript(\"!kill \" + this.jobName+\";\", jobName, {})                        \n        try {\n            this.appendLog(res.content[0]['description'])                \n        }catch(e){\n            this.appendLog(res.content)\n        }\n        \n        this.jobName = null\n        this.logMonitor.cancelQueryLog()\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    appendLog = (msg) => {\n        const editor = this.getMessageBoxAceEditor()\n        const session = editor.session\n        session.insert({\n            row: session.getLength(),\n            column: 0\n        }, \"\\n\" + msg)\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}>\n                    <Resizable defaultSize={{ height: \"500px\" }} onResize={() => { this.aceEditorRef.current.editor.resize(); }}><AceEditor\n                        ref={item => this.aceEditorRef=item}\n                        mode={this.language}\n                        theme=\"github\"\n                        width={\"100%\"}\n                        height={\"100%\"}\n                        onChange={this.onChange}\n                        name=\"mlsql_editor\"\n                        fontSize={16}\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        editorProps={{\n                            $blockScrolling: Infinity\n                        }}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: false,\n                            showLineNumbers: true,\n                            tabSize: 2,\n                            autoScrollEditorIntoView: true\n                        }}\n                    /></Resizable>\n                </div>\n\n                <CommandGroup ref={item => this.commandGroup=item} parent={this} />\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { loading: false, timeout: \"-1\" }\n        this.parent = props.parent\n    }\n\n    onChange = (value) => {\n        this.setState({ timeout: value })\n    }\n    \n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                    loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.cancelQuery}>Cancel</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n\n            </div>\n        )\n    }\n\n}\n\n\nexport default PythonACE\n\n","import React from 'react'\nimport PythonACE from './PythonACE';\n\n\nexport default class PythonEditor extends React.Component {\n    constructor(props) {\n        super(props)    \n        this.queryApp = this.props.parent\n    }\n\n    addRef = (instance) => {  \n        if(instance){\n            this.editor = instance\n        }      \n    }\n    \n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }    \n\n    text = (value, scriptId) => {        \n        this.editor.text(value, scriptId)     \n    }\n    \n\n    render() {\n        return <div>\n            <PythonACE parent={this} ref={et => this.addRef(et)} language=\"python\"></PythonACE>\n        </div>\n    }\n}","import * as React from \"react\"\nimport {Tabs} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport NodeBook from \"../notebook/NoteBook\";\nimport PythonEditor from \"../python/PythonEditor\";\n\nconst TabPane = Tabs.TabPane;\n\nexport class TabEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parent = props.parent\n        this.myRefs = []\n        this.newTabIndex = 0;\n        const panes = [\n            {\n                title: 'MLSQL 1',\n                content: <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: \"newTab0\"})\n                }} activeKey='newTab0'/>,\n                key: 'newTab0'\n            },\n        ];\n        this.state = {\n            activeKey: panes[0].key,\n            panes,\n        };\n        this.newTabIndex++\n    }\n\n    pushRef = (ref) => {\n        this.myRefs.push(ref)\n    }\n\n    getCurrentEditor = () => {\n        const activeKey = this.state.activeKey;\n        let currentItem = null\n        this.myRefs.forEach(item => {\n            if (item.activeKey === activeKey) {\n                currentItem = item\n            }\n        })\n        return currentItem\n    }\n\n    onChange = (activeKey) => {\n\n        let currentItem = null\n\n        this.state.panes.forEach(item => {\n            if (item.key === activeKey) {\n                currentItem = item\n            }\n        })\n\n        if (currentItem && !currentItem.title.endsWith(\".mlsql\")) {\n            this.parent.setState({displayEditor: \"normal\"})\n        } else if(currentItem && !currentItem.title.endsWith(\".nb\")) {\n            this.parent.setState({displayEditor: \"notebook\"})\n        }else {\n            this.parent.setState({displayEditor: \"pythoneditor\"})\n        }\n\n        this.setState({activeKey});\n    }\n\n    onEdit = (targetKey, action) => {\n        this[action](targetKey);\n    }\n\n    addFull = (tabName, callback) => {\n        const editor = (activeKey) => {\n            if (tabName.endsWith(\".mlsql\")) {\n                return <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            } else if(tabName.endsWith(\".nb\")) {\n                return <NodeBook parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            }else if(tabName.endsWith(\".py\")) {\n                return <PythonEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            }\n        }\n\n        const panes = this.state.panes;\n        const activeKey = `newTab${this.newTabIndex++}`;\n        panes.push({\n            title: tabName || 'MLSQL ' + this.newTabIndex,\n            content: editor(activeKey),\n            key: activeKey\n        });\n        this.setState({panes, activeKey});\n    }\n\n    add = () => {\n        this.addFull()\n    }\n\n    getPaneIndexByActiveKey = (targetKey) => {\n        let lastIndex;\n        this.state.panes.forEach((pane, i) => {\n            if (pane.key === targetKey) {\n                lastIndex = i - 1;\n            }\n        });\n        return lastIndex\n    }\n\n    remove = (targetKey) => {\n        let activeKey = this.state.activeKey;\n        let lastIndex = this.getPaneIndexByActiveKey(targetKey)\n\n        const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n        if (panes.length && activeKey === targetKey) {\n            if (lastIndex >= 0) {\n                activeKey = panes[lastIndex].key;\n            } else {\n                activeKey = panes[0].key;\n            }\n        }\n        const editorRefList = this.myRefs.filter((item) => item.activeKey === targetKey)\n        this.myRefs = this.myRefs.filter((item) => item.activeKey !== targetKey)\n        this.parent.closeEditor(editorRefList[0])\n\n        this.setState({panes, activeKey});\n    }\n\n    render() {\n        return (\n            <Tabs\n                onChange={this.onChange}\n                activeKey={this.state.activeKey}\n                type=\"editable-card\"\n                onEdit={this.onEdit}\n            >\n                {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}\n                                                       closable={pane.closable}>{pane.content}</TabPane>)}\n            </Tabs>\n        );\n    }\n}","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n        this.itemData = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    setData = (k, v) => {\n        this.itemData[k] = v\n    }\n\n    getData = (k) => {\n        return this.itemData[k]\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        this.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        this.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        this.setData(\"processType\", processType);\n        this.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        this.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        this.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        this.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        this.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        this.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.getCurrentEditor().ref.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    etDoubleClick = (evt) => {\n        this.onDragStart(evt)\n        this.queryApp.getCurrentEditor().ref.etOver(evt)\n    }\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Load\n                                        data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"} onDoubleClick={this.etDoubleClick}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\nimport {TabEditor} from \"./editor/TabEditor\";\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\nimport {Resizable} from \"re-resizable\";\nimport ExecuteUnit from \"./notebook/ExecuteUnit\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\", displayEditor: \"normal\"}\n        this.directoryTree = React.createRef()\n        this.editorGroup = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n        this.etRef = React.createRef()\n\n        // key is script id\n        // value is editor ref\n        this.fileToEditorMap = {}\n\n    }\n\n    openExistsOrNewEditor = (script) => {\n        const self = this\n\n        if (this.fileToEditorMap.hasOwnProperty(script.id)) {\n            const editorRef = this.fileToEditorMap[script.id]\n            editorRef.ref.text(script.content, script.id)\n            this.editorGroup.current.onChange(editorRef.activeKey)\n\n        } else {\n            this.editorGroup.current.addFull(script.name, (editorRef) => {\n                editorRef.ref.text(script.content, script.id)\n                self.fileToEditorMap[script.id] = editorRef\n            })\n\n        }\n\n        if (script.name.endsWith(\".nb\")) {\n            self.setState({displayEditor: \"notebook\"})\n        }else if (script.name.endsWith(\".py\")) {\n            self.setState({displayEditor: \"pythoneditor\"})\n        } else {\n            self.setState({displayEditor: \"normal\"})\n        }\n    }\n\n    closeEditor = (editorRef) => {\n        const tempFileToEditorMap = Object.keys(this.fileToEditorMap).filter(key => {\n            return this.fileToEditorMap[key].activeKey !== editorRef.activeKey\n        }).reduce((pre, key) => {\n            pre[key] = this.fileToEditorMap[key]\n            return pre\n        }, {})\n        this.fileToEditorMap = tempFileToEditorMap\n    }\n\n    getCurrentEditor = () => {\n        return this.editorGroup.current.getCurrentEditor()\n    }\n\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    tableAndDash = () => {\n        if (this.state.displayEditor !== \"notebook\" || this.state.displayEditor !== \"pythoneditor\") {\n            return <div>\n                <Resizable defaultSize={{height: \"300px\"}} onResize={() => {\n                    this.messageBox.current.editor.resize();\n                }}>\n                    <AceEditor\n                        height={\"100%\"}\n                        width={\"100%\"}\n                        ref={this.messageBox}\n                        mode=\"text\"\n                        theme=\"github\"\n                        name=\"message_box\"\n                    />\n                </Resizable>\n\n                <div>\n                    <MLSQLDash ref={this.dash} parent={this}/>\n                </div>\n                <div className=\"mlsql-query-display\">\n                    <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n            </div>\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <div style={{marginBottom: \"10px\"}}>\n                        <MLSQLETQuick ref={this.etRef} parent={this}/>\n                    </div>\n                    <TabEditor ref={this.editorGroup} parent={this}/>\n                    {this.tableAndDash()}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_TEAM = \"team\"\nexport const VIEW_DEMO = \"demo\"\nexport const VIEW_SCRIPT_PLUGINS = \"script_plugins\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n\n\nexport const TEAM_VIEW_BASIC = \"team_view_basic\"\nexport const SETUP_VIEW_BASIC = \"setup_view_basic\"\nexport const CLUSTER_VIEW_BASIC = \"cluster_view_basic\"\nexport const AUTH_VIEW_BASIC = \"auth_view_basic\"\nexport const SETTING_VIEW_BASIC = \"setting_view_basic\"\n","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"300px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[0], -1)\n            } catch (e) {\n\n            }\n\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=200 where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`...xml..file...path\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Icon, Input, Button, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHECK_TEAM_NAME, CREATE_TEAM} from \"../../service/BackendConfig\";\n\n\nclass CreateTeamForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.teamCards = props.parent\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CREATE_TEAM)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create team success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create team fail\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create team fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    teamNameCheck = (rule, value, callback) => {\n        if (value) {\n            const api = new MLSQLAPI(CHECK_TEAM_NAME)\n            api.request2({name: value}, (resJson) => {\n                if (!resJson[\"msg\"]) {\n                    callback(`${value} have been taken. Try another`);\n                }\n                else callback()\n            }, (failStr) => {\n                callback('server error:' + failStr);\n            })\n        } else {\n            callback()\n        }\n\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the team name!'},\n                            {validator: this.teamNameCheck}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>} placeholder=\"Team name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLCreateTeamForm = Form.create({name: 'create_team'})(CreateTeamForm);","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {\n    LIST_ROLES_MEMBER,\n    LIST_ROLES_TABLE,\n    LIST_TEAMS_MEMBER,\n    LIST_TEAMS_ROLE, LIST_TEAMS_TABLES, REMOVE_ROLES_MEMBER, REMOVE_ROLES_TABLE,\n    REMOVE_TEAMS_MEMBER,\n    REMOVE_TEAMS_ROLE, REMOVE_TEAMS_TABLE, RUN_SCRIPT\n} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchTeams(apiUrl, self, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByTeam(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_MEMBER)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchRoles(parent, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_ROLE)\n        api.request2({teamName: teamName}, resJson => {\n            parent.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTablesByRole(parent, teamName, roleName, stateKey) {\n        const api = new MLSQLAPI(LIST_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleMember(parent, teamName, roleName, userName, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName, userName: userName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByRole(parent, teamName, roleName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRole(parent, teamName, roleName) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_ROLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTeamMember(parent, teamName, userName, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_MEMBER)\n        api.request2({teamName: teamName, userName: userName}, resJson => {\n            callback()\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static teamInvite(self, apiUrl, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTables(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_TEAMS_TABLES)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTable(self, teamName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_TABLE)\n        api.request2({teamName: teamName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTableTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/tableTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchSourceTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/sourceTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchOperateTypes(self, stateKey) {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/operateTypes\\` as output;`, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleTable(self, teamName, roleName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ACCEPT_TEAMS_MEMBER,\n    LIST_TEAMS,\n    LIST_TEAMS_INVITED,\n    LIST_TEAMS_MEMBER,\n    REFUSE_TEAMS_MEMBER\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nexport class Teams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n\n    accept = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, ACCEPT_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n            this.teamCards.teamYourJoinRef.current.refresh()\n        })\n    }\n\n    refuse = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, REFUSE_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n        })\n    }\n\n    refresh = () => {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n    renderCommand = (value) => {\n        this.teamName = value\n        if (this.apiUrl === LIST_TEAMS_INVITED) {\n            return [<a onClick={this.accept}>accept</a>, <a onClick={this.refuse}>refuse</a>]\n        }\n        return []\n    }\n\n\n    render() {\n        return (\n            <div>\n                <List\n                    dataSource={this.state.data}\n                    renderItem={item => (\n                        <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                            <List.Item.Meta\n                                title={<a href=\"#\">{item.name}</a>}\n                            />\n                        </List.Item>\n                    )}\n                >\n                </List>\n            </div>\n        );\n    }\n}\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass InviteMember extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_MEMBER)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.setState({refresh: true})\n                        message.success(\"Invite success\", 3)\n                    } else {\n                        message.warning(\"Invite fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    self.teamCards.setState({refresh: true})\n                    message.error(\"Invite fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userNames', {\n                        rules: [\n                            {required: true, message: 'Please input the user name you want invite'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLInviteMember = Form.create({name: 'create_team'})(InviteMember);","import {Select} from \"antd\";\nimport * as React from \"react\";\nimport TeamService from \"./Service\";\n\nexport class Views {\n    static renderTeamsForSelect = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static onTeamSelect = (self, teamName) => {\n        self.currentTeamName = teamName\n        TeamService.fetchRoles(self, teamName, \"roles\")\n    }\n\n\n    static renderTeams = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    static renderRoles = (self) => {\n        return self.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderMembers = (self) => {\n        return self.state.members.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderBackends = (self) => {\n        return self.state.backends.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n    s\n    static teamSelect = (self, onChangeCallback) => {\n        return <Select\n            placeholder=\"Team name\"\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderTeams(self)}\n        </Select>\n    }\n\n    static roleSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"role name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderRoles(self)}\n        </Select>\n    }\n\n    static backendSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"backend name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderBackends(self)}\n        </Select>\n    }\n\n    static memberSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"member name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderMembers(self)}\n        </Select>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS_MEMBER} from \"../../service/BackendConfig\";\n\n\nexport class TeamMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchMembersByTeam(this, member, \"members\")\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            Service.removeTeamMember(self, self.currentTeam, userName, () => {\n                Service.fetchMembersByTeam(self, self.currentTeam, \"members\")\n            })\n        }\n        }>remove</a>]\n\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderMembers()}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass AddRoleForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleNames', {\n                        rules: [\n                            {required: true, message: 'Please input the role name you want to create'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"role\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddRoleForTeam = Form.create({name: 'add_role_for_team'})(AddRoleForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamRoles extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    refresh = () => {\n        if(this.currentTeam){\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n    }\n\n    renderCommand = (roleName) => {\n        return [<a onClick={() => {\n            Service.removeRole(this, this.currentTeam, roleName)\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.roles}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_MEMBER,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\n\n\nclass AddMemberForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_MEMBER)\n                api.request2(params, (resJson) => {\n                    console.log(resJson)\n                    console.log(\"----\")\n                    if (resJson[\"msg\"] === \"success\") {\n                        if (self.teamCards.roleMembersRef) {\n                            self.teamCards.roleMembersRef.current.refresh()\n                        }\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Views.onTeamSelect(this, teamName)\n        Service.fetchMembersByTeam(this, teamName, \"members\")\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            self.onTeamSelect(teamName)\n                        })\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name'}\n                        ],\n                    })(\n                        Views.roleSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userName', {\n                        rules: [\n                            {required: true, message: 'Please input the member name'}\n                        ],\n                    })(\n                        Views.memberSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddMemberForRole = Form.create({name: 'add_member_for_role'})(AddMemberForRole);","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, ADD_TEAMS_TABLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            tableTypes: [],\n            sourceTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n        Service.fetchTableTypes(this, \"tableTypes\")\n        Service.fetchSourceTypes(this, \"sourceTypes\")\n\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTableTypes = () => {\n        return this.state.tableTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n    renderSourceTypes = () => {\n        return this.state.sourceTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the table name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"table name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('db', {\n                        rules: [],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"db name\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('tableType', {\n                        rules: [\n                            {required: true, message: 'Please input the table type you want to create'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"table Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTableTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('sourceType', {\n                        rules: [],\n                    })(\n                        <Select\n                            placeholder=\"source Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderSourceTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForTeam = Form.create({name: 'add_table_for_team'})(AddTableForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchTables(this, member, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam) {\n            Service.fetchTables(this, this.currentTeam, \"tables\")\n        }\n    }\n\n    renderCommand = (tableId) => {\n        return [<a onClick={(evt) => {\n            evt.preventDefault()\n            Service.removeTable(this, this.currentTeam, tableId, null, () => {\n                Service.fetchTables(this, this.currentTeam, \"tables\")\n            })\n\n        }\n        }>remove</a>]\n    }\n\n    renderDB = (item) => {\n        if (item.db !== \"undefined\" && item.db) {\n            return item.db\n        } else return \"default\"\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={`${item.tableType}:${this.renderDB(item)}:${item.name}`}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    onRoleSelect = (roleName) => {\n        this.currentRoleName = roleName\n        Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n    }\n\n    refresh = () => {\n        if (this.currentTeamName && this.currentRoleName) {\n            Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n        }\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeamName && this.currentRoleName) {\n                Service.removeRoleMember(this, this.currentTeamName, this.currentRoleName, userName, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={item.name}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })}\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.roleSelect(self, self.onRoleSelect, \"default\")}\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderMembers()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {MLSQLCreateTeamForm} from \"./CreateTeam\";\nimport {Teams} from \"./Teams\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS, LIST_TEAMS_INVITED, LIST_TEAMS_JOINED} from \"../../service/BackendConfig\";\nimport {InviteMember, MLSQLInviteMember} from \"./InviteMember\";\nimport {TeamMembers} from \"./TeamMembers\";\nimport {MLSQLAddRoleForTeam} from \"./AddRoleForTeam\";\nimport {TeamRoles} from \"./TeamRoles\";\n\nimport {MLSQLAddMemberForRole} from \"./AddMemberForRole\";\nimport {RoleMembers} from \"./RoleMembers\";\n\n\nexport class TeamCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n        this.teamRolesRef = React.createRef()\n        this.teamMembersRef = React.createRef()\n        this.teamsRef = React.createRef()\n        this.roleTablesRef = React.createRef()\n        this.roleMembersRef = React.createRef()\n        this.teamYourJoinRef = React.createRef()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"Team belongs to you\" bordered={false}><Teams parent={this} ref={this.teamsRef}\n                                                                              apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Create new team\" bordered={false}>\n                        <MLSQLCreateTeamForm parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Team\" bordered={false}><TeamMembers ref={this.teamMembersRef}\n                                                                                     parent={this} apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Invite members\" bordered={false}>\n                        <MLSQLInviteMember parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Team you join\" bordered={false}><Teams parent={this} ref={this.teamYourJoinRef}\n                                                                        apiUrl={LIST_TEAMS_JOINED}/></Card>\n                </Col>\n\n                <Col span={12}>\n                    <Card title=\"Team inviting you\" bordered={false}><Teams parent={this} apiUrl={LIST_TEAMS_INVITED}/></Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n\n                <Col span={16}>\n                    <Card title=\"View Roles By Team\" bordered={false}><TeamRoles ref={this.teamRolesRef}\n                                                                                 parent={this} apiUrl={ADD_TEAMS_ROLE}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Add role to Team\" bordered={false}>\n                        <MLSQLAddRoleForTeam parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Role\" bordered={false}>\n                        <RoleMembers parent={this} ref={this.roleMembersRef}/>\n                    </Card>\n                </Col>\n\n\n                <Col span={8}>\n                    <Card title=\"Add Member to Role\" bordered={false}>\n                        <MLSQLAddMemberForRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {CLUSTER_MANAGER, LIST_BACKENDS_BY_TEAM} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchBackends(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/list\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static checkBackendName(self, name, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: name}, {action: \"/backend/name/check\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendsByNames(self, names, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({names: names}, {action: \"/backend/list/names\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendNamesByTeam(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_BACKENDS_BY_TEAM)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static addBackend(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/add\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeBackend(self, backendName, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: backendName}, {action: \"/backend/remove\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static updateBackendTags(self, backendName, tags, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({tags: tags, name: backendName}, {\n            action: \"/backend/tags/update\",\n            merge: \"append\"\n        })\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport Service from \"./remote/Service\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {Views as TeamViews} from \"../team/remote/Views\"\nimport TeamService from \"../team/remote/Service\"\nimport CluserService from \"./remote/Service\"\nimport {Row, Col, Button} from \"antd\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\nexport class ClusterBackends extends React.Component {\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.dataViewer = React.createRef()\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    renderBackends = () => {\n        return <MLSQLQueryDisplay ref={this.dataViewer} parent={this}/>\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        const tag = self.currentTeamName + \"_\" + roleName\n        Service.fetchBackends(this, {\n            tag: tag\n        }, \"backends\", () => {\n            self.dataViewer.current.update(self.state.backends.map(item => {\n                const {ecsResourcePoolId, id, tags, ...newitem} = item;\n                newitem[\"command\"] = <Button onClick={(evt) => {\n                    CluserService.removeBackend(self, newitem.name, null, () => {\n                        self.onRoleSelect(roleName)\n                    })\n                }}>remove</Button>\n                return newitem\n            }), {})\n        })\n    }\n\n    render() {\n        const self = this\n        return <div>\n            <Row>\n                <Col>\n                    {TeamViews.teamSelect(self, (teamName) => {\n                        TeamViews.onTeamSelect(self, teamName)\n                    })}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {TeamViews.roleSelect(self, self.onRoleSelect)}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {this.renderBackends()}\n                </Col>\n            </Row>\n        </div>\n\n    }\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddClusterBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, name, url} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n                ClusterService.addBackend(self, {\n                    name: name,\n                    url: url,\n                    tag: tag,\n                    teamName: teamName\n                }, null, () => {\n                    message.success(\"Add backend success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    checkBackendName = (rule, value, callback) => {\n        ClusterService.checkBackendName(this, value, null, (resJson) => {\n            if (resJson[\"msg\"]) {\n                callback(\"Name have been taken. Try another.\")\n            } else {\n                callback()\n            }\n        })\n\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the backend name'},\n                            {validator: this.checkBackendName},\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"backend name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('url', {\n                        rules: [\n                            {required: true, message: 'Please input the url name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddClusterBackend = Form.create({name: 'add_backend_for_cluster'})(AddClusterBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddTagToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const self = this\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n        ClusterService.fetchBackends(this, \"backends\", () => {\n            const tagsWithDuplicate = self.state.backends.map(item => {\n                return item.tags\n            }).reduce((items, item) => {\n                items.push(...item)\n                return items\n            }, [])\n            const tags = new Set(tagsWithDuplicate)\n            self.setState({tags: [...tags]})\n        })\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTagToRole = Form.create({name: 'add_tag_to_role'})(AddTagToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureDefaultBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"].includes(params.tag)) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            }else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureDefaultBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass AddExistClusterBackendToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, backendName} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n\n                ClusterService.updateBackendTags(self, backendName, tag, null, () => {\n                    message.success(\"Update backend tags success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(this, (teamName) => {\n                            ClusterService.fetchBackendNamesByTeam(this, teamName, null, (backendNames) => {\n                                ClusterService.fetchBackendsByNames(this, backendNames.map(item => {\n                                    return item.name\n                                }).join(\",\"), \"backends\", () => {\n                                    console.log(this.state.backends)\n                                })\n                            })\n                            Views.onTeamSelect(this, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(this, (roleName) => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('backendName', {\n                        rules: [{required: true, message: 'Please input the backend name'}],\n                    })(\n                        Views.backendSelect(this, (backend) => {\n\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Confirm\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddExistClusterBackendToRole = Form.create({name: 'AddExistClusterBackendToRole'})(AddExistClusterBackendToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED, USER_SCHEDULER_TAGS_UPDATE,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureSchedulerBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag, isScheduler: true}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"].includes(params.tag)) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            } else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureSchedulerDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureSchedulerBackend);","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {ClusterBackends} from \"./ClusterBackends\";\nimport {MLSQLAddClusterBackend} from \"./AddClusterBackend\";\nimport {MLSQLAddTagToRole} from \"./AddTagToRole\";\nimport {MLSQLConfigureDefaultBackend} from \"./ConfigureDefaultBackend\";\nimport {MLSQLAddExistClusterBackendToRole} from \"./AddExistClusterBackendToRole\";\nimport {MLSQLConfigureSchedulerDefaultBackend} from \"./ConfigureSchedulerBackend\";\n\n\nexport class ClusterCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.backendsRef = React.createRef()\n        this.state = {}\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"Set default backend tag\" bordered={false}>\n                        <MLSQLConfigureDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Set default scheduler backend tag\" bordered={false}>\n                        <MLSQLConfigureSchedulerDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Add Backend\" bordered={false}>\n                        <MLSQLAddClusterBackend parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Your Backends\" bordered={false}>\n                        <ClusterBackends parent={this} ref={this.backendsRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Add role to backend\" bordered={false}>\n                        <MLSQLAddExistClusterBackendToRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    onRoleSelect = (roleName) => {\n        this.currentRole = roleName\n        Service.fetchTablesByRole(this, this.currentTeam, roleName, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam && this.currentRole) {\n            Service.fetchTablesByRole(this, this.currentTeam, this.currentRole, \"tables\")\n        }\n    }\n\n    renderCommand = (tableNameId) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeam && this.currentRole) {\n                Service.removeRoleTable(this, this.currentTeam, this.currentRole, tableNameId, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={item.tableType + \":\" + this.sourceType(item.sourceType, item.tableType) + \":\" + item.name + \":\" + item.operateType}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.selectTeam}\n                        >\n                            {Views.renderTeamsForSelect(this)}\n                        </Select>\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onRoleSelect}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderTables()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_TABLE,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.authCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tables: [],\n            operateTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.authCards.roleTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Service.fetchRoles(this, teamName, \"roles\")\n        Service.fetchTables(this, teamName, \"tables\")\n        Service.fetchOperateTypes(this, \"operateTypes\")\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return this.state.tables.map(item => {\n            return <Select.Option key={item.name}\n                                  value={item.id}>{item.tableType}:{this.sourceType(item.sourceType, item.tableType)}:{item.db}.{item.name}</Select.Option>\n        })\n    }\n\n    renderOperateTypes = () => {\n        return this.state.operateTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name '}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tableName', {\n                        rules: [\n                            {required: true, message: 'Please input the tableName name '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"table name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTables()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('operateType', {\n                        rules: [\n                            {required: true, message: 'Please input the operateType to Role '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Operate type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderOperateTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForRole = Form.create({name: 'add_table_for_role'})(AddTableForRole);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLAddTableForTeam} from \"../team/AddTableForTeam\";\n\nimport {RoleTables} from \"../team/RoleTables\";\nimport {MLSQLAddTableForRole} from \"../team/AddTableForRole\";\n\n\nexport class AuthCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Add Table to Team\" bordered={false}>\n                        <MLSQLAddTableForTeam parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add table to role\" bordered={false}>\n                        <MLSQLAddTableForRole parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"View tables By Role\" bordered={false}>\n                        <RoleTables parent={this} ref={this.roleTablesRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List, notification, Card, Col, Row} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLCreateTeamForm} from \"../team/CreateTeam\";\nimport {MLSQLAddRoleForTeam} from \"../team/AddRoleForTeam\";\nimport {MLSQLAddMemberForRole} from \"../team/AddMemberForRole\";\nimport {MLSQLAddClusterBackend} from \"../cluster/AddClusterBackend\";\nimport {MLSQLConfigureDefaultBackend} from \"../cluster/ConfigureDefaultBackend\";\nimport {RoleMembers} from \"../team/RoleMembers\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class Setup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.steps = this.generateSteps()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    generateSteps() {\n        const self = this\n        return [{\n            title: 'Create Team',\n            content: () => {\n                return <Card title={\"input your team name\"} bordered={true}>\n                    <MLSQLCreateTeamForm parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Create Role',\n            content: () => {\n                return <Card title={\"Add new role to the team you have created\"} bordered={true}>\n                    <MLSQLAddRoleForTeam parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Invite user to Role',\n            content: () => {\n                return <Card title={\"Add member to the role you have created\"} bordered={true}>\n                    <MLSQLAddMemberForRole parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Create Backend',\n            content: () => {\n                return <Card title={\"Add the cluster information you have setup\"} bordered={true}>\n                    <MLSQLAddClusterBackend parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Set default backend',\n            content: () => {\n                return <Card title={\"Configure the default backend you want use\"} bordered={true}>\n                    <MLSQLConfigureDefaultBackend parent={self}/>\n                </Card>\n            }\n        },\n            {\n                title: 'Congratulation!',\n                content: () => {\n                    return <Card title={\"All Done\"} bordered={true}>\n                        Please go to Console\n                    </Card>\n                }\n            }\n        ];\n    }\n\n    componentDidMount() {\n\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\" style={{\"margin-top\": \"30px\"}}>\n                    <Row gutter={24}>\n                        <Col span={8}>\n\n\n                        </Col>\n                        <Col span={8}>\n                            {this.steps[current].content()}\n\n                        </Col>\n                    </Row>\n\n                </div>\n\n            </div>\n        );\n    }\n\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHNAGE_PASSWORD} from \"../../service/BackendConfig\";\n\nclass ChangePassword extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CHNAGE_PASSWORD)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Success\", 3)\n                    } else {\n                        message.warning(\"Fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {required: true, message: 'Please input the original password'}\n                        ],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"old password\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('newPassword', {\n                        rules: [{required: true, message: 'Please input the new password'}],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"new password\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Apply\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLChangePassword = Form.create({name: 'change_password'})(ChangePassword);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLChangePassword} from \"../team/MLSQLChangePassword\";\n\nexport class SettingCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Change password\" bordered={false}>\n                        <MLSQLChangePassword parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {\n    AUTH_VIEW_BASIC,\n    CLUSTER_VIEW_BASIC,\n    SETTING_VIEW_BASIC,\n    SETUP_VIEW_BASIC,\n    TEAM_VIEW_BASIC\n} from \"../../common/ViewConst\";\nimport {TeamCards} from \"./TeamCards\";\nimport {ClusterCards} from \"../cluster/ClusterCards\";\nimport {AuthCards} from \"../auth/AuthCards\";\nimport Setup from \"../demo/Setup\";\nimport {SettingCards} from \"./SettingCards\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.app = props.parent\n        this.state = {\n            currentView: SETUP_VIEW_BASIC\n        }\n\n\n    }\n\n    switchToBasic = () => {\n        this.setState({currentView: TEAM_VIEW_BASIC})\n    }\n\n    switchToSetup = () => {\n        this.setState({currentView: SETUP_VIEW_BASIC})\n    }\n\n    switchToCluster = () => {\n        this.setState({currentView: CLUSTER_VIEW_BASIC})\n    }\n\n    switchToAuth = () => {\n        this.setState({currentView: AUTH_VIEW_BASIC})\n    }\n\n    switchToSetting = () => {\n        this.setState({currentView: SETTING_VIEW_BASIC})\n    }\n\n    renderView = () => {\n        if (this.state.currentView === SETUP_VIEW_BASIC) return <Setup/>\n        if (this.state.currentView === TEAM_VIEW_BASIC) return <TeamCards/>\n        if (this.state.currentView === CLUSTER_VIEW_BASIC) return <ClusterCards/>\n        if (this.state.currentView === AUTH_VIEW_BASIC) return <AuthCards/>\n        if (this.state.currentView === SETTING_VIEW_BASIC) return <SettingCards/>\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToSetup}>Setup</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBasic}>Team</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToCluster}>Cluster</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block onClick={this.switchToAuth}>Auth</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block onClick={this.switchToSetting}>Setting</Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./team/MainPage\";\nimport {TEAM_VIEW_BASIC} from \"../common/ViewConst\";\n\nexport class MLSQLManagerApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage parent={this}/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Card} from \"antd\";\nimport AceEditor from \"react-ace\";\n\n\nexport default class ResultView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.nav = props.nav\n        this.state = {content: \"\"}\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            content: Object.entries(this.nav.collected_params).filter((item) => {\n                return item[1]\n            }).map((item) => {\n                return `set ${item[0]}='''${item[1]}''';`\n            }).join(\"\\n\") + `\\ninclude plugin.\\`${this.nav.current_plugin_name}\\`;`\n        })\n    }\n\n\n    render() {\n\n        return (\n\n\n            <div className=\"steps-content\"\n                 style={{\"margin-top\": \"30px\"}}>\n                <pre>\n                    {this.state.content}\n                </pre>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {Button, message, Steps, Form, Input, Card} from \"antd\";\nimport ResultView from \"./ResultView\";\n\nconst Step = Steps.Step;\nconst formItemLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 8},\n};\nconst formTailLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 8, offset: 4},\n};\n\nclass ScriptPluginView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n            steps: props.steps.concat([{desc: \"MLSQL Script\", \"final\": true}])\n        }\n        this.nav = props.parent\n    }\n\n    next() {\n\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                const current = this.state.current + 1;\n                this.setState({current});\n                this.nav.pushParam(values)\n            }\n        });\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    buildForm = (item) => {\n        if (item.hasOwnProperty(\"final\")) {\n            return <ResultView nav={this.nav}/>\n        }\n        const formItems = item[\"params\"]\n        const {getFieldDecorator} = this.props.form;\n        return formItems.map((formItem) => {\n            return <Form.Item {...formItemLayout} label={formItem['name']}>\n                {getFieldDecorator(formItem['name'], {\n                    rules: [{required: formItem['required'], message: `Please input ${formItem['required']}!`}],\n                })(\n                    <Input type=\"input\" placeholder={formItem['desc']}/>\n                )}\n            </Form.Item>\n        })\n    }\n\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n\n                <Steps current={current}>\n                    {this.state.steps.map(item => <Step key={item.desc} title={item.desc}/>)}\n                </Steps>\n                <div className=\"steps-content\"\n                     style={{\"margin-top\": \"30px\"}}>\n                    <Card bordered={true}>\n                        <Form {...formTailLayout} style={{width: \"600px\"}}>\n                            {this.buildForm(this.state.steps[current])}\n                        </Form>\n                    </Card>\n\n\n                </div>\n                <div className=\"steps-action\" style={{marginTop: \"30px\"}}>\n                    {\n                        current < this.state.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.state.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport const ScriptPluginViewForm = Form.create({name: \"plugin-tutorial\"})(ScriptPluginView);","import * as React from \"react\";\nimport {\n    Layout, Menu, Button\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {ScriptPluginViewForm} from \"./ScriptPluginView\";\n\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {data_menu: [], data_plugin: []}\n        this.collected_params = {}\n\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.newRunScript({}, `!plugin list \"script\";`, json => {\n            this.setState({data_menu: json}, () => {\n                if (json.length > 0) {\n                    this.showTut(json[0]['pluginName'])\n                }\n            })\n        }, fail => {\n        })\n\n\n    }\n\n    pushParam = (item) => {\n        Object.assign(this.collected_params, item)\n    }\n\n    showTut = (pluginName) => {\n        this.current_plugin_name = pluginName\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.newRunScript({}, `!plugin script show ${pluginName}/plugin.json;`, json => {\n\n            this.setState({\n                data_plugin: json.map((item) => {\n                    return JSON.parse(item['value'])[this.current_plugin_name]['compositor']\n                })\n            })\n        }, fail => {\n        })\n    }\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        {this.state.data_menu.map((item) => {\n                                return (<Menu.Item key=\"0\" onClick={() => {\n                                    this.showTut(item['pluginName'])\n                                }}>\n                                    {item['pluginName']}\n                                </Menu.Item>)\n                            }\n                        )}\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.state.data_plugin.map((item) => {\n                                return <ScriptPluginViewForm parent={this}\n                                                             steps={item}/>\n                            })}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./MainPage\";\n\nexport class MLSQLScriptPluginsApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_SCRIPT_PLUGINS, VIEW_TEAM} from \"../common/ViewConst\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\nimport {MLSQLManagerApp} from \"../components/MLSQLManagerApp\";\nimport {MLSQLScriptPluginsApp} from \"../components/script_plugins/MLSQLScriptPluginsApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n\n    }\n\n    componentDidMount() {\n        const self = this\n        this.auth.userName((name) => {\n            self.setState({userName: name})\n        })\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.auth.isLogin() && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_TEAM) return <MLSQLManagerApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_SCRIPT_PLUGINS) return <MLSQLScriptPluginsApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n        const self = this\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            }, () => self.app.updateLoginoutStatus())\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_SCRIPT_PLUGINS, VIEW_TEAM} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToTeam = () => {\n        this.setState({currentView: VIEW_TEAM})\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToScriptPlugins = () => {\n        this.setState({currentView: VIEW_SCRIPT_PLUGINS})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Team\" onClick={this.switchToTeam}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Script Plugins\"\n                                onClick={this.switchToScriptPlugins}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\"\n                             href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\"><img\n                        src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}