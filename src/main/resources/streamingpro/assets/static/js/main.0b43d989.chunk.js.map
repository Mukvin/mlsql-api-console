{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/et/ButtonToCommand.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/dash/MLSQLHTML.js","components/query/MLSQLDash.js","components/notebook/CodeBlock.js","components/notebook/CommandGroup.js","components/notebook/service/Engine.js","components/notebook/DataTable.js","components/notebook/DisplayGroup.js","components/notebook/ExecuteUnit.js","components/notebook/NoteBook.js","components/editor/TabEditor.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","components/team/CreateTeam.js","components/team/remote/Service.js","components/team/Teams.js","components/team/InviteMember.js","components/team/remote/Views.js","components/team/TeamMembers.js","components/team/AddRoleForTeam.js","components/team/TeamRoles.js","components/team/AddMemberForRole.js","components/team/AddTableForTeam.js","components/team/TeamTables.js","components/team/RoleMembers.js","components/team/TeamCards.js","components/cluster/remote/Service.js","components/cluster/ClusterBackends.js","components/cluster/AddClusterBackend.js","components/cluster/AddTagToRole.js","components/cluster/ConfigureDefaultBackend.js","components/cluster/AddExistClusterBackendToRole.js","components/cluster/ClusterCards.js","components/team/RoleTables.js","components/team/AddTableForRole.js","components/auth/AuthCards.js","components/demo/Setup.js","components/team/MLSQLChangePassword.js","components/team/SettingCards.js","components/team/MainPage.js","components/MLSQLManagerApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","console","log","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","res","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","skipAuth","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","text","get","catch","USER_TAGS_UPDATE","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","FILE_UPLOAD","CREATE_TEAM","CHECK_TEAM_NAME","LIST_TEAMS","LIST_TEAMS_INVITED","ADD_TEAMS_MEMBER","ACCEPT_TEAMS_MEMBER","REFUSE_TEAMS_MEMBER","ADD_TEAMS_ROLE","ADD_TEAMS_TABLE","ADD_ROLES_TABLE","ADD_ROLES_MEMBER","CHNAGE_PASSWORD","MLSQLAuth","apiResponse","removeItem","error","m","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","assert","condition","message","Error","ButtonToCommand","makeSQL","Option","Select","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","api","BackendConfig","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","appendLog","executeQuery","enterLoading","getDisplay","update","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","commandGroup","runScript","queryApp","setData","stringify","failRes","selectionRange","getSelectionRange","session","getTextRange","appendToEditor","p","getCursorPosition","insert","focus","msg","row","getLength","column","getDashBoard","dash","display","loading","resourceProgressRef","enter","jobProgress","taskProgressRef","exit","etOver","evt","et","etRef","eventName","getData","popName","processType","pathAlias","tableHidden","pathHidden","outputTableHidden","outputTableAlias","tableAlias","etPop","startLogging","logProgress","LogProgress","stopLogging","parent","React","parentCallback","newValue","_this2","react","className","onDragOver","preventDefault","onDrop","re_resizable_lib","defaultSize","height","onResize","resize","lib_default","a","ref","mode","theme","width","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","autoScrollEditorIntoView","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_JobProgress","MLSQLAceEditor_TaskProgress","MLSQLAceEditor_ResourceProgress","CommandGroup","_this3","es_button","onClick","es_select","style","msgBox","_this4","intervalTimer","mark","offset","setTimeout","setInterval","concat","jsonArray","length","clearInterval","JobProgress","_this5","resourceCompute","hasOwnProperty","progress","currentJobIndex","totalJob","percent","successPercent","title","ResourceProgress","_this6","activeTasks","totalCores","currentJobGroupActiveTasks","TaskProgress","_this7","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","forEach","item","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","isDir","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isExpanded","toggleIsExpanded","scriptFile","openExistsOrNewEditor","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","fileName","target","finish","create","endsWith","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","confirmDelete","confirmAlert","removeFile","closeOnEscape","closeOnClickOutside","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","createFolder","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","data","config","render","isPrototypeOf","type","substring","keys","basket","rows","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","modal","visible","onCancel","onOk","cancelText","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","post","file","attach","end","map","f","react_default","createElement","size","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","objectSpread","Component","randomColor","generateColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","dataType","prev","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","margin","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender","dataForRender2","jsonItem","moment","utc","timestamp","format","inputRowsPerSecond","processedRowsPerSecond","numInputRows","titleMap","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","action","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","span","Charts","hasLegend","subTitle","pre","now","valueFormat","val","split","isResource","MLSQLHTML","MLSQLHTML_MLSQLHTMLPanel","MLSQLHTMLPanel","refresh","sandbox","srcDoc","frameBorder","scrolling","ifr","Panel","Collapse","TabPane","Tabs","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","collapse","header","tabs","defaultActiveKey","tab","UploadDropZone_UploadDropzone","PureComponent","CodeBlock","originalEditor","container","lineHeight","maxLines","initialCode","evtExecute","isExecute","executeUnit","execute","cancelExecute","es_icon","spin","Engine","run","show_result","saveFile","code","DataTable","parseData","_this$parseData","_this$parseData2","slicedToArray","_this$parseData3","_this$parseData4","DataTable_ReactMarkdown","DisplayGroup","displayData","displayTableRef","displayDashRef","displayDash","displayTable","DataTable_DataTable","ExecuteUnit","codeBlock","displayGroup","notebook","nextExecuteUnit","codeBlockIsEmpty","getCodeStr","CodeBlock_CodeBlock","CommandGroup_CommandGroup","DisplayGroup_DisplayGroup","CODE_SPLITTER","NodeBook","createNewExecuteUnit","ExecuteUnit_ExecuteUnit","addRef","instance","executeUnitRefs","slice","executeUnits","saveNoteBook","engine","TabEditor","pushRef","myRefs","getCurrentEditor","activeKey","currentItem","panes","displayEditor","onEdit","targetKey","addFull","tabName","newTabIndex","src_components_MLSQLAceEditor","NoteBook_NodeBook","add","getPaneIndexByActiveKey","lastIndex","pane","remove","filter","editorRefList","closeEditor","TabEditor_TabPane","closable","InputGroup","Input","Group","ETLoadParams","etPopLoad","compact","ETPopLoad","getAttribute","sourceType","sourceTypeV","es_row","param","es_col","input","marginBottom","addonBefore","description","loadParamsRef","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","etpop","datasourcesRender","ETPopLoad_Option","ETPopLoad_InputGroup","showSearch","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","ETLoadParams_ETLoadParams","TextArea","ETPopAlgorithm","renderParam","temp","ETPopAlgorithm_InputGroup","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","ETBaseTool_InputGroup","showOutputTableName","pathNameForRender","showPathName","asStr","ETPopTool","_ETBaseTool","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataTypeV","udfType","udfTypeV","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","href","appendChild","click","removeChild","ETStreamProgress","jobType","ETStreamProgress_Option","ETPop","disableEtModalVisible","etModalVisible","enableEtModalVisible","popChild","renderContent","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","Modal_default","okText","MLSQLETQuick","itemData","onDragStart","renderPop","ETPop_ETPop","etDoubleClick","padding","MLSQLETQuick_Panel","gutter","card","tag_default","tyle","help","draggable","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","MLSQLQueryApp","script","fileToEditorMap","editorRef","editorGroup","tempFileToEditorMap","tableAndDash","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","MLSQLETQuick_MLSQLETQuick","TabEditor_TabEditor","VIEW_CONSOLE","VIEW_TEAM","VIEW_DEMO","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","TEAM_VIEW_BASIC","SETUP_VIEW_BASIC","CLUSTER_VIEW_BASIC","AUTH_VIEW_BASIC","SETTING_VIEW_BASIC","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","Item","generateView","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","renderView","currentView","BigDL_BigDL","NLP_NLP","Basic_Basic","Header","Layout","Content","Footer","Sider","MainPage","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","layout","minHeight","es_menu","defaultSelectedKeys","block","Demos_Demos","textAlign","MLSQLDemoApp","MainPage_MainPage","CreateTeamForm","handleSubmit","form","validateFields","resJson","teamCards","teamsRef","warning","failStr","teamNameCheck","rule","getFieldDecorator","es_form","onSubmit","rules","required","validator","prefix","htmlType","MLSQLCreateTeamForm","Form","Service","apiUrl","stateKey","defineProperty","MESSAGE_TIMEOUT","teamName","roleName","tableId","Teams","accept","teamInvite","fetchTeams","teamYourJoinRef","refuse","renderCommand","actions","Meta","InviteMember","renderTeams","teams","MLSQLInviteMember","Views","renderTeamsForSelect","onTeamSelect","currentTeamName","TeamService","fetchRoles","renderRoles","roles","renderMembers","members","renderBackends","backends","teamSelect","onChangeCallback","roleSelect","backendSelect","memberSelect","TeamMembers","selectTeam","member","currentTeam","fetchMembersByTeam","removeTeamMember","AddRoleForTeam","MLSQLAddRoleForTeam","TeamRoles","removeRole","AddMemberForRole","roleMembersRef","MLSQLAddMemberForRole","AddTableForTeam","renderTableTypes","tableTypes","renderSourceTypes","sourceTypes","fetchTableTypes","fetchSourceTypes","MLSQLAddTableForTeam","RoleMembers","onRoleSelect","currentRoleName","fetchMembersByRole","removeRoleMember","TeamCards","openNotificationWithIcon","notification","teamRolesRef","teamMembersRef","roleTablesRef","Teams_Teams","TeamMembers_TeamMembers","TeamRoles_TeamRoles","RoleMembers_RoleMembers","newParams","names","backendName","merge","ClusterBackends","dataViewer","tag","fetchBackends","ecsResourcePoolId","newitem","objectWithoutProperties","CluserService","removeBackend","TeamViews","AddClusterBackend","acc","ClusterService","addBackend","checkBackendName","MLSQLAddClusterBackend","AddTagToRole","renderTags","tagsWithDuplicate","items","Set","ConfigureDefaultBackend","MLSQLConfigureDefaultBackend","AddExistClusterBackendToRole","updateBackendTags","fetchBackendNamesByTeam","backendNames","fetchBackendsByNames","backend","MLSQLAddExistClusterBackendToRole","ClusterCards","backendsRef","ClusterBackends_ClusterBackends","RoleTables","currentRole","fetchTablesByRole","tableNameId","removeRoleTable","defaultValue","renderTables","tables","tableType","operateType","AddTableForRole","authCards","fetchTables","fetchOperateTypes","db","renderOperateTypes","operateTypes","MLSQLAddTableForRole","AuthCards","RoleTables_RoleTables","Setup","Setup_Step","margin-top","ChangePassword","MLSQLChangePassword","SettingCards","switchToSetup","switchToCluster","switchToAuth","switchToSetting","Setup_Setup","TeamCards_TeamCards","ClusterCards_ClusterCards","AuthCards_AuthCards","SettingCards_SettingCards","app","MainPage_Sider","MainPage_Header","MainPage_Content","MainPage_Footer","MLSQLManagerApp","team_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","MLSQLDemoApp_MLSQLDemoApp","MLSQLManagerApp_MLSQLManagerApp","validateUserName","validatePassword","isEmail","test","normal","inject","App","menuRef","switchToTeam","switchToConsole","switchToDemo","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b43d989.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                console.log(e)\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    let res = str\n                    try {\n                        res = JSON.parse(str)[\"msg\"]\n                    } catch (e) {\n\n                    }\n                    serverErrorCallback(res)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                serverErrorCallback(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            let res = str\n                            try {\n                                res = JSON.parse(str)[\"msg\"]\n                            } catch (e) {\n\n                            }\n                            serverErrorCallback(\"backend status:\" + ok.status + \"\\n\" + res)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        let res = str\n                        try {\n                            res = JSON.parse(str)[\"msg\"]\n                        } catch (e) {\n\n                        }\n                        serverErrorCallback(res)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n\nexport const CREATE_TEAM = BACKEND_SERVER + \"/api_v1/team/create\";\nexport const CHECK_TEAM_NAME = BACKEND_SERVER + \"/api_v1/team/name/check\";\nexport const LIST_TEAMS = BACKEND_SERVER + \"/api_v1/team\";\n\nexport const LIST_TEAMS_JOINED = BACKEND_SERVER + \"/api_v1/team/joined\";\nexport const LIST_TEAMS_INVITED = BACKEND_SERVER + \"/api_v1/team/invited\";\n\nexport const LIST_TEAMS_IN = BACKEND_SERVER + \"/api_v1/team/in\";\n\n\nexport const ADD_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/add\";\nexport const REMOVE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/remove\";\nexport const LIST_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/members\";\n\nexport const ACCEPT_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/accept\";\nexport const REFUSE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/refuse\";\n\nexport const ADD_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/add\";\nexport const REMOVE_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/remove\";\nexport const LIST_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/roles\";\n\nexport const ADD_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/add\";\nexport const REMOVE_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/remove\";\nexport const LIST_TEAMS_TABLES = BACKEND_SERVER + \"/api_v1/team/tables\";\n\n\nexport const ADD_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/add\";\nexport const REMOVE_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/remove\";\nexport const LIST_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/tables\";\n\nexport const ADD_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/add\";\nexport const REMOVE_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/remove\";\nexport const LIST_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/members\";\n\nexport const LIST_BACKENDS_BY_TEAM = BACKEND_SERVER + \"/api_v1/backends\";\n\nexport const CHNAGE_PASSWORD = BACKEND_SERVER + \"/api_v1/changepassword\";","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\nimport {Select} from 'antd';\nimport {Resizable} from \"re-resizable\";\n\nconst {Option} = Select;\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.jobProgress = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId}, () => {\n            this.aceEditorRef.current.editor.setValue(value, 1)\n        })\n\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    self.appendLog(wow[\"msg\"])\n                }, (jsonErr) => {\n                    self.appendLog(jsonErr)\n                })\n            } else {\n                self.appendLog(\"saved\")\n            }\n\n        }, (fail) => {\n            self.appendLog(fail)\n        })\n\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n        self.getDisplay().update(JSON.parse(\"[]\"))\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        const timeout = this.commandGroup.current.state.timeout\n\n        api.runScript({\n            jobName: jobName,\n            background: (this.state.background || false),\n            timeout: timeout\n        }, finalSQL, (wow) => {\n            try {\n                self.queryApp.setData(wow)\n                self.getDisplay().update(wow)\n                self.appendLog(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.appendLog(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow, null, 2))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            self.exitLoading()\n            let failRes = fail.toString()\n            try {\n                failRes = JSON.parse(failRes)[\"msg\"]\n            } catch (e) {\n            }\n            self.appendLog(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    appendLog = (msg) => {\n        const editor = this.getMessageBoxAceEditor()\n        const session = editor.session\n        session.insert({\n            row: session.getLength(),\n            column: 0\n        }, \"\\n\" + msg)\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.jobProgress.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})\n        // this.logProgress = new LogProgress(this)\n        // this.logProgress.enter()\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.jobProgress.current.exit()\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()\n        // if (this.logProgress) {\n        //     this.logProgress.exit()\n        // }\n    }\n    etOver = (evt) => {\n        const et = this.queryApp.etRef.current\n        const eventName = et.getData(\"eventName\")\n        const popName = et.getData(\"popName\")\n        const processType = et.getData(\"processType\")\n        const pathAlias = et.getData(\"pathAlias\")\n        const tableHidden = et.getData(\"tableHidden\")\n        const pathHidden = et.getData(\"pathHidden\")\n        const outputTableHidden = et.getData(\"outputTableHidden\")\n        const outputTableAlias = et.getData(\"outputTableAlias\")\n        const tableAlias = et.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            et.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}>\n                    <Resizable defaultSize={{height: \"500px\"}} onResize={()=>{this.aceEditorRef.current.editor.resize();}}><AceEditor\n                        ref={this.aceEditorRef}\n                        mode=\"sql\"\n                        theme=\"github\"\n                        width={\"100%\"}\n                        height={\"100%\"}\n                        onChange={this.onChange}\n                        name=\"mlsql_editor\"\n                        fontSize={16}\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        editorProps={{\n                            $blockScrolling: Infinity\n                        }}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: false,\n                            showLineNumbers: true,\n                            tabSize: 2,\n                            autoScrollEditorIntoView: true\n                        }}\n                    /></Resizable>\n                </div>\n\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <JobProgress ref={this.jobProgress} parent={this}></JobProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n            </div>\n        )\n    }\n\n    startLogging = () => {\n        if (!this.logProgress) {\n            this.logProgress = new LogProgress(this)\n        }\n        this.logProgress.enter()\n    }\n    stopLogging = () => {\n        if (this.logProgress) {\n            this.logProgress.exit()\n        }\n\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, timeout: \"-1\"}\n        this.parent = props.parent\n    }\n\n    onChange = (value) => {\n        this.setState({timeout: value})\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n                <Button onClick={this.parent.startLogging}>Start logging</Button>\n                <Button onClick={this.parent.stopLogging}>Stop logging</Button>\n                Job Timeout:<Select\n                onChange={this.onChange}\n                style={{width: \"120px\"}}\n            >\n                <Option value=\"10000\">10s</Option>\n                <Option value=\"30000\">30s</Option>\n                <Option value=\"60000\">60s</Option>\n                <Option value=\"1800000\">30m</Option>\n                <Option value=\"7200000\">2h</Option>\n                <Option value=\"28800000\">8h</Option>\n                <Option value=\"-1\">unlimited</Option>\n            </Select>\n            </div>\n        )\n    }\n\n}\n\nclass LogProgress {\n    constructor(msgBox) {\n        this.msgBox = msgBox\n        this.logProgress = \"loaded\"\n    }\n\n    enter = (params) => {\n        const self = this\n        if (self.intervalTimer) {\n            return\n        }\n        this.mark = true\n        this.offset = -1\n        setTimeout(() => {\n            if (self.mark) {\n                self.loading = true\n                self.intervalTimer = setInterval(() => {\n                        if (self.logProgress === \"loading\") {\n                            return\n                        }\n                        self.logProgress = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n\n                        api.runScript({}, `load _mlsql_.\\`log/${self.offset}\\` where filePath=\"engine_log\" as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            if (jsonObj['value'].length > 0) {\n                                this.msgBox.appendLog(jsonObj['value'].join(\"\\n\"))\n                            }\n                            self.offset = jsonObj[\"offset\"]\n                            self.logProgress = \"loaded\"\n                        }, (str) => {\n                            self.logProgress = \"loaded\"\n                            try {\n                                this.msgBox.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n\n                        })\n\n                    }\n\n                    , 1000)\n            }\n\n        }, 1000)\n\n    }\n\n    exit = () => {\n        const self = this\n        self.loading = false\n        self.mark = false\n        if (self.intervalTimer) {\n            clearInterval(self.intervalTimer)\n            self.intervalTimer = null\n        }\n\n    }\n\n}\n\n\nclass JobProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`jobs/get/${jobName}\\` as wow;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    console.log(jsonObj)\n                                    const p = jsonObj.progress.currentJobIndex / jsonObj.progress.totalJob * 100\n                                    self.setState({\n                                        percent: p,\n                                        successPercent: p,\n                                        title: `Jobs: current/Total: ${jsonObj.progress.currentJobIndex}/${jsonObj.progress.totalJob })`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    self.setState({\n                                        percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                        successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                        title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if (self.taskCompute === \"loading\") {\n                            return\n                        }\n                        self.taskCompute = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute = \"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute = \"loaded\"\n                            try {\n                                self.parent.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 1000)\n            }\n\n        }, 1000)\n\n    }\n\n    exit = () => {\n        this.taskCompute = \"loaded\"\n        this.resourceCompute = \"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu isDir={node.isDir} parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.openExistsOrNewEditor({id: node.id, content: scriptFile.content, name: scriptFile.name})\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.toggleIsExpanded(nodeData.id, false)\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.toggleIsExpanded(nodeData.id, true)\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && (!params.fileName.endsWith(\".mlsql\") && !params.fileName.endsWith(\".nb\"))) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql or .nb\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n        this.isDir = this.props.isDir\n    }\n\n    confirmDelete = () => {\n        confirmAlert({\n            title: 'Confirm to delete',\n            message: 'Are you sure to do this ？',\n            buttons: [\n                {\n                    label: 'confirm',\n                    onClick: () => this.removeFile()\n                },\n                {\n                    label: 'cancel',\n                    onClick: () => {\n                    }\n                }\n            ],\n            closeOnEscape: true, closeOnClickOutside: false\n        });\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject() && this.isDir) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n    createFolder = () => {\n        if (this.isDir) {\n            return <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n        if (this.isCreateProject()) {\n            return <MenuItem icon=\"folder-new\" text=\"Create Project\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.confirmDelete()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    {this.createFolder()}\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table,Modal} from 'antd';\n\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded. \\n You can check the files with command: !hdfs -ls /tmp/upload; \"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough or backend fails\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend} from 'recharts';\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).format('DD,h:mm:ss')\n            dataForRender.push({\n                x: x,\n                inputRowsPerSecond: jsonItem.inputRowsPerSecond,\n                processedRowsPerSecond: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                numInputRows: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            dataForRender2: dataForRender2\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender}>\n                <Line type=\"monotone\" dataKey=\"inputRowsPerSecond\" stroke=\"#8884d8\"/>\n                <Line type=\"monotone\" dataKey=\"processedRowsPerSecond\" stroke=\"#82ca9d\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender2}>\n                <Line type=\"monotone\" dataKey=\"numInputRows\" stroke=\"#8884d8\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React from 'react';\nimport {Resizable} from \"re-resizable\";\n\n\nexport default class MLSQLHTML {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLHTML.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"html\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        return <MLSQLHTMLPanel data={item}></MLSQLHTMLPanel>\n    }\n\n}\n\nexport class MLSQLHTMLPanel extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {data: this.props.data}\n    }\n\n    refresh = (data) => {\n        this.setState({data: data})\n    }\n\n    render() {\n        return (\n            <div>\n                <Resizable defaultSize={{height: \"500px\"}}>\n                    <iframe\n                        sandbox=\"allow-scripts\"\n                        style={{width: '100%', height: \"100%\"}}\n                        srcDoc={this.state.data[\"html\"]}\n                        frameBorder=\"0\"\n                        scrolling=\"yes\"\n                        ref={(f) => {\n                            this.ifr = f;\n                        }}\n\n                    />\n                </Resizable>\n            </div>\n        );\n    }\n\n\n}","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\nimport MLSQLHTML from \"../dash/MLSQLHTML\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        if (MLSQLHTML.isShouldRender(data)) {\n            return MLSQLHTML.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import React from 'react'\nimport AceEditor from \"react-ace\";\n\n/**\n * onLoad(editor){\n  // Your editor options comes here\n   editor.on('change', (arg, activeEditor) => {\n      const aceEditor = activeEditor;\n      const newHeight = aceEditor.getSession().getScreenLength() *\n        (aceEditor.renderer.lineHeight + aceEditor.renderer.scrollBar.getWidth());\n       aceEditor.container.style.height = `${newHeight}px`;\n      aceEditor.resize();\n    });\n}\n */\nexport default class CodeBlock extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    originalEditor = () => {\n        return this.editor.editor\n    }\n\n    componentDidMount() {\n        this.originalEditor().container.style.lineHeight = 3\n    }\n\n    render() {\n        return (\n            <AceEditor\n                maxLines={Infinity}\n                width={\"100%\"}\n                ref={et => {\n                    this.editor = et\n                }}\n                value={this.props.initialCode}\n                mode=\"sql\"\n                theme=\"github\"\n\n            />\n        )\n    }\n}","import React from 'react'\nimport {Icon} from \"antd\";\n\nexport default class CommandGroup extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {isExecute: false, executeUnit: props.executeUnit}\n    }\n\n    evtExecute = () => {\n        this.setState({isExecute: true})\n        this.state.executeUnit.execute()\n    }\n\n    cancelExecute = () => {\n        this.setState({isExecute: false})\n    }\n\n    render() {\n        return <div>\n            {\n                this.state.isExecute ? <span onClick={this.cancelExecute}><Icon type=\"sync\" spin/></span> :\n                    <span onClick={this.evtExecute}><Icon type=\"caret-right\"/></span>\n            }\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport * as BackendConfig from \"../../../service/BackendConfig\";\nimport * as HTTP from \"../../../service/HTTPMethod\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport default class Engine {\n\n    /**\n     * @param {Number} timeout\n     */\n    constructor(timeout) {\n        this.timeout = timeout\n    }\n\n    /**\n     * @param {string} sql\n     * @param {(msg)=>{}} show_result\n     */\n    run = (sql, show_result) => {\n        const jobName = uuidv4()\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        api.runScript({\n            jobName: jobName,\n            timeout: this.timeout\n        }, sql, wow => {\n            try {\n                show_result(wow)\n            } catch (e) {\n                show_result(JSON.stringify(wow, null, 2))\n            }\n        }, fail => {\n            let failRes = fail.toString()\n            try {\n                show_result(JSON.parse(failRes)[\"msg\"])\n            } catch (e) {\n            }\n        })\n    }\n\n    /**\n     * @param {string} code\n     * @param {string} scriptId\n     * @param {(msg)=>{}} show_result\n     */\n    saveFile = (code, scriptId, show_result) => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        api.request(HTTP.Method.POST, {\n            id: scriptId,\n            content: code\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    show_result(wow[\"msg\"])\n                }, (jsonErr) => {\n                    show_result(jsonErr)\n                })\n            } else {\n                show_result(\"saved\")\n            }\n\n        }, (fail) => {\n            show_result(fail)\n        })\n    }\n}","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table, Modal} from 'antd';\n\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class DataTable extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const [keys, rows] = this.parseData(props.data || [], props.config || {})\n        this.state = {columns: keys, rows: rows, view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data, config) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (config && config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    parseData = (data, config) => {\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n        return [keys, rows]\n    }\n\n    refresh = (data, config) => {\n        // e.g. [{\"a\":1}]\n        const [keys, rows] = this.parseData(data, config)\n        this.setState({columns: keys, rows: rows, config: config})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={self.state.columns}\n                    dataSource={self.state.rows}/>\n                <Modal\n                    title={\"View\"}\n                    visible={self.state.view.enabled}\n                    onCancel={self.disablePreview}\n                    onOk={self.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={self.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport DataTable from \"./DataTable\";\nimport MLSQLHTML, {MLSQLHTMLPanel} from \"../dash/MLSQLHTML\";\n\nexport default class DisplayGroup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n\n    refresh = (displayData) => {\n        this.setState({displayData: displayData})\n        if (this.displayTableRef) {\n            this.displayTableRef.refresh(this.state.displayData, {})\n        }\n\n        if (this.displayDashRef) {\n            const item = this.state.displayData[0]\n            this.displayDashRef.refresh(item)\n        }\n\n    }\n\n    displayDash = () => {\n        if (this.state.displayData && MLSQLHTML.isShouldRender(this.state.displayData)) {\n            const item = this.state.displayData[0]\n            return <MLSQLHTMLPanel data={item} ref={(et) => this.displayDashRef = et}></MLSQLHTMLPanel>\n        } else {\n            return <div></div>\n        }\n\n    }\n\n    displayTable = () => {\n        if (this.state.displayData) {\n            return <DataTable data={this.state.displayData} ref={(et) => this.displayTableRef = et}></DataTable>\n        } else {\n            return <div></div>\n        }\n\n    }\n\n    render() {\n        return <div>{\n            this.displayTable()\n        }{this.displayDash()}</div>\n\n    }\n}","import React from 'react'\nimport CodeBlock from \"./CodeBlock\";\nimport CommandGroup from \"./CommandGroup\";\nimport Engine from \"./service/Engine\";\nimport DisplayGroup from \"./DisplayGroup\";\n\n\nexport default class ExecuteUnit extends React.Component {\n    constructor(props) {\n        super(props)\n        this.notebook = props.parent\n    }\n\n    execute = () => {\n        const sql = this.codeBlock.originalEditor().getValue()\n        const engine = new Engine(5 * 60 * 1000)\n        engine.run(sql, (msg) => {\n            this.displayGroup.refresh(msg)\n            this.commandGroup.setState({isExecute: false})\n            this.notebook.nextExecuteUnit()\n        })\n    }\n\n    codeBlockIsEmpty = () => {\n        return this.getCodeStr() === \"\"\n    }\n\n    getCodeStr = () => {\n        return this.codeBlock.originalEditor().getValue()\n    }\n\n\n    render() {\n        return <div>\n            <CodeBlock initialCode={this.props.initialCode} ref={et => {\n                this.codeBlock = et\n            }} executeUnit={this}/>\n            <CommandGroup ref={et => {\n                this.commandGroup = et\n            }} executeUnit={this}/>\n            <DisplayGroup ref={et => this.displayGroup = et}/>\n\n        </div>\n    }\n}\n\n","import React from 'react'\nimport ExecuteUnit from \"./ExecuteUnit\";\nimport Engine from \"./service/Engine\";\n\nconst CODE_SPLITTER = \"set notebooksplitter='notebooksplitter';\"\n\nexport default class NodeBook extends React.Component {\n    constructor(props) {\n        super(props)\n        this.executeUnitRefs = []\n        this.executeUnits = [this.createNewExecuteUnit(\"\")]\n        this.state = {executeUnits: this.executeUnits}\n        this.engine = new Engine(5 * 60 * 1000)\n    }\n\n    createNewExecuteUnit = (initialCode) => {\n        return <ExecuteUnit parent={this} initialCode={initialCode} ref={et => this.addRef(et)}/>\n    }\n\n    addRef = (instance) => {\n        if (instance) {\n            this.executeUnitRefs.push(instance)\n        }\n    }\n\n    nextExecuteUnit = () => {\n        const isLastEmpty = () => {\n            return this.executeUnitRefs.slice(-1)[0].codeBlockIsEmpty()\n        }\n        if (!isLastEmpty()) {\n            this.executeUnits.push(this.createNewExecuteUnit())\n            this.setState({executeUnits: this.executeUnits})\n        }\n        this.saveNoteBook()\n    }\n\n    saveNoteBook = () => {\n        const value = this.executeUnitRefs.map((instance) => {\n            return instance.getCodeStr()\n        }).join(CODE_SPLITTER)\n\n        this.engine.saveFile(value, this.scriptId, (msg) => {\n        })\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    text = (value, scriptId) => {\n        this.scriptId = scriptId\n        this.initialCode = value\n        if (value && value !== \"undefined\") {\n            this.executeUnitRefs = []\n            this.executeUnits = this.initialCode.split(CODE_SPLITTER).map((initialCode) => {\n                return this.createNewExecuteUnit(initialCode)\n            })\n            this.setState({executeUnits: this.executeUnits})\n        }\n    }\n\n    render() {\n        return <div>\n            {\n                this.state.executeUnits\n            }\n        </div>\n    }\n}","import * as React from \"react\"\nimport {Tabs} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport ExecuteUnit from \"../notebook/ExecuteUnit\";\nimport NodeBook from \"../notebook/NoteBook\";\n\nconst TabPane = Tabs.TabPane;\n\nexport class TabEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parent = props.parent\n        this.myRefs = []\n        this.newTabIndex = 0;\n        const panes = [\n            {\n                title: 'MLSQL 1',\n                content: <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: \"newTab0\"})\n                }} activeKey='newTab0'/>,\n                key: 'newTab0'\n            },\n        ];\n        this.state = {\n            activeKey: panes[0].key,\n            panes,\n        };\n        this.newTabIndex++\n    }\n\n    pushRef = (ref) => {\n        this.myRefs.push(ref)\n    }\n\n    getCurrentEditor = () => {\n        const activeKey = this.state.activeKey;\n        let currentItem = null\n        this.myRefs.forEach(item => {\n            if (item.activeKey === activeKey) {\n                currentItem = item\n            }\n        })\n        return currentItem\n    }\n\n    onChange = (activeKey) => {\n\n        let currentItem = null\n\n        this.state.panes.forEach(item => {\n            if (item.key === activeKey) {\n                currentItem = item\n            }\n        })\n\n        if (currentItem && !currentItem.title.endsWith(\".nb\")) {\n            this.parent.setState({displayEditor: \"normal\"})\n        } else {\n            this.parent.setState({displayEditor: \"notebook\"})\n        }\n\n        this.setState({activeKey});\n    }\n\n    onEdit = (targetKey, action) => {\n        this[action](targetKey);\n    }\n\n    addFull = (tabName, callback) => {\n        const editor = (activeKey) => {\n            if (tabName.endsWith(\".mlsql\")) {\n                return <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            } else {\n                return <NodeBook parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            }\n        }\n\n        const panes = this.state.panes;\n        const activeKey = `newTab${this.newTabIndex++}`;\n        panes.push({\n            title: tabName || 'MLSQL ' + this.newTabIndex,\n            content: editor(activeKey),\n            key: activeKey\n        });\n        this.setState({panes, activeKey});\n    }\n\n    add = () => {\n        this.addFull()\n    }\n\n    getPaneIndexByActiveKey = (targetKey) => {\n        let lastIndex;\n        this.state.panes.forEach((pane, i) => {\n            if (pane.key === targetKey) {\n                lastIndex = i - 1;\n            }\n        });\n        return lastIndex\n    }\n\n    remove = (targetKey) => {\n        let activeKey = this.state.activeKey;\n        let lastIndex = this.getPaneIndexByActiveKey(targetKey)\n\n        const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n        if (panes.length && activeKey === targetKey) {\n            if (lastIndex >= 0) {\n                activeKey = panes[lastIndex].key;\n            } else {\n                activeKey = panes[0].key;\n            }\n        }\n        const editorRefList = this.myRefs.filter((item) => item.activeKey === targetKey)\n        this.myRefs = this.myRefs.filter((item) => item.activeKey !== targetKey)\n        this.parent.closeEditor(editorRefList[0])\n\n        this.setState({panes, activeKey});\n    }\n\n    render() {\n        return (\n            <Tabs\n                onChange={this.onChange}\n                activeKey={this.state.activeKey}\n                type=\"editable-card\"\n                onEdit={this.onEdit}\n            >\n                {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}\n                                                       closable={pane.closable}>{pane.content}</TabPane>)}\n            </Tabs>\n        );\n    }\n}","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n        this.itemData = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    setData = (k, v) => {\n        this.itemData[k] = v\n    }\n\n    getData = (k) => {\n        return this.itemData[k]\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        this.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        this.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        this.setData(\"processType\", processType);\n        this.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        this.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        this.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        this.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        this.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        this.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.getCurrentEditor().ref.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    etDoubleClick = (evt) => {\n        this.onDragStart(evt)\n        this.queryApp.getCurrentEditor().ref.etOver(evt)\n    }\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Load\n                                        data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"} onDoubleClick={this.etDoubleClick}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\nimport {TabEditor} from \"./editor/TabEditor\";\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\nimport {Resizable} from \"re-resizable\";\nimport ExecuteUnit from \"./notebook/ExecuteUnit\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\", displayEditor: \"normal\"}\n        this.directoryTree = React.createRef()\n        this.editorGroup = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n        this.etRef = React.createRef()\n\n        // key is script id\n        // value is editor ref\n        this.fileToEditorMap = {}\n\n    }\n\n    openExistsOrNewEditor = (script) => {\n        const self = this\n\n        if (this.fileToEditorMap.hasOwnProperty(script.id)) {\n            const editorRef = this.fileToEditorMap[script.id]\n            editorRef.ref.text(script.content, script.id)\n            this.editorGroup.current.onChange(editorRef.activeKey)\n\n        } else {\n            this.editorGroup.current.addFull(script.name, (editorRef) => {\n                editorRef.ref.text(script.content, script.id)\n                self.fileToEditorMap[script.id] = editorRef\n            })\n\n        }\n\n        if (script.name.endsWith(\".nb\")) {\n            self.setState({displayEditor: \"notebook\"})\n        } else {\n            self.setState({displayEditor: \"normal\"})\n        }\n    }\n\n    closeEditor = (editorRef) => {\n        const tempFileToEditorMap = Object.keys(this.fileToEditorMap).filter(key => {\n            return this.fileToEditorMap[key].activeKey !== editorRef.activeKey\n        }).reduce((pre, key) => {\n            pre[key] = this.fileToEditorMap[key]\n            return pre\n        }, {})\n        this.fileToEditorMap = tempFileToEditorMap\n    }\n\n    getCurrentEditor = () => {\n        return this.editorGroup.current.getCurrentEditor()\n    }\n\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    tableAndDash = () => {\n        if (this.state.displayEditor !== \"notebook\") {\n            return <div>\n                <Resizable defaultSize={{height: \"300px\"}} onResize={() => {\n                    this.messageBox.current.editor.resize();\n                }}>\n                    <AceEditor\n                        height={\"100%\"}\n                        width={\"100%\"}\n                        ref={this.messageBox}\n                        mode=\"text\"\n                        theme=\"github\"\n                        name=\"message_box\"\n                    />\n                </Resizable>\n\n                <div>\n                    <MLSQLDash ref={this.dash} parent={this}/>\n                </div>\n                <div className=\"mlsql-query-display\">\n                    <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n            </div>\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <div style={{marginBottom: \"10px\"}}>\n                        <MLSQLETQuick ref={this.etRef} parent={this}/>\n                    </div>\n                    <TabEditor ref={this.editorGroup} parent={this}/>\n                    {this.tableAndDash()}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_TEAM = \"team\"\nexport const VIEW_DEMO = \"demo\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n\n\nexport const TEAM_VIEW_BASIC = \"team_view_basic\"\nexport const SETUP_VIEW_BASIC = \"setup_view_basic\"\nexport const CLUSTER_VIEW_BASIC = \"cluster_view_basic\"\nexport const AUTH_VIEW_BASIC = \"auth_view_basic\"\nexport const SETTING_VIEW_BASIC = \"setting_view_basic\"\n","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"300px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[0], -1)\n            } catch (e) {\n\n            }\n\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=200 where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`...xml..file...path\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Icon, Input, Button, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHECK_TEAM_NAME, CREATE_TEAM} from \"../../service/BackendConfig\";\n\n\nclass CreateTeamForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.teamCards = props.parent\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CREATE_TEAM)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create team success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create team fail\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create team fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    teamNameCheck = (rule, value, callback) => {\n        if (value) {\n            const api = new MLSQLAPI(CHECK_TEAM_NAME)\n            api.request2({name: value}, (resJson) => {\n                if (!resJson[\"msg\"]) {\n                    callback(`${value} have been taken. Try another`);\n                }\n                else callback()\n            }, (failStr) => {\n                callback('server error:' + failStr);\n            })\n        } else {\n            callback()\n        }\n\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the team name!'},\n                            {validator: this.teamNameCheck}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>} placeholder=\"Team name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLCreateTeamForm = Form.create({name: 'create_team'})(CreateTeamForm);","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {\n    LIST_ROLES_MEMBER,\n    LIST_ROLES_TABLE,\n    LIST_TEAMS_MEMBER,\n    LIST_TEAMS_ROLE, LIST_TEAMS_TABLES, REMOVE_ROLES_MEMBER, REMOVE_ROLES_TABLE,\n    REMOVE_TEAMS_MEMBER,\n    REMOVE_TEAMS_ROLE, REMOVE_TEAMS_TABLE, RUN_SCRIPT\n} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchTeams(apiUrl, self, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByTeam(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_MEMBER)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchRoles(parent, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_ROLE)\n        api.request2({teamName: teamName}, resJson => {\n            parent.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTablesByRole(parent, teamName, roleName, stateKey) {\n        const api = new MLSQLAPI(LIST_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleMember(parent, teamName, roleName, userName, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName, userName: userName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByRole(parent, teamName, roleName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRole(parent, teamName, roleName) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_ROLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTeamMember(parent, teamName, userName, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_MEMBER)\n        api.request2({teamName: teamName, userName: userName}, resJson => {\n            callback()\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static teamInvite(self, apiUrl, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTables(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_TEAMS_TABLES)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTable(self, teamName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_TABLE)\n        api.request2({teamName: teamName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTableTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/tableTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchSourceTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/sourceTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchOperateTypes(self, stateKey) {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/operateTypes\\` as output;`, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleTable(self, teamName, roleName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ACCEPT_TEAMS_MEMBER,\n    LIST_TEAMS,\n    LIST_TEAMS_INVITED,\n    LIST_TEAMS_MEMBER,\n    REFUSE_TEAMS_MEMBER\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nexport class Teams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n\n    accept = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, ACCEPT_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n            this.teamCards.teamYourJoinRef.current.refresh()\n        })\n    }\n\n    refuse = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, REFUSE_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n        })\n    }\n\n    refresh = () => {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n    renderCommand = (value) => {\n        this.teamName = value\n        if (this.apiUrl === LIST_TEAMS_INVITED) {\n            return [<a onClick={this.accept}>accept</a>, <a onClick={this.refuse}>refuse</a>]\n        }\n        return []\n    }\n\n\n    render() {\n        return (\n            <div>\n                <List\n                    dataSource={this.state.data}\n                    renderItem={item => (\n                        <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                            <List.Item.Meta\n                                title={<a href=\"#\">{item.name}</a>}\n                            />\n                        </List.Item>\n                    )}\n                >\n                </List>\n            </div>\n        );\n    }\n}\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass InviteMember extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_MEMBER)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.setState({refresh: true})\n                        message.success(\"Invite success\", 3)\n                    } else {\n                        message.warning(\"Invite fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    self.teamCards.setState({refresh: true})\n                    message.error(\"Invite fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userNames', {\n                        rules: [\n                            {required: true, message: 'Please input the user name you want invite'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLInviteMember = Form.create({name: 'create_team'})(InviteMember);","import {Select} from \"antd\";\nimport * as React from \"react\";\nimport TeamService from \"./Service\";\n\nexport class Views {\n    static renderTeamsForSelect = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static onTeamSelect = (self, teamName) => {\n        self.currentTeamName = teamName\n        TeamService.fetchRoles(self, teamName, \"roles\")\n    }\n\n\n    static renderTeams = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    static renderRoles = (self) => {\n        return self.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderMembers = (self) => {\n        return self.state.members.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderBackends = (self) => {\n        return self.state.backends.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n    s\n    static teamSelect = (self, onChangeCallback) => {\n        return <Select\n            placeholder=\"Team name\"\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderTeams(self)}\n        </Select>\n    }\n\n    static roleSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"role name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderRoles(self)}\n        </Select>\n    }\n\n    static backendSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"backend name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderBackends(self)}\n        </Select>\n    }\n\n    static memberSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"member name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderMembers(self)}\n        </Select>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS_MEMBER} from \"../../service/BackendConfig\";\n\n\nexport class TeamMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchMembersByTeam(this, member, \"members\")\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            Service.removeTeamMember(self, self.currentTeam, userName, () => {\n                Service.fetchMembersByTeam(self, self.currentTeam, \"members\")\n            })\n        }\n        }>remove</a>]\n\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderMembers()}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass AddRoleForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleNames', {\n                        rules: [\n                            {required: true, message: 'Please input the role name you want to create'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"role\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddRoleForTeam = Form.create({name: 'add_role_for_team'})(AddRoleForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamRoles extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    refresh = () => {\n        if(this.currentTeam){\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n    }\n\n    renderCommand = (roleName) => {\n        return [<a onClick={() => {\n            Service.removeRole(this, this.currentTeam, roleName)\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.roles}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_MEMBER,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\n\n\nclass AddMemberForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_MEMBER)\n                api.request2(params, (resJson) => {\n                    console.log(resJson)\n                    console.log(\"----\")\n                    if (resJson[\"msg\"] === \"success\") {\n                        if (self.teamCards.roleMembersRef) {\n                            self.teamCards.roleMembersRef.current.refresh()\n                        }\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Views.onTeamSelect(this, teamName)\n        Service.fetchMembersByTeam(this, teamName, \"members\")\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            self.onTeamSelect(teamName)\n                        })\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name'}\n                        ],\n                    })(\n                        Views.roleSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userName', {\n                        rules: [\n                            {required: true, message: 'Please input the member name'}\n                        ],\n                    })(\n                        Views.memberSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddMemberForRole = Form.create({name: 'add_member_for_role'})(AddMemberForRole);","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, ADD_TEAMS_TABLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            tableTypes: [],\n            sourceTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n        Service.fetchTableTypes(this, \"tableTypes\")\n        Service.fetchSourceTypes(this, \"sourceTypes\")\n\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTableTypes = () => {\n        return this.state.tableTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n    renderSourceTypes = () => {\n        return this.state.sourceTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the table name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"table name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('db', {\n                        rules: [],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"db name\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('tableType', {\n                        rules: [\n                            {required: true, message: 'Please input the table type you want to create'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"table Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTableTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('sourceType', {\n                        rules: [],\n                    })(\n                        <Select\n                            placeholder=\"source Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderSourceTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForTeam = Form.create({name: 'add_table_for_team'})(AddTableForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchTables(this, member, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam) {\n            Service.fetchTables(this, this.currentTeam, \"tables\")\n        }\n    }\n\n    renderCommand = (tableId) => {\n        return [<a onClick={(evt) => {\n            evt.preventDefault()\n            Service.removeTable(this, this.currentTeam, tableId, null, () => {\n                Service.fetchTables(this, this.currentTeam, \"tables\")\n            })\n\n        }\n        }>remove</a>]\n    }\n\n    renderDB = (item) => {\n        if (item.db !== \"undefined\" && item.db) {\n            return item.db\n        } else return \"default\"\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={`${item.tableType}:${this.renderDB(item)}:${item.name}`}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    onRoleSelect = (roleName) => {\n        this.currentRoleName = roleName\n        Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n    }\n\n    refresh = () => {\n        if (this.currentTeamName && this.currentRoleName) {\n            Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n        }\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeamName && this.currentRoleName) {\n                Service.removeRoleMember(this, this.currentTeamName, this.currentRoleName, userName, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={item.name}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })}\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.roleSelect(self, self.onRoleSelect, \"default\")}\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderMembers()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {MLSQLCreateTeamForm} from \"./CreateTeam\";\nimport {Teams} from \"./Teams\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS, LIST_TEAMS_INVITED, LIST_TEAMS_JOINED} from \"../../service/BackendConfig\";\nimport {InviteMember, MLSQLInviteMember} from \"./InviteMember\";\nimport {TeamMembers} from \"./TeamMembers\";\nimport {MLSQLAddRoleForTeam} from \"./AddRoleForTeam\";\nimport {TeamRoles} from \"./TeamRoles\";\n\nimport {MLSQLAddMemberForRole} from \"./AddMemberForRole\";\nimport {RoleMembers} from \"./RoleMembers\";\n\n\nexport class TeamCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n        this.teamRolesRef = React.createRef()\n        this.teamMembersRef = React.createRef()\n        this.teamsRef = React.createRef()\n        this.roleTablesRef = React.createRef()\n        this.roleMembersRef = React.createRef()\n        this.teamYourJoinRef = React.createRef()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"Team belongs to you\" bordered={false}><Teams parent={this} ref={this.teamsRef}\n                                                                              apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Create new team\" bordered={false}>\n                        <MLSQLCreateTeamForm parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Team\" bordered={false}><TeamMembers ref={this.teamMembersRef}\n                                                                                     parent={this} apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Invite members\" bordered={false}>\n                        <MLSQLInviteMember parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Team you join\" bordered={false}><Teams parent={this} ref={this.teamYourJoinRef}\n                                                                        apiUrl={LIST_TEAMS_JOINED}/></Card>\n                </Col>\n\n                <Col span={12}>\n                    <Card title=\"Team inviting you\" bordered={false}><Teams parent={this} apiUrl={LIST_TEAMS_INVITED}/></Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n\n                <Col span={16}>\n                    <Card title=\"View Roles By Team\" bordered={false}><TeamRoles ref={this.teamRolesRef}\n                                                                                 parent={this} apiUrl={ADD_TEAMS_ROLE}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Add role to Team\" bordered={false}>\n                        <MLSQLAddRoleForTeam parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Role\" bordered={false}>\n                        <RoleMembers parent={this} ref={this.roleMembersRef}/>\n                    </Card>\n                </Col>\n\n\n                <Col span={8}>\n                    <Card title=\"Add Member to Role\" bordered={false}>\n                        <MLSQLAddMemberForRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {CLUSTER_MANAGER, LIST_BACKENDS_BY_TEAM} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchBackends(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/list\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static checkBackendName(self, name, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: name}, {action: \"/backend/name/check\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendsByNames(self, names, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({names: names}, {action: \"/backend/list/names\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendNamesByTeam(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_BACKENDS_BY_TEAM)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static addBackend(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/add\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeBackend(self, backendName, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: backendName}, {action: \"/backend/remove\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static updateBackendTags(self, backendName, tags, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({tags: tags, name: backendName}, {\n            action: \"/backend/tags/update\",\n            merge: \"append\"\n        })\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport Service from \"./remote/Service\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {Views as TeamViews} from \"../team/remote/Views\"\nimport TeamService from \"../team/remote/Service\"\nimport CluserService from \"./remote/Service\"\nimport {Row, Col, Button} from \"antd\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\nexport class ClusterBackends extends React.Component {\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.dataViewer = React.createRef()\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    renderBackends = () => {\n        return <MLSQLQueryDisplay ref={this.dataViewer} parent={this}/>\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        const tag = self.currentTeamName + \"_\" + roleName\n        Service.fetchBackends(this, {\n            tag: tag\n        }, \"backends\", () => {\n            self.dataViewer.current.update(self.state.backends.map(item => {\n                const {ecsResourcePoolId, id, tags, ...newitem} = item;\n                newitem[\"command\"] = <Button onClick={(evt) => {\n                    CluserService.removeBackend(self, newitem.name, null, () => {\n                        self.onRoleSelect(roleName)\n                    })\n                }}>remove</Button>\n                return newitem\n            }), {})\n        })\n    }\n\n    render() {\n        const self = this\n        return <div>\n            <Row>\n                <Col>\n                    {TeamViews.teamSelect(self, (teamName) => {\n                        TeamViews.onTeamSelect(self, teamName)\n                    })}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {TeamViews.roleSelect(self, self.onRoleSelect)}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {this.renderBackends()}\n                </Col>\n            </Row>\n        </div>\n\n    }\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddClusterBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, name, url} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n                ClusterService.addBackend(self, {\n                    name: name,\n                    url: url,\n                    tag: tag,\n                    teamName: teamName\n                }, null, () => {\n                    message.success(\"Add backend success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    checkBackendName = (rule, value, callback) => {\n        ClusterService.checkBackendName(this, value, null, (resJson) => {\n            if (resJson[\"msg\"]) {\n                callback(\"Name have been taken. Try another.\")\n            } else {\n                callback()\n            }\n        })\n\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the backend name'},\n                            {validator: this.checkBackendName},\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"backend name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('url', {\n                        rules: [\n                            {required: true, message: 'Please input the url name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddClusterBackend = Form.create({name: 'add_backend_for_cluster'})(AddClusterBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddTagToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const self = this\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n        ClusterService.fetchBackends(this, \"backends\", () => {\n            const tagsWithDuplicate = self.state.backends.map(item => {\n                return item.tags\n            }).reduce((items, item) => {\n                items.push(...item)\n                return items\n            }, [])\n            const tags = new Set(tagsWithDuplicate)\n            self.setState({tags: [...tags]})\n        })\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTagToRole = Form.create({name: 'add_tag_to_role'})(AddTagToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureDefaultBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"] === params.tag) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            }else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureDefaultBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass AddExistClusterBackendToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, backendName} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n\n                ClusterService.updateBackendTags(self, backendName, tag, null, () => {\n                    message.success(\"Update backend tags success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(this, (teamName) => {\n                            ClusterService.fetchBackendNamesByTeam(this, teamName, null, (backendNames) => {\n                                ClusterService.fetchBackendsByNames(this, backendNames.map(item => {\n                                    return item.name\n                                }).join(\",\"), \"backends\", () => {\n                                    console.log(this.state.backends)\n                                })\n                            })\n                            Views.onTeamSelect(this, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(this, (roleName) => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('backendName', {\n                        rules: [{required: true, message: 'Please input the backend name'}],\n                    })(\n                        Views.backendSelect(this, (backend) => {\n\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Confirm\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddExistClusterBackendToRole = Form.create({name: 'AddExistClusterBackendToRole'})(AddExistClusterBackendToRole);","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {ClusterBackends} from \"./ClusterBackends\";\nimport {MLSQLAddClusterBackend} from \"./AddClusterBackend\";\nimport {MLSQLAddTagToRole} from \"./AddTagToRole\";\nimport {MLSQLConfigureDefaultBackend} from \"./ConfigureDefaultBackend\";\nimport {MLSQLAddExistClusterBackendToRole} from \"./AddExistClusterBackendToRole\";\n\n\nexport class ClusterCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.backendsRef = React.createRef()\n        this.state = {}\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Set your default backend tag\" bordered={false}>\n                        <MLSQLConfigureDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add Backend\" bordered={false}>\n                        <MLSQLAddClusterBackend parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Your Backends\" bordered={false}>\n                        <ClusterBackends parent={this} ref={this.backendsRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Add role to backend\" bordered={false}>\n                        <MLSQLAddExistClusterBackendToRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    onRoleSelect = (roleName) => {\n        this.currentRole = roleName\n        Service.fetchTablesByRole(this, this.currentTeam, roleName, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam && this.currentRole) {\n            Service.fetchTablesByRole(this, this.currentTeam, this.currentRole, \"tables\")\n        }\n    }\n\n    renderCommand = (tableNameId) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeam && this.currentRole) {\n                Service.removeRoleTable(this, this.currentTeam, this.currentRole, tableNameId, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={item.tableType + \":\" + this.sourceType(item.sourceType, item.tableType) + \":\" + item.name + \":\" + item.operateType}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.selectTeam}\n                        >\n                            {Views.renderTeamsForSelect(this)}\n                        </Select>\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onRoleSelect}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderTables()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_TABLE,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.authCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tables: [],\n            operateTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.authCards.roleTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Service.fetchRoles(this, teamName, \"roles\")\n        Service.fetchTables(this, teamName, \"tables\")\n        Service.fetchOperateTypes(this, \"operateTypes\")\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return this.state.tables.map(item => {\n            return <Select.Option key={item.name}\n                                  value={item.id}>{item.tableType}:{this.sourceType(item.sourceType, item.tableType)}:{item.db}.{item.name}</Select.Option>\n        })\n    }\n\n    renderOperateTypes = () => {\n        return this.state.operateTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name '}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tableName', {\n                        rules: [\n                            {required: true, message: 'Please input the tableName name '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"table name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTables()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('operateType', {\n                        rules: [\n                            {required: true, message: 'Please input the operateType to Role '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Operate type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderOperateTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForRole = Form.create({name: 'add_table_for_role'})(AddTableForRole);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLAddTableForTeam} from \"../team/AddTableForTeam\";\n\nimport {RoleTables} from \"../team/RoleTables\";\nimport {MLSQLAddTableForRole} from \"../team/AddTableForRole\";\n\n\nexport class AuthCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Add Table to Team\" bordered={false}>\n                        <MLSQLAddTableForTeam parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add table to role\" bordered={false}>\n                        <MLSQLAddTableForRole parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"View tables By Role\" bordered={false}>\n                        <RoleTables parent={this} ref={this.roleTablesRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List, notification, Card, Col, Row} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLCreateTeamForm} from \"../team/CreateTeam\";\nimport {MLSQLAddRoleForTeam} from \"../team/AddRoleForTeam\";\nimport {MLSQLAddMemberForRole} from \"../team/AddMemberForRole\";\nimport {MLSQLAddClusterBackend} from \"../cluster/AddClusterBackend\";\nimport {MLSQLConfigureDefaultBackend} from \"../cluster/ConfigureDefaultBackend\";\nimport {RoleMembers} from \"../team/RoleMembers\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class Setup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.steps = this.generateSteps()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    generateSteps() {\n        const self = this\n        return [{\n            title: 'Create Team',\n            content: () => {\n                return <Card title={\"input your team name\"} bordered={true}>\n                    <MLSQLCreateTeamForm parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Create Role',\n            content: () => {\n                return <Card title={\"Add new role to the team you have created\"} bordered={true}>\n                    <MLSQLAddRoleForTeam parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Invite user to Role',\n            content: () => {\n                return <Card title={\"Add member to the role you have created\"} bordered={true}>\n                    <MLSQLAddMemberForRole parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Create Backend',\n            content: () => {\n                return <Card title={\"Add the cluster information you have setup\"} bordered={true}>\n                    <MLSQLAddClusterBackend parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Set default backend',\n            content: () => {\n                return <Card title={\"Configure the default backend you want use\"} bordered={true}>\n                    <MLSQLConfigureDefaultBackend parent={self}/>\n                </Card>\n            }\n        },\n            {\n                title: 'Congratulation!',\n                content: () => {\n                    return <Card title={\"All Done\"} bordered={true}>\n                        Please go to Console\n                    </Card>\n                }\n            }\n        ];\n    }\n\n    componentDidMount() {\n\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\" style={{\"margin-top\": \"30px\"}}>\n                    <Row gutter={24}>\n                        <Col span={8}>\n\n\n                        </Col>\n                        <Col span={8}>\n                            {this.steps[current].content()}\n\n                        </Col>\n                    </Row>\n\n                </div>\n\n            </div>\n        );\n    }\n\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHNAGE_PASSWORD} from \"../../service/BackendConfig\";\n\nclass ChangePassword extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CHNAGE_PASSWORD)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Success\", 3)\n                    } else {\n                        message.warning(\"Fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {required: true, message: 'Please input the original password'}\n                        ],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"old password\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('newPassword', {\n                        rules: [{required: true, message: 'Please input the new password'}],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"new password\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Apply\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLChangePassword = Form.create({name: 'change_password'})(ChangePassword);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLChangePassword} from \"../team/MLSQLChangePassword\";\n\nexport class SettingCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Change password\" bordered={false}>\n                        <MLSQLChangePassword parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {\n    AUTH_VIEW_BASIC,\n    CLUSTER_VIEW_BASIC,\n    SETTING_VIEW_BASIC,\n    SETUP_VIEW_BASIC,\n    TEAM_VIEW_BASIC\n} from \"../../common/ViewConst\";\nimport {TeamCards} from \"./TeamCards\";\nimport {ClusterCards} from \"../cluster/ClusterCards\";\nimport {AuthCards} from \"../auth/AuthCards\";\nimport Setup from \"../demo/Setup\";\nimport {SettingCards} from \"./SettingCards\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.app = props.parent\n        this.state = {\n            currentView: SETUP_VIEW_BASIC\n        }\n\n\n    }\n\n    switchToBasic = () => {\n        this.setState({currentView: TEAM_VIEW_BASIC})\n    }\n\n    switchToSetup = () => {\n        this.setState({currentView: SETUP_VIEW_BASIC})\n    }\n\n    switchToCluster = () => {\n        this.setState({currentView: CLUSTER_VIEW_BASIC})\n    }\n\n    switchToAuth = () => {\n        this.setState({currentView: AUTH_VIEW_BASIC})\n    }\n\n    switchToSetting = () => {\n        this.setState({currentView: SETTING_VIEW_BASIC})\n    }\n\n    renderView = () => {\n        if (this.state.currentView === SETUP_VIEW_BASIC) return <Setup/>\n        if (this.state.currentView === TEAM_VIEW_BASIC) return <TeamCards/>\n        if (this.state.currentView === CLUSTER_VIEW_BASIC) return <ClusterCards/>\n        if (this.state.currentView === AUTH_VIEW_BASIC) return <AuthCards/>\n        if (this.state.currentView === SETTING_VIEW_BASIC) return <SettingCards/>\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToSetup}>Setup</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBasic}>Team</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToCluster}>Cluster</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block onClick={this.switchToAuth}>Auth</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block onClick={this.switchToSetting}>Setting</Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./team/MainPage\";\nimport {TEAM_VIEW_BASIC} from \"../common/ViewConst\";\n\nexport class MLSQLManagerApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage parent={this}/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"../common/ViewConst\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\nimport {MLSQLManagerApp} from \"../components/MLSQLManagerApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n\n    }\n\n    componentDidMount() {\n        const self = this\n        this.auth.userName((name) => {\n            self.setState({userName: name})\n        })\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.auth.isLogin() && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_TEAM) return <MLSQLManagerApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n        const self = this\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            }, () => self.app.updateLoginoutStatus())\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToTeam = () => {\n        this.setState({currentView: VIEW_TEAM})\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Team\" onClick={this.switchToTeam}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\"\n                             href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\"><img\n                        src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}