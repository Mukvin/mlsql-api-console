{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/et/ButtonToCommand.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/query/MLSQLDash.js","components/editor/TabEditor.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","components/team/CreateTeam.js","components/team/remote/Service.js","components/team/Teams.js","components/team/InviteMember.js","components/team/remote/Views.js","components/team/TeamMembers.js","components/team/AddRoleForTeam.js","components/team/TeamRoles.js","components/team/AddMemberForRole.js","components/team/AddTableForTeam.js","components/team/TeamTables.js","components/team/RoleMembers.js","components/team/TeamCards.js","components/cluster/remote/Service.js","components/cluster/ClusterBackends.js","components/cluster/AddClusterBackend.js","components/cluster/AddTagToRole.js","components/cluster/ConfigureDefaultBackend.js","components/cluster/AddExistClusterBackendToRole.js","components/cluster/ClusterCards.js","components/team/RoleTables.js","components/team/AddTableForRole.js","components/auth/AuthCards.js","components/demo/Setup.js","components/team/MainPage.js","components/MLSQLManagerApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","console","log","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","res","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","skipAuth","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","text","get","catch","USER_TAGS_UPDATE","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","FILE_UPLOAD","CREATE_TEAM","CHECK_TEAM_NAME","LIST_TEAMS","LIST_TEAMS_INVITED","ADD_TEAMS_MEMBER","ACCEPT_TEAMS_MEMBER","REFUSE_TEAMS_MEMBER","ADD_TEAMS_ROLE","ADD_TEAMS_TABLE","ADD_ROLES_TABLE","ADD_ROLES_MEMBER","MLSQLAuth","apiResponse","removeItem","error","m","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","assert","condition","message","Error","ButtonToCommand","makeSQL","Option","Select","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","api","BackendConfig","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","executeQuery","enterLoading","getDisplay","update","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","commandGroup","runScript","queryApp","setData","appendLog","stringify","failRes","selectionRange","getSelectionRange","session","getTextRange","appendToEditor","p","getCursorPosition","insert","focus","msg","row","getLength","column","getDashBoard","dash","display","loading","logProgress","LogProgress","enter","exit","etOver","evt","et","etRef","eventName","getData","popName","processType","pathAlias","tableHidden","pathHidden","outputTableHidden","outputTableAlias","tableAlias","etPop","parent","React","resourceProgressRef","taskProgressRef","parentCallback","newValue","react","className","onDragOver","preventDefault","onDrop","lib_default","a","ref","mode","theme","width","height","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_ResourceProgress","MLSQLAceEditor_TaskProgress","CommandGroup","_this2","es_button","onClick","es_select","style","msgBox","_this3","mark","offset","setTimeout","intervalTimer","setInterval","concat","jsonArray","length","clearInterval","ResourceProgress","_this4","resourceCompute","hasOwnProperty","percent","activeTasks","totalCores","successPercent","currentJobGroupActiveTasks","title","progress","TaskProgress","_this5","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","forEach","item","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","isDir","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isExpanded","toggleIsExpanded","scriptFile","openExistsOrNewEditor","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","fileName","target","finish","create","endsWith","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","confirmDelete","confirmAlert","removeFile","closeOnEscape","closeOnClickOutside","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","createFolder","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","data","config","render","isPrototypeOf","type","substring","keys","basket","rows","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","Modal_default","visible","onCancel","onOk","cancelText","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","post","file","attach","end","map","f","react_default","createElement","size","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","objectSpread","Component","randomColor","generateColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","dataType","prev","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","margin","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender","dataForRender2","jsonItem","moment","utc","timestamp","format","inputRowsPerSecond","processedRowsPerSecond","numInputRows","titleMap","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","action","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","span","Charts","hasLegend","subTitle","pre","now","valueFormat","val","split","isResource","Panel","Collapse","TabPane","Tabs","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","collapse","header","tabs","defaultActiveKey","tab","UploadDropZone_UploadDropzone","PureComponent","TabEditor","pushRef","myRefs","getCurrentEditor","activeKey","currentItem","onEdit","targetKey","addFull","tabName","panes","newTabIndex","src_components_MLSQLAceEditor","add","getPaneIndexByActiveKey","lastIndex","pane","remove","filter","editorRefList","closeEditor","TabEditor_TabPane","closable","InputGroup","Input","Group","ETLoadParams","etPopLoad","compact","ETPopLoad","getAttribute","sourceType","sourceTypeV","es_row","param","es_col","input","marginBottom","addonBefore","description","loadParamsRef","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","etpop","datasourcesRender","ETPopLoad_Option","ETPopLoad_InputGroup","showSearch","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","ETLoadParams_ETLoadParams","TextArea","ETPopAlgorithm","renderParam","temp","ETPopAlgorithm_InputGroup","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","ETBaseTool_InputGroup","showOutputTableName","pathNameForRender","showPathName","asStr","ETPopTool","_ETBaseTool","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataTypeV","udfType","udfTypeV","code","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","href","appendChild","click","removeChild","ETStreamProgress","jobType","ETStreamProgress_Option","ETPop","disableEtModalVisible","etModalVisible","enableEtModalVisible","popChild","renderContent","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","okText","MLSQLETQuick","itemData","onDragStart","renderPop","ETPop_ETPop","etDoubleClick","padding","MLSQLETQuick_Panel","gutter","card","tag_default","tyle","help","draggable","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","MLSQLQueryApp","script","fileToEditorMap","editorRef","editorGroup","tempFileToEditorMap","refresh","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","MLSQLETQuick_MLSQLETQuick","TabEditor_TabEditor","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","VIEW_CONSOLE","VIEW_TEAM","VIEW_DEMO","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","TEAM_VIEW_BASIC","SETUP_VIEW_BASIC","CLUSTER_VIEW_BASIC","AUTH_VIEW_BASIC","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","Item","generateView","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","renderView","currentView","BigDL_BigDL","NLP_NLP","Basic_Basic","Header","Layout","Content","Footer","Sider","MainPage","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","layout","minHeight","es_menu","defaultSelectedKeys","block","Demos_Demos","textAlign","MLSQLDemoApp","MainPage_MainPage","CreateTeamForm","handleSubmit","form","validateFields","resJson","teamCards","teamsRef","warning","failStr","teamNameCheck","rule","getFieldDecorator","es_form","onSubmit","rules","required","validator","prefix","es_icon","htmlType","MLSQLCreateTeamForm","Form","Service","apiUrl","stateKey","defineProperty","MESSAGE_TIMEOUT","teamName","roleName","tableId","Teams","accept","teamInvite","fetchTeams","teamYourJoinRef","refuse","renderCommand","actions","Meta","InviteMember","renderTeams","teams","MLSQLInviteMember","Views","renderTeamsForSelect","onTeamSelect","currentTeamName","TeamService","fetchRoles","renderRoles","roles","renderMembers","members","renderBackends","backends","teamSelect","onChangeCallback","roleSelect","backendSelect","memberSelect","TeamMembers","selectTeam","member","currentTeam","fetchMembersByTeam","removeTeamMember","AddRoleForTeam","MLSQLAddRoleForTeam","TeamRoles","removeRole","AddMemberForRole","roleMembersRef","MLSQLAddMemberForRole","AddTableForTeam","renderTableTypes","tableTypes","renderSourceTypes","sourceTypes","fetchTableTypes","fetchSourceTypes","MLSQLAddTableForTeam","RoleMembers","onRoleSelect","currentRoleName","fetchMembersByRole","removeRoleMember","TeamCards","openNotificationWithIcon","notification","teamRolesRef","teamMembersRef","roleTablesRef","Teams_Teams","TeamMembers_TeamMembers","TeamRoles_TeamRoles","RoleMembers_RoleMembers","newParams","names","backendName","merge","ClusterBackends","dataViewer","tag","fetchBackends","ecsResourcePoolId","newitem","objectWithoutProperties","CluserService","removeBackend","TeamViews","AddClusterBackend","acc","ClusterService","addBackend","checkBackendName","MLSQLAddClusterBackend","AddTagToRole","renderTags","tagsWithDuplicate","items","Set","ConfigureDefaultBackend","MLSQLConfigureDefaultBackend","AddExistClusterBackendToRole","updateBackendTags","fetchBackendNamesByTeam","backendNames","fetchBackendsByNames","backend","MLSQLAddExistClusterBackendToRole","ClusterCards","backendsRef","ClusterBackends_ClusterBackends","RoleTables","currentRole","fetchTablesByRole","tableNameId","removeRoleTable","defaultValue","renderTables","tables","tableType","operateType","AddTableForRole","authCards","fetchTables","fetchOperateTypes","db","renderOperateTypes","operateTypes","MLSQLAddTableForRole","AuthCards","RoleTables_RoleTables","Setup","Setup_Step","margin-top","switchToSetup","switchToCluster","switchToAuth","Setup_Setup","TeamCards_TeamCards","ClusterCards_ClusterCards","AuthCards_AuthCards","app","MainPage_Sider","MainPage_Header","MainPage_Content","MainPage_Footer","MLSQLManagerApp","team_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","MLSQLDemoApp_MLSQLDemoApp","MLSQLManagerApp_MLSQLManagerApp","validateUserName","validatePassword","isEmail","test","normal","inject","App","menuRef","switchToTeam","switchToConsole","switchToDemo","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a113c386.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                console.log(e)\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    let res = str\n                    try {\n                        res = JSON.parse(str)[\"msg\"]\n                    } catch (e) {\n\n                    }\n                    serverErrorCallback(res)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                serverErrorCallback(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            let res = str\n                            try {\n                                res = JSON.parse(str)[\"msg\"]\n                            } catch (e) {\n\n                            }\n                            serverErrorCallback(\"backend status:\" + ok.status + \"\\n\" + res)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        let res = str\n                        try {\n                            res = JSON.parse(str)[\"msg\"]\n                        } catch (e) {\n\n                        }\n                        serverErrorCallback(res)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n\nexport const CREATE_TEAM = BACKEND_SERVER + \"/api_v1/team/create\";\nexport const CHECK_TEAM_NAME = BACKEND_SERVER + \"/api_v1/team/name/check\";\nexport const LIST_TEAMS = BACKEND_SERVER + \"/api_v1/team\";\n\nexport const LIST_TEAMS_JOINED = BACKEND_SERVER + \"/api_v1/team/joined\";\nexport const LIST_TEAMS_INVITED = BACKEND_SERVER + \"/api_v1/team/invited\";\n\nexport const LIST_TEAMS_IN = BACKEND_SERVER + \"/api_v1/team/in\";\n\n\nexport const ADD_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/add\";\nexport const REMOVE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/remove\";\nexport const LIST_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/members\";\n\nexport const ACCEPT_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/accept\";\nexport const REFUSE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/refuse\";\n\nexport const ADD_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/add\";\nexport const REMOVE_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/remove\";\nexport const LIST_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/roles\";\n\nexport const ADD_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/add\";\nexport const REMOVE_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/remove\";\nexport const LIST_TEAMS_TABLES = BACKEND_SERVER + \"/api_v1/team/tables\";\n\n\nexport const ADD_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/add\";\nexport const REMOVE_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/remove\";\nexport const LIST_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/tables\";\n\nexport const ADD_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/add\";\nexport const REMOVE_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/remove\";\nexport const LIST_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/members\";\n\nexport const LIST_BACKENDS_BY_TEAM = BACKEND_SERVER + \"/api_v1/backends\";","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\nimport {Select} from 'antd';\n\nconst {Option} = Select;\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId}, () => {\n            this.aceEditorRef.current.editor.setValue(value, 1)\n        })\n\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            messageBox.setValue(\"saved\")\n        }, (fail) => {\n        })\n\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n        self.getDisplay().update(JSON.parse(\"[]\"))\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        const timeout = this.commandGroup.current.state.timeout\n\n        api.runScript({\n            jobName: jobName,\n            background: (this.state.background || false),\n            timeout: timeout\n        }, finalSQL, (wow) => {\n            try {\n                self.queryApp.setData(wow)\n                self.getDisplay().update(wow)\n                self.appendLog(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.appendLog(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow, null, 2))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            self.exitLoading()\n            let failRes = fail.toString()\n            try {\n                failRes = JSON.parse(failRes)[\"msg\"]\n            } catch (e) {\n            }\n            self.appendLog(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    appendLog = (msg) => {\n        const editor = this.getMessageBoxAceEditor()\n        const session = editor.session\n        session.insert({\n            row: session.getLength(),\n            column: 0\n        }, \"\\n\" + msg)\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        //this.resourceProgressRef.current.enter({jobName: jobName})\n        //this.taskProgressRef.current.enter({jobName: jobName})\n        this.logProgress = new LogProgress(this)\n        this.logProgress.enter()\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        //this.resourceProgressRef.current.exit()\n        //this.taskProgressRef.current.exit()\n        if (this.logProgress) {\n            this.logProgress.exit()\n        }\n    }\n    etOver = (evt) => {\n        const et = this.queryApp.etRef.current\n        const eventName = et.getData(\"eventName\")\n        const popName = et.getData(\"popName\")\n        const processType = et.getData(\"processType\")\n        const pathAlias = et.getData(\"pathAlias\")\n        const tableHidden = et.getData(\"tableHidden\")\n        const pathHidden = et.getData(\"pathHidden\")\n        const outputTableHidden = et.getData(\"outputTableHidden\")\n        const outputTableAlias = et.getData(\"outputTableAlias\")\n        const tableAlias = et.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            et.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}><AceEditor\n                    ref={this.aceEditorRef}\n                    mode=\"sql\"\n                    theme=\"github\"\n                    width={\"100%\"}\n                    height={\"500px\"}\n                    onChange={this.onChange}\n                    name=\"mlsql_editor\"\n                    fontSize={16}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value=\"\"\n                    editorProps={{\n                        $blockScrolling: Infinity\n                    }}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                    }}\n                /></div>\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, timeout: \"-1\"}\n        this.parent = props.parent\n    }\n\n    onChange = (value) => {\n        this.setState({timeout: value})\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n                Job Timeout:<Select\n                onChange={this.onChange}\n                style={{width: \"120px\"}}\n            >\n                <Option value=\"10000\">10s</Option>\n                <Option value=\"30000\">30s</Option>\n                <Option value=\"60000\">60s</Option>\n                <Option value=\"1800000\">30m</Option>\n                <Option value=\"7200000\">2h</Option>\n                <Option value=\"28800000\">8h</Option>\n                <Option value=\"-1\">unlimited</Option>\n            </Select>\n            </div>\n        )\n    }\n\n}\n\nclass LogProgress {\n    constructor(msgBox) {\n        this.msgBox = msgBox\n        this.logProgress = \"loaded\"\n    }\n\n    enter = (params) => {\n        const self = this\n        this.mark = true\n        this.offset = -1\n        setTimeout(() => {\n            if (self.mark) {\n                self.loading = true\n                self.intervalTimer = setInterval(() => {\n                        if (self.logProgress === \"loading\") {\n                            return\n                        }\n                        self.logProgress = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n\n                        api.runScript({}, `load _mlsql_.\\`log/${self.offset}\\` where filePath=\"/tmp/__mlsql__/logs/mlsql_engine.log\" as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            if (jsonObj['value'].length > 0) {\n                                this.msgBox.appendLog(jsonObj['value'].join(\"\\n\"))\n                            }\n                            self.offset = jsonObj[\"offset\"]\n                            self.logProgress = \"loaded\"\n                        }, (str) => {\n                            self.logProgress = \"loaded\"\n                            try {\n                                this.msgBox.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n\n                        })\n\n                    }\n\n                    , 2000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        // we should wait some seconds since the log sometimes may delayed.\n        const self = this\n        setTimeout(() => {\n            self.loading = false\n            self.mark = false\n            if (self.intervalTimer) {\n                clearInterval(self.intervalTimer);\n            }\n        }, 5000)\n\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    self.setState({\n                                        percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                        successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                        title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        30000\n                    )\n                }\n\n            }\n\n            ,\n            3000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if (self.taskCompute === \"loading\") {\n                            return\n                        }\n                        self.taskCompute = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute = \"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute = \"loaded\"\n                            try {\n                                self.parent.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 30000)\n            }\n\n        }, 3000)\n\n    }\n\n    exit = () => {\n        this.taskCompute = \"loaded\"\n        this.resourceCompute = \"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu isDir={node.isDir} parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.openExistsOrNewEditor({id: node.id, content: scriptFile.content, name: scriptFile.name})\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && !params.fileName.endsWith(\".mlsql\")) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n        this.isDir = this.props.isDir\n    }\n\n    confirmDelete = () => {\n        confirmAlert({\n            title: 'Confirm to delete',\n            message: 'Are you sure to do this ？',\n            buttons: [\n                {\n                    label: 'confirm',\n                    onClick: () => this.removeFile()\n                },\n                {\n                    label: 'cancel',\n                    onClick: () => {\n                    }\n                }\n            ],\n            closeOnEscape: true, closeOnClickOutside: false\n        });\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject() && this.isDir) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n    createFolder = () => {\n        if (this.isDir) {\n           return <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n        if (this.isCreateProject()){\n            return <MenuItem icon=\"folder-new\" text=\"Create Project\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.confirmDelete()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    {this.createFolder()}\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table} from 'antd';\nimport Modal from \"../../node_modules/antd/lib/modal/Modal\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded\"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough.\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend} from 'recharts';\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).format('DD,h:mm:ss')\n            dataForRender.push({\n                x: x,\n                inputRowsPerSecond: jsonItem.inputRowsPerSecond,\n                processedRowsPerSecond: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                numInputRows: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            dataForRender2: dataForRender2\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender}>\n                <Line type=\"monotone\" dataKey=\"inputRowsPerSecond\" stroke=\"#8884d8\"/>\n                <Line type=\"monotone\" dataKey=\"processedRowsPerSecond\" stroke=\"#82ca9d\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender2}>\n                <Line type=\"monotone\" dataKey=\"numInputRows\" stroke=\"#8884d8\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import * as React from \"react\"\nimport {Tabs} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\n\nconst TabPane = Tabs.TabPane;\n\nexport class TabEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parent = props.parent\n        this.myRefs = []\n        this.newTabIndex = 0;\n        const panes = [\n            {\n                title: 'MLSQL 1',\n                content: <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: \"newTab0\"})\n                }} activeKey='newTab0'/>,\n                key: 'newTab0'\n            },\n        ];\n        this.state = {\n            activeKey: panes[0].key,\n            panes,\n        };\n        this.newTabIndex++\n    }\n\n    pushRef = (ref) => {\n        this.myRefs.push(ref)\n    }\n\n    getCurrentEditor = () => {\n        const activeKey = this.state.activeKey;\n        let currentItem = null\n        this.myRefs.forEach(item => {\n            if (item.activeKey === activeKey) {\n                currentItem = item\n            }\n        })\n        return currentItem\n    }\n\n    onChange = (activeKey) => {\n        this.setState({activeKey});\n    }\n\n    onEdit = (targetKey, action) => {\n        this[action](targetKey);\n    }\n\n    addFull = (tabName, callback) => {\n        const panes = this.state.panes;\n        const activeKey = `newTab${this.newTabIndex++}`;\n        panes.push({\n            title: tabName || 'MLSQL ' + this.newTabIndex,\n            content: <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                this.pushRef({ref: ref, activeKey: activeKey})\n                if (callback) {\n                    callback({ref: ref, activeKey: activeKey})\n                }\n            }} activeKey={activeKey}/>,\n            key: activeKey\n        });\n        this.setState({panes, activeKey});\n    }\n\n    add = () => {\n        this.addFull()\n    }\n\n    getPaneIndexByActiveKey = (targetKey) => {\n        let lastIndex;\n        this.state.panes.forEach((pane, i) => {\n            if (pane.key === targetKey) {\n                lastIndex = i - 1;\n            }\n        });\n        return lastIndex\n    }\n\n    remove = (targetKey) => {\n        let activeKey = this.state.activeKey;\n        let lastIndex = this.getPaneIndexByActiveKey(targetKey)\n\n        const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n        if (panes.length && activeKey === targetKey) {\n            if (lastIndex >= 0) {\n                activeKey = panes[lastIndex].key;\n            } else {\n                activeKey = panes[0].key;\n            }\n        }\n        const editorRefList = this.myRefs.filter((item) => item.activeKey === targetKey)\n        this.myRefs = this.myRefs.filter((item) => item.activeKey !== targetKey)\n        this.parent.closeEditor(editorRefList[0])\n\n        this.setState({panes, activeKey});\n    }\n\n    render() {\n        return (\n            <Tabs\n                onChange={this.onChange}\n                activeKey={this.state.activeKey}\n                type=\"editable-card\"\n                onEdit={this.onEdit}\n            >\n                {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}\n                                                       closable={pane.closable}>{pane.content}</TabPane>)}\n            </Tabs>\n        );\n    }\n}","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n        this.itemData = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    setData = (k, v) => {\n        this.itemData[k] = v\n    }\n\n    getData = (k) => {\n        return this.itemData[k]\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        this.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        this.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        this.setData(\"processType\", processType);\n        this.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        this.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        this.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        this.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        this.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        this.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.getCurrentEditor().ref.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    etDoubleClick = (evt) => {\n        this.onDragStart(evt)\n        this.queryApp.getCurrentEditor().ref.etOver(evt)\n    }\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Load\n                                        data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"} onDoubleClick={this.etDoubleClick}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\nimport {TabEditor} from \"./editor/TabEditor\";\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\"}\n        this.directoryTree = React.createRef()\n        this.editorGroup = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n        this.etRef = React.createRef()\n\n        // key is script id\n        // value is editor ref\n        this.fileToEditorMap = {}\n\n    }\n\n    openExistsOrNewEditor = (script) => {\n        const self = this\n\n        if (this.fileToEditorMap.hasOwnProperty(script.id)) {\n            const editorRef = this.fileToEditorMap[script.id]\n            editorRef.ref.text(script.content, script.id)\n            this.editorGroup.current.onChange(editorRef.activeKey)\n\n        } else {\n            // if (!Object.values(this.fileToEditorMap).includes(this.getCurrentEditor())) {\n            //\n            //     //close current window\n            //     this.editorGroup.current.remove(this.getCurrentEditor().activeKey)\n            //\n            //     const editorRef = this.getCurrentEditor()\n            //     editorRef.ref.text(script.content, script.id)\n            //     self.fileToEditorMap[script.id] = editorRef.ref\n            //     const activeKey = editorRef.activeKey\n            //\n            //\n            // }\n            this.editorGroup.current.addFull(script.name, (editorRef) => {\n                editorRef.ref.text(script.content, script.id)\n                self.fileToEditorMap[script.id] = editorRef\n            })\n\n        }\n    }\n\n    closeEditor = (editorRef) => {\n        const tempFileToEditorMap = Object.keys(this.fileToEditorMap).filter(key => {\n            return this.fileToEditorMap[key].activeKey !== editorRef.activeKey\n        }).reduce((pre, key) => {\n            pre[key] = this.fileToEditorMap[key]\n            return pre\n        }, {})\n        this.fileToEditorMap = tempFileToEditorMap\n    }\n\n    getCurrentEditor = () => {\n        return this.editorGroup.current.getCurrentEditor()\n    }\n\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <div style={{marginBottom: \"10px\"}}>\n                        <MLSQLETQuick ref={this.etRef} parent={this}/>\n                    </div>\n                    <TabEditor ref={this.editorGroup} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"300px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_TEAM = \"team\"\nexport const VIEW_DEMO = \"demo\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n\n\nexport const TEAM_VIEW_BASIC = \"team_view_basic\"\nexport const SETUP_VIEW_BASIC = \"setup_view_basic\"\nexport const CLUSTER_VIEW_BASIC = \"cluster_view_basic\"\nexport const AUTH_VIEW_BASIC = \"auth_view_basic\"\n","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"300px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[0], -1)\n            } catch (e) {\n\n            }\n\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=\"200\" where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Icon, Input, Button, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHECK_TEAM_NAME, CREATE_TEAM} from \"../../service/BackendConfig\";\n\n\nclass CreateTeamForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.teamCards = props.parent\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CREATE_TEAM)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create team success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create team fail\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create team fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    teamNameCheck = (rule, value, callback) => {\n        if (value) {\n            const api = new MLSQLAPI(CHECK_TEAM_NAME)\n            api.request2({name: value}, (resJson) => {\n                if (!resJson[\"msg\"]) {\n                    callback(`${value} have been taken. Try another`);\n                }\n                else callback()\n            }, (failStr) => {\n                callback('server error:' + failStr);\n            })\n        } else {\n            callback()\n        }\n\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the team name!'},\n                            {validator: this.teamNameCheck}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>} placeholder=\"Team name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLCreateTeamForm = Form.create({name: 'create_team'})(CreateTeamForm);","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {\n    LIST_ROLES_MEMBER,\n    LIST_ROLES_TABLE,\n    LIST_TEAMS_MEMBER,\n    LIST_TEAMS_ROLE, LIST_TEAMS_TABLES, REMOVE_ROLES_MEMBER, REMOVE_ROLES_TABLE,\n    REMOVE_TEAMS_MEMBER,\n    REMOVE_TEAMS_ROLE, REMOVE_TEAMS_TABLE, RUN_SCRIPT\n} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchTeams(apiUrl, self, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByTeam(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_MEMBER)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchRoles(parent, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_ROLE)\n        api.request2({teamName: teamName}, resJson => {\n            parent.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTablesByRole(parent, teamName, roleName, stateKey) {\n        const api = new MLSQLAPI(LIST_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleMember(parent, teamName, roleName, userName, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName, userName: userName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByRole(parent, teamName, roleName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRole(parent, teamName, roleName) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_ROLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTeamMember(parent, teamName, userName, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_MEMBER)\n        api.request2({teamName: teamName, userName: userName}, resJson => {\n            callback()\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static teamInvite(self, apiUrl, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTables(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_TEAMS_TABLES)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTable(self, teamName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_TABLE)\n        api.request2({teamName: teamName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTableTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/tableTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchSourceTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/sourceTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchOperateTypes(self, stateKey) {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/operateTypes\\` as output;`, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleTable(self, teamName, roleName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ACCEPT_TEAMS_MEMBER,\n    LIST_TEAMS,\n    LIST_TEAMS_INVITED,\n    LIST_TEAMS_MEMBER,\n    REFUSE_TEAMS_MEMBER\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nexport class Teams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n\n    accept = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, ACCEPT_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n            this.teamCards.teamYourJoinRef.current.refresh()\n        })\n    }\n\n    refuse = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, REFUSE_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n        })\n    }\n\n    refresh = () => {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n    renderCommand = (value) => {\n        this.teamName = value\n        if (this.apiUrl === LIST_TEAMS_INVITED) {\n            return [<a onClick={this.accept}>accept</a>, <a onClick={this.refuse}>refuse</a>]\n        }\n        return []\n    }\n\n\n    render() {\n        return (\n            <div>\n                <List\n                    dataSource={this.state.data}\n                    renderItem={item => (\n                        <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                            <List.Item.Meta\n                                title={<a href=\"#\">{item.name}</a>}\n                            />\n                        </List.Item>\n                    )}\n                >\n                </List>\n            </div>\n        );\n    }\n}\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass InviteMember extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_MEMBER)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.setState({refresh: true})\n                        message.success(\"Invite success\", 3)\n                    } else {\n                        message.warning(\"Invite fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    self.teamCards.setState({refresh: true})\n                    message.error(\"Invite fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userNames', {\n                        rules: [\n                            {required: true, message: 'Please input the user name you want invite'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLInviteMember = Form.create({name: 'create_team'})(InviteMember);","import {Select} from \"antd\";\nimport * as React from \"react\";\nimport TeamService from \"./Service\";\n\nexport class Views {\n    static renderTeamsForSelect = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static onTeamSelect = (self, teamName) => {\n        self.currentTeamName = teamName\n        TeamService.fetchRoles(self, teamName, \"roles\")\n    }\n\n\n    static renderTeams = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    static renderRoles = (self) => {\n        return self.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderMembers = (self) => {\n        return self.state.members.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderBackends = (self) => {\n        return self.state.backends.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n    s\n    static teamSelect = (self, onChangeCallback) => {\n        return <Select\n            placeholder=\"Team name\"\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderTeams(self)}\n        </Select>\n    }\n\n    static roleSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"role name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderRoles(self)}\n        </Select>\n    }\n\n    static backendSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"backend name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderBackends(self)}\n        </Select>\n    }\n\n    static memberSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"member name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderMembers(self)}\n        </Select>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS_MEMBER} from \"../../service/BackendConfig\";\n\n\nexport class TeamMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchMembersByTeam(this, member, \"members\")\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            Service.removeTeamMember(self, self.currentTeam, userName, () => {\n                Service.fetchMembersByTeam(self, self.currentTeam, \"members\")\n            })\n        }\n        }>remove</a>]\n\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderMembers()}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass AddRoleForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleNames', {\n                        rules: [\n                            {required: true, message: 'Please input the role name you want to create'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"role\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddRoleForTeam = Form.create({name: 'add_role_for_team'})(AddRoleForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamRoles extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    refresh = () => {\n        if(this.currentTeam){\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n    }\n\n    renderCommand = (roleName) => {\n        return [<a onClick={() => {\n            Service.removeRole(this, this.currentTeam, roleName)\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.roles}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_MEMBER,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\n\n\nclass AddMemberForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_MEMBER)\n                api.request2(params, (resJson) => {\n                    console.log(resJson)\n                    console.log(\"----\")\n                    if (resJson[\"msg\"] === \"success\") {\n                        if (self.teamCards.roleMembersRef) {\n                            self.teamCards.roleMembersRef.current.refresh()\n                        }\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Views.onTeamSelect(this, teamName)\n        Service.fetchMembersByTeam(this, teamName, \"members\")\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            self.onTeamSelect(teamName)\n                        })\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name'}\n                        ],\n                    })(\n                        Views.roleSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userName', {\n                        rules: [\n                            {required: true, message: 'Please input the member name'}\n                        ],\n                    })(\n                        Views.memberSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddMemberForRole = Form.create({name: 'add_member_for_role'})(AddMemberForRole);","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, ADD_TEAMS_TABLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            tableTypes: [],\n            sourceTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n        Service.fetchTableTypes(this, \"tableTypes\")\n        Service.fetchSourceTypes(this, \"sourceTypes\")\n\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTableTypes = () => {\n        return this.state.tableTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n    renderSourceTypes = () => {\n        return this.state.sourceTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the table name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"table name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('db', {\n                        rules: [],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"db name\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('tableType', {\n                        rules: [\n                            {required: true, message: 'Please input the table type you want to create'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"table Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTableTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('sourceType', {\n                        rules: [],\n                    })(\n                        <Select\n                            placeholder=\"source Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderSourceTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForTeam = Form.create({name: 'add_table_for_team'})(AddTableForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchTables(this, member, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam) {\n            Service.fetchTables(this, this.currentTeam, \"tables\")\n        }\n    }\n\n    renderCommand = (tableId) => {\n        return [<a onClick={(evt) => {\n            evt.preventDefault()\n            Service.removeTable(this, this.currentTeam, tableId, null, () => {\n                Service.fetchTables(this, this.currentTeam, \"tables\")\n            })\n\n        }\n        }>remove</a>]\n    }\n\n    renderDB = (item) => {\n        if (item.db !== \"undefined\" && item.db) {\n            return item.db\n        } else return \"default\"\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={`${item.tableType}:${this.renderDB(item)}:${item.name}`}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    onRoleSelect = (roleName) => {\n        this.currentRoleName = roleName\n        Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n    }\n\n    refresh = () => {\n        if (this.currentTeamName && this.currentRoleName) {\n            Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n        }\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeamName && this.currentRoleName) {\n                Service.removeRoleMember(this, this.currentTeamName, this.currentRoleName, userName, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={item.name}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })}\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.roleSelect(self, self.onRoleSelect, \"default\")}\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderMembers()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {MLSQLCreateTeamForm} from \"./CreateTeam\";\nimport {Teams} from \"./Teams\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS, LIST_TEAMS_INVITED, LIST_TEAMS_JOINED} from \"../../service/BackendConfig\";\nimport {InviteMember, MLSQLInviteMember} from \"./InviteMember\";\nimport {TeamMembers} from \"./TeamMembers\";\nimport {MLSQLAddRoleForTeam} from \"./AddRoleForTeam\";\nimport {TeamRoles} from \"./TeamRoles\";\n\nimport {MLSQLAddMemberForRole} from \"./AddMemberForRole\";\nimport {RoleMembers} from \"./RoleMembers\";\n\n\nexport class TeamCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n        this.teamRolesRef = React.createRef()\n        this.teamMembersRef = React.createRef()\n        this.teamsRef = React.createRef()\n        this.roleTablesRef = React.createRef()\n        this.roleMembersRef = React.createRef()\n        this.teamYourJoinRef = React.createRef()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"Team belongs to you\" bordered={false}><Teams parent={this} ref={this.teamsRef}\n                                                                              apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Create new team\" bordered={false}>\n                        <MLSQLCreateTeamForm parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Team\" bordered={false}><TeamMembers ref={this.teamMembersRef}\n                                                                                     parent={this} apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Invite members\" bordered={false}>\n                        <MLSQLInviteMember parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Team you join\" bordered={false}><Teams parent={this} ref={this.teamYourJoinRef}\n                                                                        apiUrl={LIST_TEAMS_JOINED}/></Card>\n                </Col>\n\n                <Col span={12}>\n                    <Card title=\"Team inviting you\" bordered={false}><Teams parent={this} apiUrl={LIST_TEAMS_INVITED}/></Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n\n                <Col span={16}>\n                    <Card title=\"View Roles By Team\" bordered={false}><TeamRoles ref={this.teamRolesRef}\n                                                                                 parent={this} apiUrl={ADD_TEAMS_ROLE}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Add role to Team\" bordered={false}>\n                        <MLSQLAddRoleForTeam parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Role\" bordered={false}>\n                        <RoleMembers parent={this} ref={this.roleMembersRef}/>\n                    </Card>\n                </Col>\n\n\n                <Col span={8}>\n                    <Card title=\"Add Member to Role\" bordered={false}>\n                        <MLSQLAddMemberForRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {CLUSTER_MANAGER, LIST_BACKENDS_BY_TEAM} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchBackends(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/list\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static checkBackendName(self, name, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: name}, {action: \"/backend/name/check\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendsByNames(self, names, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({names: names}, {action: \"/backend/list/names\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendNamesByTeam(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_BACKENDS_BY_TEAM)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static addBackend(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/add\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeBackend(self, backendName, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: backendName}, {action: \"/backend/remove\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static updateBackendTags(self, backendName, tags, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({tags: tags, name: backendName}, {\n            action: \"/backend/tags/update\",\n            merge: \"append\"\n        })\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport Service from \"./remote/Service\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {Views as TeamViews} from \"../team/remote/Views\"\nimport TeamService from \"../team/remote/Service\"\nimport CluserService from \"./remote/Service\"\nimport {Row, Col, Button} from \"antd\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\nexport class ClusterBackends extends React.Component {\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.dataViewer = React.createRef()\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    renderBackends = () => {\n        return <MLSQLQueryDisplay ref={this.dataViewer} parent={this}/>\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        const tag = self.currentTeamName + \"_\" + roleName\n        Service.fetchBackends(this, {\n            tag: tag\n        }, \"backends\", () => {\n            self.dataViewer.current.update(self.state.backends.map(item => {\n                const {ecsResourcePoolId, id, tags, ...newitem} = item;\n                newitem[\"command\"] = <Button onClick={(evt) => {\n                    CluserService.removeBackend(self, newitem.name, null, () => {\n                        self.onRoleSelect(roleName)\n                    })\n                }}>remove</Button>\n                return newitem\n            }), {})\n        })\n    }\n\n    render() {\n        const self = this\n        return <div>\n            <Row>\n                <Col>\n                    {TeamViews.teamSelect(self, (teamName) => {\n                        TeamViews.onTeamSelect(self, teamName)\n                    })}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {TeamViews.roleSelect(self, self.onRoleSelect)}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {this.renderBackends()}\n                </Col>\n            </Row>\n        </div>\n\n    }\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddClusterBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, name, url} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n                ClusterService.addBackend(self, {\n                    name: name,\n                    url: url,\n                    tag: tag,\n                    teamName: teamName\n                }, null, () => {\n                    message.success(\"Add backend success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    checkBackendName = (rule, value, callback) => {\n        ClusterService.checkBackendName(this, value, null, (resJson) => {\n            if (resJson[\"msg\"]) {\n                callback(\"Name have been taken. Try another.\")\n            } else {\n                callback()\n            }\n        })\n\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the backend name'},\n                            {validator: this.checkBackendName},\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"backend name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('url', {\n                        rules: [\n                            {required: true, message: 'Please input the url name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddClusterBackend = Form.create({name: 'add_backend_for_cluster'})(AddClusterBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddTagToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const self = this\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n        ClusterService.fetchBackends(this, \"backends\", () => {\n            const tagsWithDuplicate = self.state.backends.map(item => {\n                return item.tags\n            }).reduce((items, item) => {\n                items.push(...item)\n                return items\n            }, [])\n            const tags = new Set(tagsWithDuplicate)\n            self.setState({tags: [...tags]})\n        })\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTagToRole = Form.create({name: 'add_tag_to_role'})(AddTagToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureDefaultBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"] === params.tag) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            }else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureDefaultBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass AddExistClusterBackendToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, backendName} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n\n                ClusterService.updateBackendTags(self, backendName, tag, null, () => {\n                    message.success(\"Update backend tags success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(this, (teamName) => {\n                            ClusterService.fetchBackendNamesByTeam(this, teamName, null, (backendNames) => {\n                                ClusterService.fetchBackendsByNames(this, backendNames.map(item => {\n                                    return item.name\n                                }).join(\",\"), \"backends\", () => {\n                                    console.log(this.state.backends)\n                                })\n                            })\n                            Views.onTeamSelect(this, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(this, (roleName) => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('backendName', {\n                        rules: [{required: true, message: 'Please input the backend name'}],\n                    })(\n                        Views.backendSelect(this, (backend) => {\n\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Confirm\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddExistClusterBackendToRole = Form.create({name: 'AddExistClusterBackendToRole'})(AddExistClusterBackendToRole);","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {ClusterBackends} from \"./ClusterBackends\";\nimport {MLSQLAddClusterBackend} from \"./AddClusterBackend\";\nimport {MLSQLAddTagToRole} from \"./AddTagToRole\";\nimport {MLSQLConfigureDefaultBackend} from \"./ConfigureDefaultBackend\";\nimport {MLSQLAddExistClusterBackendToRole} from \"./AddExistClusterBackendToRole\";\n\n\nexport class ClusterCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.backendsRef = React.createRef()\n        this.state = {}\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Set your default backend tag\" bordered={false}>\n                        <MLSQLConfigureDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add Backend\" bordered={false}>\n                        <MLSQLAddClusterBackend parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Your Backends\" bordered={false}>\n                        <ClusterBackends parent={this} ref={this.backendsRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Add role to backend\" bordered={false}>\n                        <MLSQLAddExistClusterBackendToRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    onRoleSelect = (roleName) => {\n        this.currentRole = roleName\n        Service.fetchTablesByRole(this, this.currentTeam, roleName, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam && this.currentRole) {\n            Service.fetchTablesByRole(this, this.currentTeam, this.currentRole, \"tables\")\n        }\n    }\n\n    renderCommand = (tableNameId) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeam && this.currentRole) {\n                Service.removeRoleTable(this, this.currentTeam, this.currentRole, tableNameId, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={item.tableType + \":\" + this.sourceType(item.sourceType, item.tableType) + \":\" + item.name + \":\" + item.operateType}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.selectTeam}\n                        >\n                            {Views.renderTeamsForSelect(this)}\n                        </Select>\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onRoleSelect}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderTables()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_TABLE,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.authCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tables: [],\n            operateTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.authCards.roleTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Service.fetchRoles(this, teamName, \"roles\")\n        Service.fetchTables(this, teamName, \"tables\")\n        Service.fetchOperateTypes(this, \"operateTypes\")\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return this.state.tables.map(item => {\n            return <Select.Option key={item.name}\n                                  value={item.id}>{item.tableType}:{this.sourceType(item.sourceType, item.tableType)}:{item.db}.{item.name}</Select.Option>\n        })\n    }\n\n    renderOperateTypes = () => {\n        return this.state.operateTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name '}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tableName', {\n                        rules: [\n                            {required: true, message: 'Please input the tableName name '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"table name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTables()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('operateType', {\n                        rules: [\n                            {required: true, message: 'Please input the operateType to Role '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Operate type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderOperateTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForRole = Form.create({name: 'add_table_for_role'})(AddTableForRole);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLAddTableForTeam} from \"../team/AddTableForTeam\";\n\nimport {RoleTables} from \"../team/RoleTables\";\nimport {MLSQLAddTableForRole} from \"../team/AddTableForRole\";\n\n\nexport class AuthCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Add Table to Team\" bordered={false}>\n                        <MLSQLAddTableForTeam parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add table to role\" bordered={false}>\n                        <MLSQLAddTableForRole parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"View tables By Role\" bordered={false}>\n                        <RoleTables parent={this} ref={this.roleTablesRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List, notification, Card, Col, Row} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLCreateTeamForm} from \"../team/CreateTeam\";\nimport {MLSQLAddRoleForTeam} from \"../team/AddRoleForTeam\";\nimport {MLSQLAddMemberForRole} from \"../team/AddMemberForRole\";\nimport {MLSQLAddClusterBackend} from \"../cluster/AddClusterBackend\";\nimport {MLSQLConfigureDefaultBackend} from \"../cluster/ConfigureDefaultBackend\";\nimport {RoleMembers} from \"../team/RoleMembers\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class Setup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.steps = this.generateSteps()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    generateSteps() {\n        const self = this\n        return [{\n            title: 'Create Team',\n            content: () => {\n                return <Card title={\"input your team name\"} bordered={true}>\n                    <MLSQLCreateTeamForm parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Create Role',\n            content: () => {\n                return <Card title={\"Add new role to the team you have created\"} bordered={true}>\n                    <MLSQLAddRoleForTeam parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Invite user to Role',\n            content: () => {\n                return <Card title={\"Add member to the role you have created\"} bordered={true}>\n                    <MLSQLAddMemberForRole parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Create Backend',\n            content: () => {\n                return <Card title={\"Add the cluster information you have setup\"} bordered={true}>\n                    <MLSQLAddClusterBackend parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Set default backend',\n            content: () => {\n                return <Card title={\"Configure the default backend you want use\"} bordered={true}>\n                    <MLSQLConfigureDefaultBackend parent={self}/>\n                </Card>\n            }\n        },\n            {\n                title: 'Congratulation!',\n                content: () => {\n                    return <Card title={\"All Done\"} bordered={true}>\n                        Please go to Console\n                    </Card>\n                }\n            }\n        ];\n    }\n\n    componentDidMount() {\n\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\" style={{\"margin-top\": \"30px\"}}>\n                    <Row gutter={24}>\n                        <Col span={8}>\n\n\n                        </Col>\n                        <Col span={8}>\n                            {this.steps[current].content()}\n\n                        </Col>\n                    </Row>\n\n                </div>\n\n            </div>\n        );\n    }\n\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {AUTH_VIEW_BASIC, CLUSTER_VIEW_BASIC, SETUP_VIEW_BASIC, TEAM_VIEW_BASIC} from \"../../common/ViewConst\";\nimport {TeamCards} from \"./TeamCards\";\nimport {ClusterCards} from \"../cluster/ClusterCards\";\nimport {AuthCards} from \"../auth/AuthCards\";\nimport Setup from \"../demo/Setup\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.app = props.parent\n        this.state = {\n            currentView: SETUP_VIEW_BASIC\n        }\n\n\n    }\n\n    switchToBasic = () => {\n        this.setState({currentView: TEAM_VIEW_BASIC})\n    }\n\n    switchToSetup = () => {\n        this.setState({currentView: SETUP_VIEW_BASIC})\n    }\n\n    switchToCluster = () => {\n        this.setState({currentView: CLUSTER_VIEW_BASIC})\n    }\n\n    switchToAuth = () => {\n        this.setState({currentView: AUTH_VIEW_BASIC})\n    }\n\n    renderView = () => {\n        if (this.state.currentView === SETUP_VIEW_BASIC) return <Setup/>\n        if (this.state.currentView === TEAM_VIEW_BASIC) return <TeamCards/>\n        if (this.state.currentView === CLUSTER_VIEW_BASIC) return <ClusterCards/>\n        if (this.state.currentView === AUTH_VIEW_BASIC) return <AuthCards/>\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToSetup}>Setup</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBasic}>Team</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToCluster}>Cluster</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block onClick={this.switchToAuth}>Auth</Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./team/MainPage\";\nimport {TEAM_VIEW_BASIC} from \"../common/ViewConst\";\n\nexport class MLSQLManagerApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage parent={this}/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"../common/ViewConst\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\nimport {MLSQLManagerApp} from \"../components/MLSQLManagerApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n\n    }\n\n    componentDidMount() {\n        const self = this\n        this.auth.userName((name) => {\n            self.setState({userName: name})\n        })\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.auth.isLogin() && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_TEAM) return <MLSQLManagerApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n        const self = this\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            }, () => self.app.updateLoginoutStatus())\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToTeam = () => {\n        this.setState({currentView: VIEW_TEAM})\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Team\" onClick={this.switchToTeam}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\"\n                             href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\"><img\n                        src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}