{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/et/ButtonToCommand.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/dash/MLSQLHTML.js","components/query/MLSQLDash.js","components/notebook/CodeBlock.js","components/notebook/CommandGroup.js","components/notebook/service/Engine.js","components/notebook/DataTable.js","components/notebook/DisplayGroup.js","components/notebook/ExecuteUnit.js","components/notebook/NoteBook.js","components/editor/TabEditor.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","components/team/CreateTeam.js","components/team/remote/Service.js","components/team/Teams.js","components/team/InviteMember.js","components/team/remote/Views.js","components/team/TeamMembers.js","components/team/AddRoleForTeam.js","components/team/TeamRoles.js","components/team/AddMemberForRole.js","components/team/AddTableForTeam.js","components/team/TeamTables.js","components/team/RoleMembers.js","components/team/TeamCards.js","components/cluster/remote/Service.js","components/cluster/ClusterBackends.js","components/cluster/AddClusterBackend.js","components/cluster/AddTagToRole.js","components/cluster/ConfigureDefaultBackend.js","components/cluster/AddExistClusterBackendToRole.js","components/cluster/ConfigureSchedulerBackend.js","components/cluster/ClusterCards.js","components/team/RoleTables.js","components/team/AddTableForRole.js","components/auth/AuthCards.js","components/demo/Setup.js","components/team/MLSQLChangePassword.js","components/team/SettingCards.js","components/team/MainPage.js","components/MLSQLManagerApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","console","log","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","res","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","skipAuth","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","text","get","catch","okFun","failFun","new_request","resStatus","extractMsg","err","message","USER_TAGS_UPDATE","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","FILE_UPLOAD","CREATE_TEAM","CHECK_TEAM_NAME","LIST_TEAMS","LIST_TEAMS_INVITED","ADD_TEAMS_MEMBER","ACCEPT_TEAMS_MEMBER","REFUSE_TEAMS_MEMBER","ADD_TEAMS_ROLE","ADD_TEAMS_TABLE","ADD_ROLES_TABLE","ADD_ROLES_MEMBER","CHNAGE_PASSWORD","MLSQLAuth","apiResponse","removeItem","error","m","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","assert","condition","Error","ButtonToCommand","makeSQL","Option","Select","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","api","BackendConfig","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","appendLog","executeQuery","enterLoading","getDisplay","update","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","commandGroup","runScript","queryApp","setData","stringify","failRes","selectionRange","getSelectionRange","session","getTextRange","appendToEditor","p","getCursorPosition","insert","focus","msg","row","getLength","column","getDashBoard","dash","display","loading","resourceProgressRef","enter","jobProgress","taskProgressRef","exit","etOver","evt","et","etRef","eventName","getData","popName","processType","pathAlias","tableHidden","pathHidden","outputTableHidden","outputTableAlias","tableAlias","etPop","startLogging","logProgress","LogProgress","stopLogging","parent","React","parentCallback","newValue","_this2","react","className","onDragOver","preventDefault","onDrop","re_resizable_lib","defaultSize","height","onResize","resize","lib_default","a","ref","mode","theme","width","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","autoScrollEditorIntoView","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_JobProgress","MLSQLAceEditor_TaskProgress","MLSQLAceEditor_ResourceProgress","CommandGroup","_this3","es_button","onClick","es_select","style","msgBox","_this4","intervalTimer","mark","offset","setTimeout","setInterval","concat","jsonArray","length","clearInterval","JobProgress","_this5","resourceCompute","hasOwnProperty","progress","currentJobIndex","totalJob","percent","successPercent","title","ResourceProgress","_this6","activeTasks","totalCores","currentJobGroupActiveTasks","TaskProgress","_this7","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","forEach","item","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","isDir","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isExpanded","toggleIsExpanded","scriptFile","openExistsOrNewEditor","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","return","CreateScriptDialog","fileName","target","finish","create","endsWith","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","confirmDelete","confirmAlert","removeFile","closeOnEscape","closeOnClickOutside","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","createFolder","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","data","config","render","isPrototypeOf","type","substring","keys","basket","rows","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","modal","visible","onCancel","onOk","cancelText","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","post","file","attach","end","map","f","react_default","createElement","size","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","objectSpread","Component","randomColor","generateColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","dataType","prev","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","margin","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender","dataForRender2","jsonItem","moment","utc","timestamp","format","inputRowsPerSecond","processedRowsPerSecond","numInputRows","titleMap","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","action","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","span","Charts","hasLegend","subTitle","pre","now","valueFormat","val","split","isResource","MLSQLHTML","MLSQLHTML_MLSQLHTMLPanel","MLSQLHTMLPanel","refresh","sandbox","srcDoc","frameBorder","scrolling","ifr","Panel","Collapse","TabPane","Tabs","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","collapse","header","tabs","defaultActiveKey","tab","UploadDropZone_UploadDropzone","PureComponent","CodeBlock","originalEditor","container","lineHeight","maxLines","initialCode","evtExecute","isExecute","executeUnit","execute","cancelExecute","es_icon","spin","Engine","run","show_result","fail_result","newRunScript","saveFile","code","DataTable","parseData","_this$parseData","_this$parseData2","slicedToArray","_this$parseData3","_this$parseData4","DataTable_ReactMarkdown","DisplayGroup","displayData","errorMsg","displayTableRef","displayDashRef","displayDash","displayError","displayTable","DataTable_DataTable","ExecuteUnit","codeBlock","displayGroup","notebook","nextExecuteUnit","codeBlockIsEmpty","getCodeStr","CodeBlock_CodeBlock","CommandGroup_CommandGroup","DisplayGroup_DisplayGroup","CODE_SPLITTER","NodeBook","createNewExecuteUnit","ExecuteUnit_ExecuteUnit","addRef","instance","executeUnitRefs","slice","executeUnits","saveNoteBook","engine","TabEditor","pushRef","myRefs","getCurrentEditor","activeKey","currentItem","panes","displayEditor","onEdit","targetKey","addFull","tabName","newTabIndex","src_components_MLSQLAceEditor","NoteBook_NodeBook","add","getPaneIndexByActiveKey","lastIndex","pane","remove","filter","editorRefList","closeEditor","TabEditor_TabPane","closable","InputGroup","Input","Group","ETLoadParams","etPopLoad","compact","ETPopLoad","getAttribute","sourceType","sourceTypeV","es_row","param","es_col","input","marginBottom","addonBefore","description","loadParamsRef","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","etpop","datasourcesRender","ETPopLoad_Option","ETPopLoad_InputGroup","showSearch","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","ETLoadParams_ETLoadParams","TextArea","ETPopAlgorithm","renderParam","temp","ETPopAlgorithm_InputGroup","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","ETBaseTool_InputGroup","showOutputTableName","pathNameForRender","showPathName","asStr","ETPopTool","_ETBaseTool","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataTypeV","udfType","udfTypeV","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","href","appendChild","click","removeChild","ETStreamProgress","jobType","ETStreamProgress_Option","ETPop","disableEtModalVisible","etModalVisible","enableEtModalVisible","popChild","renderContent","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","Modal_default","okText","MLSQLETQuick","itemData","onDragStart","renderPop","ETPop_ETPop","etDoubleClick","padding","MLSQLETQuick_Panel","gutter","card","tag_default","tyle","help","draggable","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","MLSQLQueryApp","script","fileToEditorMap","editorRef","editorGroup","tempFileToEditorMap","tableAndDash","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","MLSQLETQuick_MLSQLETQuick","TabEditor_TabEditor","VIEW_CONSOLE","VIEW_TEAM","VIEW_DEMO","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","TEAM_VIEW_BASIC","SETUP_VIEW_BASIC","CLUSTER_VIEW_BASIC","AUTH_VIEW_BASIC","SETTING_VIEW_BASIC","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","Item","generateView","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","renderView","currentView","BigDL_BigDL","NLP_NLP","Basic_Basic","Header","Layout","Content","Footer","Sider","MainPage","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","layout","minHeight","es_menu","defaultSelectedKeys","block","Demos_Demos","textAlign","MLSQLDemoApp","MainPage_MainPage","CreateTeamForm","handleSubmit","form","validateFields","resJson","teamCards","teamsRef","warning","failStr","teamNameCheck","rule","getFieldDecorator","es_form","onSubmit","rules","required","validator","prefix","htmlType","MLSQLCreateTeamForm","Form","Service","apiUrl","stateKey","defineProperty","MESSAGE_TIMEOUT","teamName","roleName","tableId","Teams","accept","teamInvite","fetchTeams","teamYourJoinRef","refuse","renderCommand","actions","Meta","InviteMember","renderTeams","teams","MLSQLInviteMember","Views","renderTeamsForSelect","onTeamSelect","currentTeamName","TeamService","fetchRoles","renderRoles","roles","renderMembers","members","renderBackends","backends","teamSelect","onChangeCallback","roleSelect","backendSelect","memberSelect","TeamMembers","selectTeam","member","currentTeam","fetchMembersByTeam","removeTeamMember","AddRoleForTeam","MLSQLAddRoleForTeam","TeamRoles","removeRole","AddMemberForRole","roleMembersRef","MLSQLAddMemberForRole","AddTableForTeam","renderTableTypes","tableTypes","renderSourceTypes","sourceTypes","fetchTableTypes","fetchSourceTypes","MLSQLAddTableForTeam","RoleMembers","onRoleSelect","currentRoleName","fetchMembersByRole","removeRoleMember","TeamCards","openNotificationWithIcon","notification","teamRolesRef","teamMembersRef","roleTablesRef","Teams_Teams","TeamMembers_TeamMembers","TeamRoles_TeamRoles","RoleMembers_RoleMembers","newParams","names","backendName","merge","ClusterBackends","dataViewer","tag","fetchBackends","ecsResourcePoolId","newitem","objectWithoutProperties","CluserService","removeBackend","TeamViews","AddClusterBackend","acc","ClusterService","addBackend","checkBackendName","MLSQLAddClusterBackend","AddTagToRole","renderTags","tagsWithDuplicate","items","Set","ConfigureDefaultBackend","includes","MLSQLConfigureDefaultBackend","AddExistClusterBackendToRole","updateBackendTags","fetchBackendNamesByTeam","backendNames","fetchBackendsByNames","backend","MLSQLAddExistClusterBackendToRole","ConfigureSchedulerBackend","isScheduler","MLSQLConfigureSchedulerDefaultBackend","ClusterCards","backendsRef","ClusterBackends_ClusterBackends","RoleTables","currentRole","fetchTablesByRole","tableNameId","removeRoleTable","defaultValue","renderTables","tables","tableType","operateType","AddTableForRole","authCards","fetchTables","fetchOperateTypes","db","renderOperateTypes","operateTypes","MLSQLAddTableForRole","AuthCards","RoleTables_RoleTables","Setup","Setup_Step","margin-top","ChangePassword","MLSQLChangePassword","SettingCards","switchToSetup","switchToCluster","switchToAuth","switchToSetting","Setup_Setup","TeamCards_TeamCards","ClusterCards_ClusterCards","AuthCards_AuthCards","SettingCards_SettingCards","app","MainPage_Sider","MainPage_Header","MainPage_Content","MainPage_Footer","MLSQLManagerApp","team_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","MLSQLDemoApp_MLSQLDemoApp","MLSQLManagerApp_MLSQLManagerApp","validateUserName","validatePassword","isEmail","test","normal","inject","App","menuRef","switchToTeam","switchToConsole","switchToDemo","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a2484ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                console.log(e)\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    let res = str\n                    try {\n                        res = JSON.parse(str)[\"msg\"]\n                    } catch (e) {\n\n                    }\n                    serverErrorCallback(res)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                serverErrorCallback(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            let res = str\n                            try {\n                                res = JSON.parse(str)[\"msg\"]\n                            } catch (e) {\n\n                            }\n                            serverErrorCallback(\"backend status:\" + ok.status + \"\\n\" + res)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        let res = str\n                        try {\n                            res = JSON.parse(str)[\"msg\"]\n                        } catch (e) {\n\n                        }\n                        serverErrorCallback(res)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        }).then((res) => {\n            successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n        })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n\n    newRunScript(params, sql, okFun, failFun) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                failFun(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.new_request(HTTP.Method.POST, finalParams, okFun, failFun)\n        })\n    }\n\n    new_request(method, body, okFun, failFun) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        let resStatus = 0\n\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        }).then((res) => {\n            resStatus = res.status\n            if (resStatus === 200) {\n                res.json().then((value) => {\n                    okFun(value)\n                })\n            }\n            return res\n        }).then(res => {\n            const extractMsg = () => {\n                res.text().then(value => {\n                        try {\n                            failFun(JSON.parse(value)[\"msg\"])\n                        } catch (e) {\n                            failFun(value)\n                        }\n                    }\n                )\n            }\n\n            switch (resStatus) {\n                case 201:\n                    break\n                case 400:\n                    extractMsg()\n                    break\n                case 500:\n                    extractMsg()\n                    break\n                default:\n                    console.log('unhandled')\n                    break\n            }\n        })\n            .catch((err) => {\n                failFun(err.message)\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n\nexport const CREATE_TEAM = BACKEND_SERVER + \"/api_v1/team/create\";\nexport const CHECK_TEAM_NAME = BACKEND_SERVER + \"/api_v1/team/name/check\";\nexport const LIST_TEAMS = BACKEND_SERVER + \"/api_v1/team\";\n\nexport const LIST_TEAMS_JOINED = BACKEND_SERVER + \"/api_v1/team/joined\";\nexport const LIST_TEAMS_INVITED = BACKEND_SERVER + \"/api_v1/team/invited\";\n\nexport const LIST_TEAMS_IN = BACKEND_SERVER + \"/api_v1/team/in\";\n\n\nexport const ADD_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/add\";\nexport const REMOVE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/remove\";\nexport const LIST_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/members\";\n\nexport const ACCEPT_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/accept\";\nexport const REFUSE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/refuse\";\n\nexport const ADD_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/add\";\nexport const REMOVE_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/remove\";\nexport const LIST_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/roles\";\n\nexport const ADD_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/add\";\nexport const REMOVE_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/remove\";\nexport const LIST_TEAMS_TABLES = BACKEND_SERVER + \"/api_v1/team/tables\";\n\n\nexport const ADD_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/add\";\nexport const REMOVE_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/remove\";\nexport const LIST_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/tables\";\n\nexport const ADD_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/add\";\nexport const REMOVE_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/remove\";\nexport const LIST_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/members\";\n\nexport const LIST_BACKENDS_BY_TEAM = BACKEND_SERVER + \"/api_v1/backends\";\n\nexport const CHNAGE_PASSWORD = BACKEND_SERVER + \"/api_v1/changepassword\";","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\nimport {Select} from 'antd';\nimport {Resizable} from \"re-resizable\";\n\nconst {Option} = Select;\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.jobProgress = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId}, () => {\n            this.aceEditorRef.current.editor.setValue(value, 1)\n        })\n\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    self.appendLog(wow[\"msg\"])\n                }, (jsonErr) => {\n                    self.appendLog(jsonErr)\n                })\n            } else {\n                self.appendLog(\"saved\")\n            }\n\n        }, (fail) => {\n            self.appendLog(fail)\n        })\n\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n        self.getDisplay().update(JSON.parse(\"[]\"))\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        const timeout = this.commandGroup.current.state.timeout\n\n        api.runScript({\n            jobName: jobName,\n            background: (this.state.background || false),\n            timeout: timeout\n        }, finalSQL, (wow) => {\n            try {\n                self.queryApp.setData(wow)\n                self.getDisplay().update(wow)\n                self.appendLog(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.appendLog(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow, null, 2))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            self.exitLoading()\n            let failRes = fail.toString()\n            try {\n                failRes = JSON.parse(failRes)[\"msg\"]\n            } catch (e) {\n            }\n            self.appendLog(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    appendLog = (msg) => {\n        const editor = this.getMessageBoxAceEditor()\n        const session = editor.session\n        session.insert({\n            row: session.getLength(),\n            column: 0\n        }, \"\\n\" + msg)\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.jobProgress.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})\n        // this.logProgress = new LogProgress(this)\n        // this.logProgress.enter()\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.jobProgress.current.exit()\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()\n        // if (this.logProgress) {\n        //     this.logProgress.exit()\n        // }\n    }\n    etOver = (evt) => {\n        const et = this.queryApp.etRef.current\n        const eventName = et.getData(\"eventName\")\n        const popName = et.getData(\"popName\")\n        const processType = et.getData(\"processType\")\n        const pathAlias = et.getData(\"pathAlias\")\n        const tableHidden = et.getData(\"tableHidden\")\n        const pathHidden = et.getData(\"pathHidden\")\n        const outputTableHidden = et.getData(\"outputTableHidden\")\n        const outputTableAlias = et.getData(\"outputTableAlias\")\n        const tableAlias = et.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            et.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}>\n                    <Resizable defaultSize={{height: \"500px\"}} onResize={()=>{this.aceEditorRef.current.editor.resize();}}><AceEditor\n                        ref={this.aceEditorRef}\n                        mode=\"sql\"\n                        theme=\"github\"\n                        width={\"100%\"}\n                        height={\"100%\"}\n                        onChange={this.onChange}\n                        name=\"mlsql_editor\"\n                        fontSize={16}\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        editorProps={{\n                            $blockScrolling: Infinity\n                        }}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: false,\n                            showLineNumbers: true,\n                            tabSize: 2,\n                            autoScrollEditorIntoView: true\n                        }}\n                    /></Resizable>\n                </div>\n\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <JobProgress ref={this.jobProgress} parent={this}></JobProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n            </div>\n        )\n    }\n\n    startLogging = () => {\n        if (!this.logProgress) {\n            this.logProgress = new LogProgress(this)\n        }\n        this.logProgress.enter()\n    }\n    stopLogging = () => {\n        if (this.logProgress) {\n            this.logProgress.exit()\n        }\n\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, timeout: \"-1\"}\n        this.parent = props.parent\n    }\n\n    onChange = (value) => {\n        this.setState({timeout: value})\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n                <Button onClick={this.parent.startLogging}>Start logging</Button>\n                <Button onClick={this.parent.stopLogging}>Stop logging</Button>\n                Job Timeout:<Select\n                onChange={this.onChange}\n                style={{width: \"120px\"}}\n            >\n                <Option value=\"10000\">10s</Option>\n                <Option value=\"30000\">30s</Option>\n                <Option value=\"60000\">60s</Option>\n                <Option value=\"1800000\">30m</Option>\n                <Option value=\"7200000\">2h</Option>\n                <Option value=\"28800000\">8h</Option>\n                <Option value=\"-1\">unlimited</Option>\n            </Select>\n            </div>\n        )\n    }\n\n}\n\nclass LogProgress {\n    constructor(msgBox) {\n        this.msgBox = msgBox\n        this.logProgress = \"loaded\"\n    }\n\n    enter = (params) => {\n        const self = this\n        if (self.intervalTimer) {\n            return\n        }\n        this.mark = true\n        this.offset = -1\n        setTimeout(() => {\n            if (self.mark) {\n                self.loading = true\n                self.intervalTimer = setInterval(() => {\n                        if (self.logProgress === \"loading\") {\n                            return\n                        }\n                        self.logProgress = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n\n                        api.runScript({}, `load _mlsql_.\\`log/${self.offset}\\` where filePath=\"engine_log\" as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            if (jsonObj['value'].length > 0) {\n                                this.msgBox.appendLog(jsonObj['value'].join(\"\\n\"))\n                            }\n                            self.offset = jsonObj[\"offset\"]\n                            self.logProgress = \"loaded\"\n                        }, (str) => {\n                            self.logProgress = \"loaded\"\n                            try {\n                                this.msgBox.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n\n                        })\n\n                    }\n\n                    , 1000)\n            }\n\n        }, 1000)\n\n    }\n\n    exit = () => {\n        const self = this\n        self.loading = false\n        self.mark = false\n        if (self.intervalTimer) {\n            clearInterval(self.intervalTimer)\n            self.intervalTimer = null\n        }\n\n    }\n\n}\n\n\nclass JobProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`jobs/get/${jobName}\\` as wow;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    console.log(jsonObj)\n                                    const p = jsonObj.progress.currentJobIndex / jsonObj.progress.totalJob * 100\n                                    self.setState({\n                                        percent: p,\n                                        successPercent: p,\n                                        title: `Jobs: current/Total: ${jsonObj.progress.currentJobIndex}/${jsonObj.progress.totalJob })`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    self.setState({\n                                        percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                        successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                        title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if (self.taskCompute === \"loading\") {\n                            return\n                        }\n                        self.taskCompute = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute = \"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute = \"loaded\"\n                            try {\n                                self.parent.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 1000)\n            }\n\n        }, 1000)\n\n    }\n\n    exit = () => {\n        this.taskCompute = \"loaded\"\n        this.resourceCompute = \"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu isDir={node.isDir} parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.openExistsOrNewEditor({id: node.id, content: scriptFile.content, name: scriptFile.name})\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.toggleIsExpanded(nodeData.id, false)\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.toggleIsExpanded(nodeData.id, true)\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && (!params.fileName.endsWith(\".mlsql\") && !params.fileName.endsWith(\".nb\"))) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql or .nb\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n        this.isDir = this.props.isDir\n    }\n\n    confirmDelete = () => {\n        confirmAlert({\n            title: 'Confirm to delete',\n            message: 'Are you sure to do this ？',\n            buttons: [\n                {\n                    label: 'confirm',\n                    onClick: () => this.removeFile()\n                },\n                {\n                    label: 'cancel',\n                    onClick: () => {\n                    }\n                }\n            ],\n            closeOnEscape: true, closeOnClickOutside: false\n        });\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject() && this.isDir) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n    createFolder = () => {\n        if (this.isDir) {\n            return <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n        if (this.isCreateProject()) {\n            return <MenuItem icon=\"folder-new\" text=\"Create Project\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.confirmDelete()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    {this.createFolder()}\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table,Modal} from 'antd';\n\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded. \\n You can check the files with command: !hdfs -ls /tmp/upload; \"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough or backend fails\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend} from 'recharts';\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).format('DD,h:mm:ss')\n            dataForRender.push({\n                x: x,\n                inputRowsPerSecond: jsonItem.inputRowsPerSecond,\n                processedRowsPerSecond: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                numInputRows: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            dataForRender2: dataForRender2\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender}>\n                <Line type=\"monotone\" dataKey=\"inputRowsPerSecond\" stroke=\"#8884d8\"/>\n                <Line type=\"monotone\" dataKey=\"processedRowsPerSecond\" stroke=\"#82ca9d\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender2}>\n                <Line type=\"monotone\" dataKey=\"numInputRows\" stroke=\"#8884d8\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React from 'react';\nimport {Resizable} from \"re-resizable\";\n\n\nexport default class MLSQLHTML {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLHTML.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"html\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        return <MLSQLHTMLPanel data={item}></MLSQLHTMLPanel>\n    }\n\n}\n\nexport class MLSQLHTMLPanel extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {data: this.props.data}\n    }\n\n    refresh = (data) => {\n        this.setState({data: data})\n    }\n\n    render() {\n        return (\n            <div>\n                <Resizable defaultSize={{height: \"500px\"}}>\n                    <iframe\n                        sandbox=\"allow-scripts\"\n                        style={{width: '100%', height: \"100%\"}}\n                        srcDoc={this.state.data[\"html\"]}\n                        frameBorder=\"0\"\n                        scrolling=\"yes\"\n                        ref={(f) => {\n                            this.ifr = f;\n                        }}\n\n                    />\n                </Resizable>\n            </div>\n        );\n    }\n\n\n}","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\nimport MLSQLHTML from \"../dash/MLSQLHTML\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        if (MLSQLHTML.isShouldRender(data)) {\n            return MLSQLHTML.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import React from 'react'\nimport AceEditor from \"react-ace\";\n\n/**\n * onLoad(editor){\n  // Your editor options comes here\n   editor.on('change', (arg, activeEditor) => {\n      const aceEditor = activeEditor;\n      const newHeight = aceEditor.getSession().getScreenLength() *\n        (aceEditor.renderer.lineHeight + aceEditor.renderer.scrollBar.getWidth());\n       aceEditor.container.style.height = `${newHeight}px`;\n      aceEditor.resize();\n    });\n}\n */\nexport default class CodeBlock extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    originalEditor = () => {\n        return this.editor.editor\n    }\n\n    componentDidMount() {\n        this.originalEditor().container.style.lineHeight = 3\n    }\n\n    render() {\n        return (\n            <AceEditor\n                maxLines={Infinity}\n                width={\"100%\"}\n                ref={et => {\n                    this.editor = et\n                }}\n                value={this.props.initialCode}\n                mode=\"sql\"\n                theme=\"github\"\n\n            />\n        )\n    }\n}","import React from 'react'\nimport {Icon} from \"antd\";\n\nexport default class CommandGroup extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {isExecute: false, executeUnit: props.executeUnit}\n    }\n\n    evtExecute = () => {\n        this.setState({isExecute: true})\n        this.state.executeUnit.execute()\n    }\n\n    cancelExecute = () => {\n        this.setState({isExecute: false})\n    }\n\n    render() {\n        return <div>\n            {\n                this.state.isExecute ? <span onClick={this.cancelExecute}><Icon type=\"sync\" spin/></span> :\n                    <span onClick={this.evtExecute}><Icon type=\"caret-right\"/></span>\n            }\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport * as BackendConfig from \"../../../service/BackendConfig\";\nimport * as HTTP from \"../../../service/HTTPMethod\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport default class Engine {\n\n    /**\n     * @param {Number} timeout\n     */\n    constructor(timeout) {\n        this.timeout = timeout\n    }\n\n    /**\n     * @param {string} sql\n     * @param {(msg)=>{}} show_result\n     */\n    run = (sql, show_result, fail_result) => {\n        const jobName = uuidv4()\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n\n        api.newRunScript({\n            jobName: jobName,\n            timeout: this.timeout\n        }, sql, show_result, fail_result)\n\n\n    }\n\n    /**\n     * @param {string} code\n     * @param {string} scriptId\n     * @param {(msg)=>{}} show_result\n     */\n    saveFile = (code, scriptId, show_result) => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        api.request(HTTP.Method.POST, {\n            id: scriptId,\n            content: code\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    show_result(wow[\"msg\"])\n                }, (jsonErr) => {\n                    show_result(jsonErr)\n                })\n            } else {\n                show_result(\"saved\")\n            }\n\n        }, (fail) => {\n            show_result(fail)\n        })\n    }\n}","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table, Modal} from 'antd';\n\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class DataTable extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const [keys, rows] = this.parseData(props.data || [], props.config || {})\n        this.state = {columns: keys, rows: rows, view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data, config) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (config && config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    parseData = (data, config) => {\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n        return [keys, rows]\n    }\n\n    refresh = (data, config) => {\n        // e.g. [{\"a\":1}]\n        const [keys, rows] = this.parseData(data, config)\n        this.setState({columns: keys, rows: rows, config: config})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={self.state.columns}\n                    dataSource={self.state.rows}/>\n                <Modal\n                    title={\"View\"}\n                    visible={self.state.view.enabled}\n                    onCancel={self.disablePreview}\n                    onOk={self.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={self.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport DataTable from \"./DataTable\";\nimport MLSQLHTML, {MLSQLHTMLPanel} from \"../dash/MLSQLHTML\";\nimport AceEditor from \"react-ace\";\n\nexport default class DisplayGroup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {errorMsg: \"\"}\n    }\n\n\n    refresh = (displayData) => {\n        this.setState({displayData: displayData, errorMsg: \"\"})\n        if (this.displayTableRef) {\n            this.displayTableRef.refresh(this.state.displayData, {})\n        }\n\n        if (this.displayDashRef) {\n            const item = this.state.displayData[0]\n            this.displayDashRef.refresh(item)\n        }\n\n    }\n\n    fail = (msg) => {\n        this.setState({errorMsg: msg})\n        if (this.editor) {\n            this.editor.editor.setValue(msg)\n        }\n    }\n\n    displayDash = () => {\n        if (this.state.displayData && MLSQLHTML.isShouldRender(this.state.displayData)) {\n            const item = this.state.displayData[0]\n            return <MLSQLHTMLPanel data={item} ref={(et) => this.displayDashRef = et}></MLSQLHTMLPanel>\n        } else {\n            return <div></div>\n        }\n\n    }\n\n    displayError = () => {\n        if (this.state.errorMsg) {\n            return <div><AceEditor\n                maxLines={Infinity}\n                width={\"100%\"}\n                ref={et => {\n                    this.editor = et\n                }}\n                value={this.state.errorMsg}\n                mode=\"text\"\n                theme=\"ace/theme/textmate\"\n\n            /></div>\n        } else {\n            return <div></div>\n        }\n    }\n\n    displayTable = () => {\n        if (this.state.displayData) {\n            return <DataTable data={this.state.displayData} ref={(et) => this.displayTableRef = et}></DataTable>\n        } else {\n            return <div></div>\n        }\n\n    }\n\n    render() {\n        return <div>\n            {this.displayError()}\n            {\n                this.displayTable()\n            }{this.displayDash()}</div>\n\n    }\n}","import React from 'react'\nimport CodeBlock from \"./CodeBlock\";\nimport CommandGroup from \"./CommandGroup\";\nimport Engine from \"./service/Engine\";\nimport DisplayGroup from \"./DisplayGroup\";\n\n\nexport default class ExecuteUnit extends React.Component {\n    constructor(props) {\n        super(props)\n        this.notebook = props.parent\n    }\n\n    execute = () => {\n        const sql = this.codeBlock.originalEditor().getValue()\n        const engine = new Engine(5 * 60 * 1000)\n        engine.run(sql, (msg) => {\n            this.displayGroup.refresh(msg)\n            this.commandGroup.setState({isExecute: false})\n            this.notebook.nextExecuteUnit()\n        }, msg => {\n            this.displayGroup.fail(msg)\n            this.commandGroup.setState({isExecute: false})\n        })\n    }\n\n    codeBlockIsEmpty = () => {\n        return this.getCodeStr() === \"\"\n    }\n\n    getCodeStr = () => {\n        return this.codeBlock.originalEditor().getValue()\n    }\n\n\n    render() {\n        return <div>\n            <CodeBlock initialCode={this.props.initialCode} ref={et => {\n                this.codeBlock = et\n            }} executeUnit={this}/>\n            <CommandGroup ref={et => {\n                this.commandGroup = et\n            }} executeUnit={this}/>\n            <DisplayGroup ref={et => this.displayGroup = et}/>\n\n        </div>\n    }\n}\n\n","import React from 'react'\nimport ExecuteUnit from \"./ExecuteUnit\";\nimport Engine from \"./service/Engine\";\n\nconst CODE_SPLITTER = \"set notebooksplitter='notebooksplitter';\"\n\nexport default class NodeBook extends React.Component {\n    constructor(props) {\n        super(props)\n        this.executeUnitRefs = []\n        this.executeUnits = [this.createNewExecuteUnit(\"\")]\n        this.state = {executeUnits: this.executeUnits}\n        this.engine = new Engine(5 * 60 * 1000)\n    }\n\n    createNewExecuteUnit = (initialCode) => {\n        return <ExecuteUnit parent={this} initialCode={initialCode} ref={et => this.addRef(et)}/>\n    }\n\n    addRef = (instance) => {\n        if (instance) {\n            this.executeUnitRefs.push(instance)\n        }\n    }\n\n    nextExecuteUnit = () => {\n        const isLastEmpty = () => {\n            return this.executeUnitRefs.slice(-1)[0].codeBlockIsEmpty()\n        }\n        if (!isLastEmpty()) {\n            this.executeUnits.push(this.createNewExecuteUnit())\n            this.setState({executeUnits: this.executeUnits})\n        }\n        this.saveNoteBook()\n    }\n\n    saveNoteBook = () => {\n        const value = this.executeUnitRefs.map((instance) => {\n            return instance.getCodeStr()\n        }).join(CODE_SPLITTER)\n\n        this.engine.saveFile(value, this.scriptId, (msg) => {\n        })\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    text = (value, scriptId) => {\n        this.scriptId = scriptId\n        this.initialCode = value\n        if (value && value !== \"undefined\") {\n            this.executeUnitRefs = []\n            this.executeUnits = this.initialCode.split(CODE_SPLITTER).map((initialCode) => {\n                return this.createNewExecuteUnit(initialCode)\n            })\n            this.setState({executeUnits: this.executeUnits})\n        }\n    }\n\n    render() {\n        return <div>\n            {\n                this.state.executeUnits\n            }\n        </div>\n    }\n}","import * as React from \"react\"\nimport {Tabs} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport ExecuteUnit from \"../notebook/ExecuteUnit\";\nimport NodeBook from \"../notebook/NoteBook\";\n\nconst TabPane = Tabs.TabPane;\n\nexport class TabEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parent = props.parent\n        this.myRefs = []\n        this.newTabIndex = 0;\n        const panes = [\n            {\n                title: 'MLSQL 1',\n                content: <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: \"newTab0\"})\n                }} activeKey='newTab0'/>,\n                key: 'newTab0'\n            },\n        ];\n        this.state = {\n            activeKey: panes[0].key,\n            panes,\n        };\n        this.newTabIndex++\n    }\n\n    pushRef = (ref) => {\n        this.myRefs.push(ref)\n    }\n\n    getCurrentEditor = () => {\n        const activeKey = this.state.activeKey;\n        let currentItem = null\n        this.myRefs.forEach(item => {\n            if (item.activeKey === activeKey) {\n                currentItem = item\n            }\n        })\n        return currentItem\n    }\n\n    onChange = (activeKey) => {\n\n        let currentItem = null\n\n        this.state.panes.forEach(item => {\n            if (item.key === activeKey) {\n                currentItem = item\n            }\n        })\n\n        if (currentItem && !currentItem.title.endsWith(\".nb\")) {\n            this.parent.setState({displayEditor: \"normal\"})\n        } else {\n            this.parent.setState({displayEditor: \"notebook\"})\n        }\n\n        this.setState({activeKey});\n    }\n\n    onEdit = (targetKey, action) => {\n        this[action](targetKey);\n    }\n\n    addFull = (tabName, callback) => {\n        const editor = (activeKey) => {\n            if (tabName.endsWith(\".mlsql\")) {\n                return <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            } else {\n                return <NodeBook parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            }\n        }\n\n        const panes = this.state.panes;\n        const activeKey = `newTab${this.newTabIndex++}`;\n        panes.push({\n            title: tabName || 'MLSQL ' + this.newTabIndex,\n            content: editor(activeKey),\n            key: activeKey\n        });\n        this.setState({panes, activeKey});\n    }\n\n    add = () => {\n        this.addFull()\n    }\n\n    getPaneIndexByActiveKey = (targetKey) => {\n        let lastIndex;\n        this.state.panes.forEach((pane, i) => {\n            if (pane.key === targetKey) {\n                lastIndex = i - 1;\n            }\n        });\n        return lastIndex\n    }\n\n    remove = (targetKey) => {\n        let activeKey = this.state.activeKey;\n        let lastIndex = this.getPaneIndexByActiveKey(targetKey)\n\n        const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n        if (panes.length && activeKey === targetKey) {\n            if (lastIndex >= 0) {\n                activeKey = panes[lastIndex].key;\n            } else {\n                activeKey = panes[0].key;\n            }\n        }\n        const editorRefList = this.myRefs.filter((item) => item.activeKey === targetKey)\n        this.myRefs = this.myRefs.filter((item) => item.activeKey !== targetKey)\n        this.parent.closeEditor(editorRefList[0])\n\n        this.setState({panes, activeKey});\n    }\n\n    render() {\n        return (\n            <Tabs\n                onChange={this.onChange}\n                activeKey={this.state.activeKey}\n                type=\"editable-card\"\n                onEdit={this.onEdit}\n            >\n                {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}\n                                                       closable={pane.closable}>{pane.content}</TabPane>)}\n            </Tabs>\n        );\n    }\n}","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n        this.itemData = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    setData = (k, v) => {\n        this.itemData[k] = v\n    }\n\n    getData = (k) => {\n        return this.itemData[k]\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        this.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        this.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        this.setData(\"processType\", processType);\n        this.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        this.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        this.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        this.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        this.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        this.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.getCurrentEditor().ref.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    etDoubleClick = (evt) => {\n        this.onDragStart(evt)\n        this.queryApp.getCurrentEditor().ref.etOver(evt)\n    }\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Load\n                                        data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"} onDoubleClick={this.etDoubleClick}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\nimport {TabEditor} from \"./editor/TabEditor\";\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\nimport {Resizable} from \"re-resizable\";\nimport ExecuteUnit from \"./notebook/ExecuteUnit\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\", displayEditor: \"normal\"}\n        this.directoryTree = React.createRef()\n        this.editorGroup = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n        this.etRef = React.createRef()\n\n        // key is script id\n        // value is editor ref\n        this.fileToEditorMap = {}\n\n    }\n\n    openExistsOrNewEditor = (script) => {\n        const self = this\n\n        if (this.fileToEditorMap.hasOwnProperty(script.id)) {\n            const editorRef = this.fileToEditorMap[script.id]\n            editorRef.ref.text(script.content, script.id)\n            this.editorGroup.current.onChange(editorRef.activeKey)\n\n        } else {\n            this.editorGroup.current.addFull(script.name, (editorRef) => {\n                editorRef.ref.text(script.content, script.id)\n                self.fileToEditorMap[script.id] = editorRef\n            })\n\n        }\n\n        if (script.name.endsWith(\".nb\")) {\n            self.setState({displayEditor: \"notebook\"})\n        } else {\n            self.setState({displayEditor: \"normal\"})\n        }\n    }\n\n    closeEditor = (editorRef) => {\n        const tempFileToEditorMap = Object.keys(this.fileToEditorMap).filter(key => {\n            return this.fileToEditorMap[key].activeKey !== editorRef.activeKey\n        }).reduce((pre, key) => {\n            pre[key] = this.fileToEditorMap[key]\n            return pre\n        }, {})\n        this.fileToEditorMap = tempFileToEditorMap\n    }\n\n    getCurrentEditor = () => {\n        return this.editorGroup.current.getCurrentEditor()\n    }\n\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    tableAndDash = () => {\n        if (this.state.displayEditor !== \"notebook\") {\n            return <div>\n                <Resizable defaultSize={{height: \"300px\"}} onResize={() => {\n                    this.messageBox.current.editor.resize();\n                }}>\n                    <AceEditor\n                        height={\"100%\"}\n                        width={\"100%\"}\n                        ref={this.messageBox}\n                        mode=\"text\"\n                        theme=\"github\"\n                        name=\"message_box\"\n                    />\n                </Resizable>\n\n                <div>\n                    <MLSQLDash ref={this.dash} parent={this}/>\n                </div>\n                <div className=\"mlsql-query-display\">\n                    <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n            </div>\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <div style={{marginBottom: \"10px\"}}>\n                        <MLSQLETQuick ref={this.etRef} parent={this}/>\n                    </div>\n                    <TabEditor ref={this.editorGroup} parent={this}/>\n                    {this.tableAndDash()}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_TEAM = \"team\"\nexport const VIEW_DEMO = \"demo\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n\n\nexport const TEAM_VIEW_BASIC = \"team_view_basic\"\nexport const SETUP_VIEW_BASIC = \"setup_view_basic\"\nexport const CLUSTER_VIEW_BASIC = \"cluster_view_basic\"\nexport const AUTH_VIEW_BASIC = \"auth_view_basic\"\nexport const SETTING_VIEW_BASIC = \"setting_view_basic\"\n","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"300px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[0], -1)\n            } catch (e) {\n\n            }\n\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=200 where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`...xml..file...path\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Icon, Input, Button, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHECK_TEAM_NAME, CREATE_TEAM} from \"../../service/BackendConfig\";\n\n\nclass CreateTeamForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.teamCards = props.parent\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CREATE_TEAM)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create team success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create team fail\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create team fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    teamNameCheck = (rule, value, callback) => {\n        if (value) {\n            const api = new MLSQLAPI(CHECK_TEAM_NAME)\n            api.request2({name: value}, (resJson) => {\n                if (!resJson[\"msg\"]) {\n                    callback(`${value} have been taken. Try another`);\n                }\n                else callback()\n            }, (failStr) => {\n                callback('server error:' + failStr);\n            })\n        } else {\n            callback()\n        }\n\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the team name!'},\n                            {validator: this.teamNameCheck}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>} placeholder=\"Team name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLCreateTeamForm = Form.create({name: 'create_team'})(CreateTeamForm);","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {\n    LIST_ROLES_MEMBER,\n    LIST_ROLES_TABLE,\n    LIST_TEAMS_MEMBER,\n    LIST_TEAMS_ROLE, LIST_TEAMS_TABLES, REMOVE_ROLES_MEMBER, REMOVE_ROLES_TABLE,\n    REMOVE_TEAMS_MEMBER,\n    REMOVE_TEAMS_ROLE, REMOVE_TEAMS_TABLE, RUN_SCRIPT\n} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchTeams(apiUrl, self, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByTeam(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_MEMBER)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchRoles(parent, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_ROLE)\n        api.request2({teamName: teamName}, resJson => {\n            parent.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTablesByRole(parent, teamName, roleName, stateKey) {\n        const api = new MLSQLAPI(LIST_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleMember(parent, teamName, roleName, userName, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName, userName: userName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByRole(parent, teamName, roleName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRole(parent, teamName, roleName) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_ROLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTeamMember(parent, teamName, userName, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_MEMBER)\n        api.request2({teamName: teamName, userName: userName}, resJson => {\n            callback()\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static teamInvite(self, apiUrl, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTables(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_TEAMS_TABLES)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTable(self, teamName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_TABLE)\n        api.request2({teamName: teamName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTableTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/tableTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchSourceTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/sourceTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchOperateTypes(self, stateKey) {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/operateTypes\\` as output;`, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleTable(self, teamName, roleName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ACCEPT_TEAMS_MEMBER,\n    LIST_TEAMS,\n    LIST_TEAMS_INVITED,\n    LIST_TEAMS_MEMBER,\n    REFUSE_TEAMS_MEMBER\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nexport class Teams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n\n    accept = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, ACCEPT_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n            this.teamCards.teamYourJoinRef.current.refresh()\n        })\n    }\n\n    refuse = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, REFUSE_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n        })\n    }\n\n    refresh = () => {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n    renderCommand = (value) => {\n        this.teamName = value\n        if (this.apiUrl === LIST_TEAMS_INVITED) {\n            return [<a onClick={this.accept}>accept</a>, <a onClick={this.refuse}>refuse</a>]\n        }\n        return []\n    }\n\n\n    render() {\n        return (\n            <div>\n                <List\n                    dataSource={this.state.data}\n                    renderItem={item => (\n                        <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                            <List.Item.Meta\n                                title={<a href=\"#\">{item.name}</a>}\n                            />\n                        </List.Item>\n                    )}\n                >\n                </List>\n            </div>\n        );\n    }\n}\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass InviteMember extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_MEMBER)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.setState({refresh: true})\n                        message.success(\"Invite success\", 3)\n                    } else {\n                        message.warning(\"Invite fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    self.teamCards.setState({refresh: true})\n                    message.error(\"Invite fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userNames', {\n                        rules: [\n                            {required: true, message: 'Please input the user name you want invite'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLInviteMember = Form.create({name: 'create_team'})(InviteMember);","import {Select} from \"antd\";\nimport * as React from \"react\";\nimport TeamService from \"./Service\";\n\nexport class Views {\n    static renderTeamsForSelect = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static onTeamSelect = (self, teamName) => {\n        self.currentTeamName = teamName\n        TeamService.fetchRoles(self, teamName, \"roles\")\n    }\n\n\n    static renderTeams = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    static renderRoles = (self) => {\n        return self.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderMembers = (self) => {\n        return self.state.members.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderBackends = (self) => {\n        return self.state.backends.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n    s\n    static teamSelect = (self, onChangeCallback) => {\n        return <Select\n            placeholder=\"Team name\"\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderTeams(self)}\n        </Select>\n    }\n\n    static roleSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"role name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderRoles(self)}\n        </Select>\n    }\n\n    static backendSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"backend name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderBackends(self)}\n        </Select>\n    }\n\n    static memberSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"member name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderMembers(self)}\n        </Select>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS_MEMBER} from \"../../service/BackendConfig\";\n\n\nexport class TeamMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchMembersByTeam(this, member, \"members\")\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            Service.removeTeamMember(self, self.currentTeam, userName, () => {\n                Service.fetchMembersByTeam(self, self.currentTeam, \"members\")\n            })\n        }\n        }>remove</a>]\n\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderMembers()}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass AddRoleForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleNames', {\n                        rules: [\n                            {required: true, message: 'Please input the role name you want to create'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"role\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddRoleForTeam = Form.create({name: 'add_role_for_team'})(AddRoleForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamRoles extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    refresh = () => {\n        if(this.currentTeam){\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n    }\n\n    renderCommand = (roleName) => {\n        return [<a onClick={() => {\n            Service.removeRole(this, this.currentTeam, roleName)\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.roles}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_MEMBER,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\n\n\nclass AddMemberForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_MEMBER)\n                api.request2(params, (resJson) => {\n                    console.log(resJson)\n                    console.log(\"----\")\n                    if (resJson[\"msg\"] === \"success\") {\n                        if (self.teamCards.roleMembersRef) {\n                            self.teamCards.roleMembersRef.current.refresh()\n                        }\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Views.onTeamSelect(this, teamName)\n        Service.fetchMembersByTeam(this, teamName, \"members\")\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            self.onTeamSelect(teamName)\n                        })\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name'}\n                        ],\n                    })(\n                        Views.roleSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userName', {\n                        rules: [\n                            {required: true, message: 'Please input the member name'}\n                        ],\n                    })(\n                        Views.memberSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddMemberForRole = Form.create({name: 'add_member_for_role'})(AddMemberForRole);","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, ADD_TEAMS_TABLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            tableTypes: [],\n            sourceTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n        Service.fetchTableTypes(this, \"tableTypes\")\n        Service.fetchSourceTypes(this, \"sourceTypes\")\n\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTableTypes = () => {\n        return this.state.tableTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n    renderSourceTypes = () => {\n        return this.state.sourceTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the table name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"table name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('db', {\n                        rules: [],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"db name\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('tableType', {\n                        rules: [\n                            {required: true, message: 'Please input the table type you want to create'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"table Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTableTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('sourceType', {\n                        rules: [],\n                    })(\n                        <Select\n                            placeholder=\"source Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderSourceTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForTeam = Form.create({name: 'add_table_for_team'})(AddTableForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchTables(this, member, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam) {\n            Service.fetchTables(this, this.currentTeam, \"tables\")\n        }\n    }\n\n    renderCommand = (tableId) => {\n        return [<a onClick={(evt) => {\n            evt.preventDefault()\n            Service.removeTable(this, this.currentTeam, tableId, null, () => {\n                Service.fetchTables(this, this.currentTeam, \"tables\")\n            })\n\n        }\n        }>remove</a>]\n    }\n\n    renderDB = (item) => {\n        if (item.db !== \"undefined\" && item.db) {\n            return item.db\n        } else return \"default\"\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={`${item.tableType}:${this.renderDB(item)}:${item.name}`}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    onRoleSelect = (roleName) => {\n        this.currentRoleName = roleName\n        Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n    }\n\n    refresh = () => {\n        if (this.currentTeamName && this.currentRoleName) {\n            Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n        }\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeamName && this.currentRoleName) {\n                Service.removeRoleMember(this, this.currentTeamName, this.currentRoleName, userName, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={item.name}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })}\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.roleSelect(self, self.onRoleSelect, \"default\")}\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderMembers()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {MLSQLCreateTeamForm} from \"./CreateTeam\";\nimport {Teams} from \"./Teams\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS, LIST_TEAMS_INVITED, LIST_TEAMS_JOINED} from \"../../service/BackendConfig\";\nimport {InviteMember, MLSQLInviteMember} from \"./InviteMember\";\nimport {TeamMembers} from \"./TeamMembers\";\nimport {MLSQLAddRoleForTeam} from \"./AddRoleForTeam\";\nimport {TeamRoles} from \"./TeamRoles\";\n\nimport {MLSQLAddMemberForRole} from \"./AddMemberForRole\";\nimport {RoleMembers} from \"./RoleMembers\";\n\n\nexport class TeamCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n        this.teamRolesRef = React.createRef()\n        this.teamMembersRef = React.createRef()\n        this.teamsRef = React.createRef()\n        this.roleTablesRef = React.createRef()\n        this.roleMembersRef = React.createRef()\n        this.teamYourJoinRef = React.createRef()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"Team belongs to you\" bordered={false}><Teams parent={this} ref={this.teamsRef}\n                                                                              apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Create new team\" bordered={false}>\n                        <MLSQLCreateTeamForm parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Team\" bordered={false}><TeamMembers ref={this.teamMembersRef}\n                                                                                     parent={this} apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Invite members\" bordered={false}>\n                        <MLSQLInviteMember parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Team you join\" bordered={false}><Teams parent={this} ref={this.teamYourJoinRef}\n                                                                        apiUrl={LIST_TEAMS_JOINED}/></Card>\n                </Col>\n\n                <Col span={12}>\n                    <Card title=\"Team inviting you\" bordered={false}><Teams parent={this} apiUrl={LIST_TEAMS_INVITED}/></Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n\n                <Col span={16}>\n                    <Card title=\"View Roles By Team\" bordered={false}><TeamRoles ref={this.teamRolesRef}\n                                                                                 parent={this} apiUrl={ADD_TEAMS_ROLE}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Add role to Team\" bordered={false}>\n                        <MLSQLAddRoleForTeam parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Role\" bordered={false}>\n                        <RoleMembers parent={this} ref={this.roleMembersRef}/>\n                    </Card>\n                </Col>\n\n\n                <Col span={8}>\n                    <Card title=\"Add Member to Role\" bordered={false}>\n                        <MLSQLAddMemberForRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {CLUSTER_MANAGER, LIST_BACKENDS_BY_TEAM} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchBackends(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/list\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static checkBackendName(self, name, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: name}, {action: \"/backend/name/check\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendsByNames(self, names, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({names: names}, {action: \"/backend/list/names\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendNamesByTeam(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_BACKENDS_BY_TEAM)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static addBackend(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/add\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeBackend(self, backendName, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: backendName}, {action: \"/backend/remove\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static updateBackendTags(self, backendName, tags, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({tags: tags, name: backendName}, {\n            action: \"/backend/tags/update\",\n            merge: \"append\"\n        })\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport Service from \"./remote/Service\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {Views as TeamViews} from \"../team/remote/Views\"\nimport TeamService from \"../team/remote/Service\"\nimport CluserService from \"./remote/Service\"\nimport {Row, Col, Button} from \"antd\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\nexport class ClusterBackends extends React.Component {\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.dataViewer = React.createRef()\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    renderBackends = () => {\n        return <MLSQLQueryDisplay ref={this.dataViewer} parent={this}/>\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        const tag = self.currentTeamName + \"_\" + roleName\n        Service.fetchBackends(this, {\n            tag: tag\n        }, \"backends\", () => {\n            self.dataViewer.current.update(self.state.backends.map(item => {\n                const {ecsResourcePoolId, id, tags, ...newitem} = item;\n                newitem[\"command\"] = <Button onClick={(evt) => {\n                    CluserService.removeBackend(self, newitem.name, null, () => {\n                        self.onRoleSelect(roleName)\n                    })\n                }}>remove</Button>\n                return newitem\n            }), {})\n        })\n    }\n\n    render() {\n        const self = this\n        return <div>\n            <Row>\n                <Col>\n                    {TeamViews.teamSelect(self, (teamName) => {\n                        TeamViews.onTeamSelect(self, teamName)\n                    })}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {TeamViews.roleSelect(self, self.onRoleSelect)}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {this.renderBackends()}\n                </Col>\n            </Row>\n        </div>\n\n    }\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddClusterBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, name, url} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n                ClusterService.addBackend(self, {\n                    name: name,\n                    url: url,\n                    tag: tag,\n                    teamName: teamName\n                }, null, () => {\n                    message.success(\"Add backend success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    checkBackendName = (rule, value, callback) => {\n        ClusterService.checkBackendName(this, value, null, (resJson) => {\n            if (resJson[\"msg\"]) {\n                callback(\"Name have been taken. Try another.\")\n            } else {\n                callback()\n            }\n        })\n\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the backend name'},\n                            {validator: this.checkBackendName},\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"backend name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('url', {\n                        rules: [\n                            {required: true, message: 'Please input the url name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddClusterBackend = Form.create({name: 'add_backend_for_cluster'})(AddClusterBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddTagToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const self = this\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n        ClusterService.fetchBackends(this, \"backends\", () => {\n            const tagsWithDuplicate = self.state.backends.map(item => {\n                return item.tags\n            }).reduce((items, item) => {\n                items.push(...item)\n                return items\n            }, [])\n            const tags = new Set(tagsWithDuplicate)\n            self.setState({tags: [...tags]})\n        })\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTagToRole = Form.create({name: 'add_tag_to_role'})(AddTagToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureDefaultBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"].includes(params.tag)) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            }else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureDefaultBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass AddExistClusterBackendToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, backendName} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n\n                ClusterService.updateBackendTags(self, backendName, tag, null, () => {\n                    message.success(\"Update backend tags success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(this, (teamName) => {\n                            ClusterService.fetchBackendNamesByTeam(this, teamName, null, (backendNames) => {\n                                ClusterService.fetchBackendsByNames(this, backendNames.map(item => {\n                                    return item.name\n                                }).join(\",\"), \"backends\", () => {\n                                    console.log(this.state.backends)\n                                })\n                            })\n                            Views.onTeamSelect(this, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(this, (roleName) => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('backendName', {\n                        rules: [{required: true, message: 'Please input the backend name'}],\n                    })(\n                        Views.backendSelect(this, (backend) => {\n\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Confirm\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddExistClusterBackendToRole = Form.create({name: 'AddExistClusterBackendToRole'})(AddExistClusterBackendToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED, USER_SCHEDULER_TAGS_UPDATE,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureSchedulerBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag, isScheduler: true}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"].includes(params.tag)) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            } else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureSchedulerDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureSchedulerBackend);","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {ClusterBackends} from \"./ClusterBackends\";\nimport {MLSQLAddClusterBackend} from \"./AddClusterBackend\";\nimport {MLSQLAddTagToRole} from \"./AddTagToRole\";\nimport {MLSQLConfigureDefaultBackend} from \"./ConfigureDefaultBackend\";\nimport {MLSQLAddExistClusterBackendToRole} from \"./AddExistClusterBackendToRole\";\nimport {MLSQLConfigureSchedulerDefaultBackend} from \"./ConfigureSchedulerBackend\";\n\n\nexport class ClusterCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.backendsRef = React.createRef()\n        this.state = {}\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"Set default backend tag\" bordered={false}>\n                        <MLSQLConfigureDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Set default scheduler backend tag\" bordered={false}>\n                        <MLSQLConfigureSchedulerDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Add Backend\" bordered={false}>\n                        <MLSQLAddClusterBackend parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Your Backends\" bordered={false}>\n                        <ClusterBackends parent={this} ref={this.backendsRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Add role to backend\" bordered={false}>\n                        <MLSQLAddExistClusterBackendToRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    onRoleSelect = (roleName) => {\n        this.currentRole = roleName\n        Service.fetchTablesByRole(this, this.currentTeam, roleName, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam && this.currentRole) {\n            Service.fetchTablesByRole(this, this.currentTeam, this.currentRole, \"tables\")\n        }\n    }\n\n    renderCommand = (tableNameId) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeam && this.currentRole) {\n                Service.removeRoleTable(this, this.currentTeam, this.currentRole, tableNameId, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={item.tableType + \":\" + this.sourceType(item.sourceType, item.tableType) + \":\" + item.name + \":\" + item.operateType}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.selectTeam}\n                        >\n                            {Views.renderTeamsForSelect(this)}\n                        </Select>\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onRoleSelect}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderTables()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_TABLE,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.authCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tables: [],\n            operateTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.authCards.roleTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Service.fetchRoles(this, teamName, \"roles\")\n        Service.fetchTables(this, teamName, \"tables\")\n        Service.fetchOperateTypes(this, \"operateTypes\")\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return this.state.tables.map(item => {\n            return <Select.Option key={item.name}\n                                  value={item.id}>{item.tableType}:{this.sourceType(item.sourceType, item.tableType)}:{item.db}.{item.name}</Select.Option>\n        })\n    }\n\n    renderOperateTypes = () => {\n        return this.state.operateTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name '}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tableName', {\n                        rules: [\n                            {required: true, message: 'Please input the tableName name '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"table name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTables()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('operateType', {\n                        rules: [\n                            {required: true, message: 'Please input the operateType to Role '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Operate type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderOperateTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForRole = Form.create({name: 'add_table_for_role'})(AddTableForRole);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLAddTableForTeam} from \"../team/AddTableForTeam\";\n\nimport {RoleTables} from \"../team/RoleTables\";\nimport {MLSQLAddTableForRole} from \"../team/AddTableForRole\";\n\n\nexport class AuthCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Add Table to Team\" bordered={false}>\n                        <MLSQLAddTableForTeam parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add table to role\" bordered={false}>\n                        <MLSQLAddTableForRole parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"View tables By Role\" bordered={false}>\n                        <RoleTables parent={this} ref={this.roleTablesRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List, notification, Card, Col, Row} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLCreateTeamForm} from \"../team/CreateTeam\";\nimport {MLSQLAddRoleForTeam} from \"../team/AddRoleForTeam\";\nimport {MLSQLAddMemberForRole} from \"../team/AddMemberForRole\";\nimport {MLSQLAddClusterBackend} from \"../cluster/AddClusterBackend\";\nimport {MLSQLConfigureDefaultBackend} from \"../cluster/ConfigureDefaultBackend\";\nimport {RoleMembers} from \"../team/RoleMembers\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class Setup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.steps = this.generateSteps()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    generateSteps() {\n        const self = this\n        return [{\n            title: 'Create Team',\n            content: () => {\n                return <Card title={\"input your team name\"} bordered={true}>\n                    <MLSQLCreateTeamForm parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Create Role',\n            content: () => {\n                return <Card title={\"Add new role to the team you have created\"} bordered={true}>\n                    <MLSQLAddRoleForTeam parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Invite user to Role',\n            content: () => {\n                return <Card title={\"Add member to the role you have created\"} bordered={true}>\n                    <MLSQLAddMemberForRole parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Create Backend',\n            content: () => {\n                return <Card title={\"Add the cluster information you have setup\"} bordered={true}>\n                    <MLSQLAddClusterBackend parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Set default backend',\n            content: () => {\n                return <Card title={\"Configure the default backend you want use\"} bordered={true}>\n                    <MLSQLConfigureDefaultBackend parent={self}/>\n                </Card>\n            }\n        },\n            {\n                title: 'Congratulation!',\n                content: () => {\n                    return <Card title={\"All Done\"} bordered={true}>\n                        Please go to Console\n                    </Card>\n                }\n            }\n        ];\n    }\n\n    componentDidMount() {\n\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\" style={{\"margin-top\": \"30px\"}}>\n                    <Row gutter={24}>\n                        <Col span={8}>\n\n\n                        </Col>\n                        <Col span={8}>\n                            {this.steps[current].content()}\n\n                        </Col>\n                    </Row>\n\n                </div>\n\n            </div>\n        );\n    }\n\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHNAGE_PASSWORD} from \"../../service/BackendConfig\";\n\nclass ChangePassword extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CHNAGE_PASSWORD)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Success\", 3)\n                    } else {\n                        message.warning(\"Fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {required: true, message: 'Please input the original password'}\n                        ],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"old password\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('newPassword', {\n                        rules: [{required: true, message: 'Please input the new password'}],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"new password\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Apply\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLChangePassword = Form.create({name: 'change_password'})(ChangePassword);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLChangePassword} from \"../team/MLSQLChangePassword\";\n\nexport class SettingCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Change password\" bordered={false}>\n                        <MLSQLChangePassword parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {\n    AUTH_VIEW_BASIC,\n    CLUSTER_VIEW_BASIC,\n    SETTING_VIEW_BASIC,\n    SETUP_VIEW_BASIC,\n    TEAM_VIEW_BASIC\n} from \"../../common/ViewConst\";\nimport {TeamCards} from \"./TeamCards\";\nimport {ClusterCards} from \"../cluster/ClusterCards\";\nimport {AuthCards} from \"../auth/AuthCards\";\nimport Setup from \"../demo/Setup\";\nimport {SettingCards} from \"./SettingCards\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.app = props.parent\n        this.state = {\n            currentView: SETUP_VIEW_BASIC\n        }\n\n\n    }\n\n    switchToBasic = () => {\n        this.setState({currentView: TEAM_VIEW_BASIC})\n    }\n\n    switchToSetup = () => {\n        this.setState({currentView: SETUP_VIEW_BASIC})\n    }\n\n    switchToCluster = () => {\n        this.setState({currentView: CLUSTER_VIEW_BASIC})\n    }\n\n    switchToAuth = () => {\n        this.setState({currentView: AUTH_VIEW_BASIC})\n    }\n\n    switchToSetting = () => {\n        this.setState({currentView: SETTING_VIEW_BASIC})\n    }\n\n    renderView = () => {\n        if (this.state.currentView === SETUP_VIEW_BASIC) return <Setup/>\n        if (this.state.currentView === TEAM_VIEW_BASIC) return <TeamCards/>\n        if (this.state.currentView === CLUSTER_VIEW_BASIC) return <ClusterCards/>\n        if (this.state.currentView === AUTH_VIEW_BASIC) return <AuthCards/>\n        if (this.state.currentView === SETTING_VIEW_BASIC) return <SettingCards/>\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToSetup}>Setup</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBasic}>Team</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToCluster}>Cluster</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block onClick={this.switchToAuth}>Auth</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block onClick={this.switchToSetting}>Setting</Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./team/MainPage\";\nimport {TEAM_VIEW_BASIC} from \"../common/ViewConst\";\n\nexport class MLSQLManagerApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage parent={this}/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"../common/ViewConst\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\nimport {MLSQLManagerApp} from \"../components/MLSQLManagerApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n\n    }\n\n    componentDidMount() {\n        const self = this\n        this.auth.userName((name) => {\n            self.setState({userName: name})\n        })\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.auth.isLogin() && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_TEAM) return <MLSQLManagerApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n        const self = this\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            }, () => self.app.updateLoginoutStatus())\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToTeam = () => {\n        this.setState({currentView: VIEW_TEAM})\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Team\" onClick={this.switchToTeam}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\"\n                             href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\"><img\n                        src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}