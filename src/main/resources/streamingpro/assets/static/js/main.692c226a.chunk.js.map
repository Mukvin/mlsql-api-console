{"version":3,"sources":["serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","common/tool.js","components/et/ButtonToCommand.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/query/MLSQLDash.js","components/editor/TabEditor.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","components/team/CreateTeam.js","components/team/remote/Service.js","components/team/Teams.js","components/team/InviteMember.js","components/team/remote/Views.js","components/team/TeamMembers.js","components/team/AddRoleForTeam.js","components/team/TeamRoles.js","components/team/AddMemberForRole.js","components/team/AddTableForTeam.js","components/team/TeamTables.js","components/team/RoleMembers.js","components/team/TeamCards.js","components/cluster/remote/Service.js","components/cluster/ClusterBackends.js","components/cluster/AddClusterBackend.js","components/cluster/AddTagToRole.js","components/cluster/ConfigureDefaultBackend.js","components/cluster/AddExistClusterBackendToRole.js","components/cluster/ClusterCards.js","components/team/RoleTables.js","components/team/AddTableForRole.js","components/auth/AuthCards.js","components/demo/Setup.js","components/team/MLSQLChangePassword.js","components/team/SettingCards.js","components/team/MainPage.js","components/MLSQLManagerApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Method","GET","POST","PUT","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","AccessToken","name","uuidv4","require","content","Object","classCallCheck","this","value","APIResponse","status","accessToken","_this","json","process","jsonErr","then","s","jsonObj","JSON","parse","e","console","log","MLSQLAPI","url","createClass","key","params","successCallback","serverErrorCallback","request","HTTP","ok","wow","fail","str","res","toString","sql","auth","Auth","jobName","self","user","jsonRes","userName","backendTags","finalParams","owner","sessionPerUser","show_stack","skipAuth","tags","assign","background","async","callback","method","body","toUpperCase","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","newurl","undefined","join","fetch","timeout","headers","Content-Type","Accept","Access-Token","sessionStorage","getItem","text","get","catch","USER_TAGS_UPDATE","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","FILE_UPLOAD","CREATE_TEAM","CHECK_TEAM_NAME","LIST_TEAMS","LIST_TEAMS_INVITED","ADD_TEAMS_MEMBER","ACCEPT_TEAMS_MEMBER","REFUSE_TEAMS_MEMBER","ADD_TEAMS_ROLE","ADD_TEAMS_TABLE","ADD_ROLES_TABLE","ADD_ROLES_MEMBER","CHNAGE_PASSWORD","MLSQLAuth","apiResponse","removeItem","error","m","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","assert","condition","message","Error","ButtonToCommand","makeSQL","Option","Select","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","api","BackendConfig","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","appendLog","executeQuery","enterLoading","getDisplay","update","select","getSelection","finalSQL","getAllText","startTime","Date","getTime","measureTime","exitLoading","commandGroup","runScript","queryApp","setData","stringify","failRes","selectionRange","getSelectionRange","session","getTextRange","appendToEditor","p","getCursorPosition","insert","focus","msg","row","getLength","column","getDashBoard","dash","display","loading","resourceProgressRef","enter","jobProgress","taskProgressRef","logProgress","LogProgress","exit","etOver","evt","et","etRef","eventName","getData","popName","processType","pathAlias","tableHidden","pathHidden","outputTableHidden","outputTableAlias","tableAlias","etPop","parent","React","parentCallback","newValue","react","className","onDragOver","preventDefault","onDrop","lib_default","a","ref","mode","theme","width","height","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_JobProgress","MLSQLAceEditor_TaskProgress","MLSQLAceEditor_ResourceProgress","CommandGroup","_this2","es_button","onClick","es_select","style","msgBox","_this3","mark","offset","setTimeout","intervalTimer","setInterval","concat","jsonArray","length","clearInterval","JobProgress","_this4","resourceCompute","hasOwnProperty","progress","currentJobIndex","totalJob","percent","successPercent","title","ResourceProgress","_this5","activeTasks","totalCores","currentJobGroupActiveTasks","TaskProgress","_this6","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","forEach","item","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","isDir","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isExpanded","toggleIsExpanded","scriptFile","openExistsOrNewEditor","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","CreateScriptDialog","fileName","target","finish","create","endsWith","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","confirmDelete","confirmAlert","removeFile","closeOnEscape","closeOnClickOutside","isCreateProject","createDocMenuItem","menuItem","icon","bind","createFolderTitle","createFolder","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","data","config","render","isPrototypeOf","type","substring","keys","basket","rows","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","Modal_default","visible","onCancel","onOk","cancelText","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","post","file","attach","end","map","f","react_default","createElement","size","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","objectSpread","Component","randomColor","generateColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","dataType","prev","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","margin","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender","dataForRender2","jsonItem","moment","utc","timestamp","format","inputRowsPerSecond","processedRowsPerSecond","numInputRows","titleMap","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","action","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","span","Charts","hasLegend","subTitle","pre","now","valueFormat","val","split","isResource","Panel","Collapse","TabPane","Tabs","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","collapse","header","tabs","defaultActiveKey","tab","UploadDropZone_UploadDropzone","PureComponent","TabEditor","pushRef","myRefs","getCurrentEditor","activeKey","currentItem","onEdit","targetKey","addFull","tabName","panes","newTabIndex","src_components_MLSQLAceEditor","add","getPaneIndexByActiveKey","lastIndex","pane","remove","filter","editorRefList","closeEditor","TabEditor_TabPane","closable","InputGroup","Input","Group","ETLoadParams","etPopLoad","compact","ETPopLoad","getAttribute","sourceType","sourceTypeV","es_row","param","es_col","input","marginBottom","addonBefore","description","loadParamsRef","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","etpop","datasourcesRender","ETPopLoad_Option","ETPopLoad_InputGroup","showSearch","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","ETLoadParams_ETLoadParams","TextArea","ETPopAlgorithm","renderParam","temp","ETPopAlgorithm_InputGroup","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","ETBaseTool_InputGroup","showOutputTableName","pathNameForRender","showPathName","asStr","ETPopTool","_ETBaseTool","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataTypeV","udfType","udfTypeV","code","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","href","appendChild","click","removeChild","ETStreamProgress","jobType","ETStreamProgress_Option","ETPop","disableEtModalVisible","etModalVisible","enableEtModalVisible","popChild","renderContent","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","okText","MLSQLETQuick","itemData","onDragStart","renderPop","ETPop_ETPop","etDoubleClick","padding","MLSQLETQuick_Panel","gutter","card","tag_default","tyle","help","draggable","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","MLSQLQueryApp","script","fileToEditorMap","editorRef","editorGroup","tempFileToEditorMap","refresh","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","MLSQLETQuick_MLSQLETQuick","TabEditor_TabEditor","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","VIEW_CONSOLE","VIEW_TEAM","VIEW_DEMO","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","TEAM_VIEW_BASIC","SETUP_VIEW_BASIC","CLUSTER_VIEW_BASIC","AUTH_VIEW_BASIC","SETTING_VIEW_BASIC","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","Item","generateView","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","renderView","currentView","BigDL_BigDL","NLP_NLP","Basic_Basic","Header","Layout","Content","Footer","Sider","MainPage","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","layout","minHeight","es_menu","defaultSelectedKeys","block","Demos_Demos","textAlign","MLSQLDemoApp","MainPage_MainPage","CreateTeamForm","handleSubmit","form","validateFields","resJson","teamCards","teamsRef","warning","failStr","teamNameCheck","rule","getFieldDecorator","es_form","onSubmit","rules","required","validator","prefix","es_icon","htmlType","MLSQLCreateTeamForm","Form","Service","apiUrl","stateKey","defineProperty","MESSAGE_TIMEOUT","teamName","roleName","tableId","Teams","accept","teamInvite","fetchTeams","teamYourJoinRef","refuse","renderCommand","actions","Meta","InviteMember","renderTeams","teams","MLSQLInviteMember","Views","renderTeamsForSelect","onTeamSelect","currentTeamName","TeamService","fetchRoles","renderRoles","roles","renderMembers","members","renderBackends","backends","teamSelect","onChangeCallback","roleSelect","backendSelect","memberSelect","TeamMembers","selectTeam","member","currentTeam","fetchMembersByTeam","removeTeamMember","AddRoleForTeam","MLSQLAddRoleForTeam","TeamRoles","removeRole","AddMemberForRole","roleMembersRef","MLSQLAddMemberForRole","AddTableForTeam","renderTableTypes","tableTypes","renderSourceTypes","sourceTypes","fetchTableTypes","fetchSourceTypes","MLSQLAddTableForTeam","RoleMembers","onRoleSelect","currentRoleName","fetchMembersByRole","removeRoleMember","TeamCards","openNotificationWithIcon","notification","teamRolesRef","teamMembersRef","roleTablesRef","Teams_Teams","TeamMembers_TeamMembers","TeamRoles_TeamRoles","RoleMembers_RoleMembers","newParams","names","backendName","merge","ClusterBackends","dataViewer","tag","fetchBackends","ecsResourcePoolId","newitem","objectWithoutProperties","CluserService","removeBackend","TeamViews","AddClusterBackend","acc","ClusterService","addBackend","checkBackendName","MLSQLAddClusterBackend","AddTagToRole","renderTags","tagsWithDuplicate","items","Set","ConfigureDefaultBackend","MLSQLConfigureDefaultBackend","AddExistClusterBackendToRole","updateBackendTags","fetchBackendNamesByTeam","backendNames","fetchBackendsByNames","backend","MLSQLAddExistClusterBackendToRole","ClusterCards","backendsRef","ClusterBackends_ClusterBackends","RoleTables","currentRole","fetchTablesByRole","tableNameId","removeRoleTable","defaultValue","renderTables","tables","tableType","operateType","AddTableForRole","authCards","fetchTables","fetchOperateTypes","db","renderOperateTypes","operateTypes","MLSQLAddTableForRole","AuthCards","RoleTables_RoleTables","Setup","Setup_Step","margin-top","ChangePassword","MLSQLChangePassword","SettingCards","switchToSetup","switchToCluster","switchToAuth","switchToSetting","Setup_Setup","TeamCards_TeamCards","ClusterCards_ClusterCards","AuthCards_AuthCards","SettingCards_SettingCards","app","MainPage_Sider","MainPage_Header","MainPage_Content","MainPage_Footer","MLSQLManagerApp","team_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","MLSQLDemoApp_MLSQLDemoApp","MLSQLManagerApp_MLSQLManagerApp","validateUserName","validatePassword","isEmail","test","normal","inject","App","menuRef","switchToTeam","switchToConsole","switchToDemo","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.692c226a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                console.log(e)\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    let res = str\n                    try {\n                        res = JSON.parse(str)[\"msg\"]\n                    } catch (e) {\n\n                    }\n                    serverErrorCallback(res)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                serverErrorCallback(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            let res = str\n                            try {\n                                res = JSON.parse(str)[\"msg\"]\n                            } catch (e) {\n\n                            }\n                            serverErrorCallback(\"backend status:\" + ok.status + \"\\n\" + res)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        let res = str\n                        try {\n                            res = JSON.parse(str)[\"msg\"]\n                        } catch (e) {\n\n                        }\n                        serverErrorCallback(res)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        })\n            .then((res) => {\n                successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n            })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n\nexport const CREATE_TEAM = BACKEND_SERVER + \"/api_v1/team/create\";\nexport const CHECK_TEAM_NAME = BACKEND_SERVER + \"/api_v1/team/name/check\";\nexport const LIST_TEAMS = BACKEND_SERVER + \"/api_v1/team\";\n\nexport const LIST_TEAMS_JOINED = BACKEND_SERVER + \"/api_v1/team/joined\";\nexport const LIST_TEAMS_INVITED = BACKEND_SERVER + \"/api_v1/team/invited\";\n\nexport const LIST_TEAMS_IN = BACKEND_SERVER + \"/api_v1/team/in\";\n\n\nexport const ADD_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/add\";\nexport const REMOVE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/remove\";\nexport const LIST_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/members\";\n\nexport const ACCEPT_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/accept\";\nexport const REFUSE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/refuse\";\n\nexport const ADD_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/add\";\nexport const REMOVE_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/remove\";\nexport const LIST_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/roles\";\n\nexport const ADD_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/add\";\nexport const REMOVE_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/remove\";\nexport const LIST_TEAMS_TABLES = BACKEND_SERVER + \"/api_v1/team/tables\";\n\n\nexport const ADD_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/add\";\nexport const REMOVE_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/remove\";\nexport const LIST_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/tables\";\n\nexport const ADD_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/add\";\nexport const REMOVE_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/remove\";\nexport const LIST_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/members\";\n\nexport const LIST_BACKENDS_BY_TEAM = BACKEND_SERVER + \"/api_v1/backends\";\n\nexport const CHNAGE_PASSWORD = BACKEND_SERVER + \"/api_v1/changepassword\";","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\nimport {Select} from 'antd';\n\nconst {Option} = Select;\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.jobProgress = React.createRef()\n        this.taskProgressRef = React.createRef()\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId}, () => {\n            this.aceEditorRef.current.editor.setValue(value, 1)\n        })\n\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    self.appendLog(wow[\"msg\"])\n                }, (jsonErr) => {\n                    self.appendLog(jsonErr)\n                })\n            } else {\n                self.appendLog(\"saved\")\n            }\n\n        }, (fail) => {\n            self.appendLog(fail)\n        })\n\n    }\n\n    executeQuery = () => {\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n        self.getDisplay().update(JSON.parse(\"[]\"))\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        const timeout = this.commandGroup.current.state.timeout\n\n        api.runScript({\n            jobName: jobName,\n            background: (this.state.background || false),\n            timeout: timeout\n        }, finalSQL, (wow) => {\n            try {\n                self.queryApp.setData(wow)\n                self.getDisplay().update(wow)\n                self.appendLog(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.appendLog(\"Can not display the result. raw data:\\n\" + JSON.stringify(wow, null, 2))\n            }\n            self.exitLoading()\n\n        }, (fail) => {\n            self.exitLoading()\n            let failRes = fail.toString()\n            try {\n                failRes = JSON.parse(failRes)[\"msg\"]\n            } catch (e) {\n            }\n            self.appendLog(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")\n        })\n\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    appendLog = (msg) => {\n        const editor = this.getMessageBoxAceEditor()\n        const session = editor.session\n        session.insert({\n            row: session.getLength(),\n            column: 0\n        }, \"\\n\" + msg)\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.jobProgress.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})\n        this.logProgress = new LogProgress(this)\n        this.logProgress.enter()\n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.jobProgress.current.exit()\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()\n        if (this.logProgress) {\n            this.logProgress.exit()\n        }\n    }\n    etOver = (evt) => {\n        const et = this.queryApp.etRef.current\n        const eventName = et.getData(\"eventName\")\n        const popName = et.getData(\"popName\")\n        const processType = et.getData(\"processType\")\n        const pathAlias = et.getData(\"pathAlias\")\n        const tableHidden = et.getData(\"tableHidden\")\n        const pathHidden = et.getData(\"pathHidden\")\n        const outputTableHidden = et.getData(\"outputTableHidden\")\n        const outputTableAlias = et.getData(\"outputTableAlias\")\n        const tableAlias = et.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            et.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}><AceEditor\n                    ref={this.aceEditorRef}\n                    mode=\"sql\"\n                    theme=\"github\"\n                    width={\"100%\"}\n                    height={\"500px\"}\n                    onChange={this.onChange}\n                    name=\"mlsql_editor\"\n                    fontSize={16}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value=\"\"\n                    editorProps={{\n                        $blockScrolling: Infinity\n                    }}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                    }}\n                /></div>\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <JobProgress ref={this.jobProgress} parent={this}></JobProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, timeout: \"-1\"}\n        this.parent = props.parent\n    }\n\n    onChange = (value) => {\n        this.setState({timeout: value})\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n                Job Timeout:<Select\n                onChange={this.onChange}\n                style={{width: \"120px\"}}\n            >\n                <Option value=\"10000\">10s</Option>\n                <Option value=\"30000\">30s</Option>\n                <Option value=\"60000\">60s</Option>\n                <Option value=\"1800000\">30m</Option>\n                <Option value=\"7200000\">2h</Option>\n                <Option value=\"28800000\">8h</Option>\n                <Option value=\"-1\">unlimited</Option>\n            </Select>\n            </div>\n        )\n    }\n\n}\n\nclass LogProgress {\n    constructor(msgBox) {\n        this.msgBox = msgBox\n        this.logProgress = \"loaded\"\n    }\n\n    enter = (params) => {\n        const self = this\n        this.mark = true\n        this.offset = -1\n        setTimeout(() => {\n            if (self.mark) {\n                self.loading = true\n                self.intervalTimer = setInterval(() => {\n                        if (self.logProgress === \"loading\") {\n                            return\n                        }\n                        self.logProgress = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n\n                        api.runScript({}, `load _mlsql_.\\`log/${self.offset}\\` where filePath=\"engine_log\" as output;`, (jsonArray) => {\n                            const jsonObj = jsonArray[0]\n                            if (jsonObj['value'].length > 0) {\n                                this.msgBox.appendLog(jsonObj['value'].join(\"\\n\"))\n                            }\n                            self.offset = jsonObj[\"offset\"]\n                            self.logProgress = \"loaded\"\n                        }, (str) => {\n                            self.logProgress = \"loaded\"\n                            try {\n                                this.msgBox.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n\n                        })\n\n                    }\n\n                    , 1000)\n            }\n\n        }, 1000)\n\n    }\n\n    exit = () => {\n        // we should wait some seconds since the log sometimes may delayed.\n        const self = this\n        setTimeout(() => {\n            self.loading = false\n            self.mark = false\n            if (self.intervalTimer) {\n                clearInterval(self.intervalTimer);\n            }\n        }, 10000)\n\n    }\n\n}\n\n\nclass JobProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`jobs/get/${jobName}\\` as wow;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    console.log(jsonObj)\n                                    const p = jsonObj.progress.currentJobIndex / jsonObj.progress.totalJob * 100\n                                    self.setState({\n                                        percent: p,\n                                        successPercent: p,\n                                        title: `Jobs: current/Total: ${jsonObj.progress.currentJobIndex}/${jsonObj.progress.totalJob })`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    self.setState({\n                                        percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                        successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                        title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if (self.taskCompute === \"loading\") {\n                            return\n                        }\n                        self.taskCompute = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute = \"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute = \"loaded\"\n                            try {\n                                self.parent.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 1000)\n            }\n\n        }, 1000)\n\n    }\n\n    exit = () => {\n        this.taskCompute = \"loaded\"\n        this.resourceCompute = \"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu isDir={node.isDir} parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.openExistsOrNewEditor({id: node.id, content: scriptFile.content, name: scriptFile.name})\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.toggleIsExpanded(nodeData.id, false)\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.toggleIsExpanded(nodeData.id, true)\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && !params.fileName.endsWith(\".mlsql\")) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n        this.isDir = this.props.isDir\n    }\n\n    confirmDelete = () => {\n        confirmAlert({\n            title: 'Confirm to delete',\n            message: 'Are you sure to do this ？',\n            buttons: [\n                {\n                    label: 'confirm',\n                    onClick: () => this.removeFile()\n                },\n                {\n                    label: 'cancel',\n                    onClick: () => {\n                    }\n                }\n            ],\n            closeOnEscape: true, closeOnClickOutside: false\n        });\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject() && this.isDir) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n    createFolder = () => {\n        if (this.isDir) {\n            return <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n        if (this.isCreateProject()) {\n            return <MenuItem icon=\"folder-new\" text=\"Create Project\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.confirmDelete()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    {this.createFolder()}\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table} from 'antd';\nimport Modal from \"../../node_modules/antd/lib/modal/Modal\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded. \\n You can check the files with command: !hdfs -ls /tmp/upload; \"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough or backend fails\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend} from 'recharts';\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).format('DD,h:mm:ss')\n            dataForRender.push({\n                x: x,\n                inputRowsPerSecond: jsonItem.inputRowsPerSecond,\n                processedRowsPerSecond: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                numInputRows: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            dataForRender2: dataForRender2\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender}>\n                <Line type=\"monotone\" dataKey=\"inputRowsPerSecond\" stroke=\"#8884d8\"/>\n                <Line type=\"monotone\" dataKey=\"processedRowsPerSecond\" stroke=\"#82ca9d\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender2}>\n                <Line type=\"monotone\" dataKey=\"numInputRows\" stroke=\"#8884d8\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import * as React from \"react\"\nimport {Tabs} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\n\nconst TabPane = Tabs.TabPane;\n\nexport class TabEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parent = props.parent\n        this.myRefs = []\n        this.newTabIndex = 0;\n        const panes = [\n            {\n                title: 'MLSQL 1',\n                content: <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: \"newTab0\"})\n                }} activeKey='newTab0'/>,\n                key: 'newTab0'\n            },\n        ];\n        this.state = {\n            activeKey: panes[0].key,\n            panes,\n        };\n        this.newTabIndex++\n    }\n\n    pushRef = (ref) => {\n        this.myRefs.push(ref)\n    }\n\n    getCurrentEditor = () => {\n        const activeKey = this.state.activeKey;\n        let currentItem = null\n        this.myRefs.forEach(item => {\n            if (item.activeKey === activeKey) {\n                currentItem = item\n            }\n        })\n        return currentItem\n    }\n\n    onChange = (activeKey) => {\n        this.setState({activeKey});\n    }\n\n    onEdit = (targetKey, action) => {\n        this[action](targetKey);\n    }\n\n    addFull = (tabName, callback) => {\n        const panes = this.state.panes;\n        const activeKey = `newTab${this.newTabIndex++}`;\n        panes.push({\n            title: tabName || 'MLSQL ' + this.newTabIndex,\n            content: <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                this.pushRef({ref: ref, activeKey: activeKey})\n                if (callback) {\n                    callback({ref: ref, activeKey: activeKey})\n                }\n            }} activeKey={activeKey}/>,\n            key: activeKey\n        });\n        this.setState({panes, activeKey});\n    }\n\n    add = () => {\n        this.addFull()\n    }\n\n    getPaneIndexByActiveKey = (targetKey) => {\n        let lastIndex;\n        this.state.panes.forEach((pane, i) => {\n            if (pane.key === targetKey) {\n                lastIndex = i - 1;\n            }\n        });\n        return lastIndex\n    }\n\n    remove = (targetKey) => {\n        let activeKey = this.state.activeKey;\n        let lastIndex = this.getPaneIndexByActiveKey(targetKey)\n\n        const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n        if (panes.length && activeKey === targetKey) {\n            if (lastIndex >= 0) {\n                activeKey = panes[lastIndex].key;\n            } else {\n                activeKey = panes[0].key;\n            }\n        }\n        const editorRefList = this.myRefs.filter((item) => item.activeKey === targetKey)\n        this.myRefs = this.myRefs.filter((item) => item.activeKey !== targetKey)\n        this.parent.closeEditor(editorRefList[0])\n\n        this.setState({panes, activeKey});\n    }\n\n    render() {\n        return (\n            <Tabs\n                onChange={this.onChange}\n                activeKey={this.state.activeKey}\n                type=\"editable-card\"\n                onEdit={this.onEdit}\n            >\n                {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}\n                                                       closable={pane.closable}>{pane.content}</TabPane>)}\n            </Tabs>\n        );\n    }\n}","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n        this.itemData = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    setData = (k, v) => {\n        this.itemData[k] = v\n    }\n\n    getData = (k) => {\n        return this.itemData[k]\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        this.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        this.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        this.setData(\"processType\", processType);\n        this.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        this.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        this.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        this.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        this.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        this.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.getCurrentEditor().ref.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    etDoubleClick = (evt) => {\n        this.onDragStart(evt)\n        this.queryApp.getCurrentEditor().ref.etOver(evt)\n    }\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Load\n                                        data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"} onDoubleClick={this.etDoubleClick}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\nimport {TabEditor} from \"./editor/TabEditor\";\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\"}\n        this.directoryTree = React.createRef()\n        this.editorGroup = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n        this.etRef = React.createRef()\n\n        // key is script id\n        // value is editor ref\n        this.fileToEditorMap = {}\n\n    }\n\n    openExistsOrNewEditor = (script) => {\n        const self = this\n\n        if (this.fileToEditorMap.hasOwnProperty(script.id)) {\n            const editorRef = this.fileToEditorMap[script.id]\n            editorRef.ref.text(script.content, script.id)\n            this.editorGroup.current.onChange(editorRef.activeKey)\n\n        } else {\n            // if (!Object.values(this.fileToEditorMap).includes(this.getCurrentEditor())) {\n            //\n            //     //close current window\n            //     this.editorGroup.current.remove(this.getCurrentEditor().activeKey)\n            //\n            //     const editorRef = this.getCurrentEditor()\n            //     editorRef.ref.text(script.content, script.id)\n            //     self.fileToEditorMap[script.id] = editorRef.ref\n            //     const activeKey = editorRef.activeKey\n            //\n            //\n            // }\n            this.editorGroup.current.addFull(script.name, (editorRef) => {\n                editorRef.ref.text(script.content, script.id)\n                self.fileToEditorMap[script.id] = editorRef\n            })\n\n        }\n    }\n\n    closeEditor = (editorRef) => {\n        const tempFileToEditorMap = Object.keys(this.fileToEditorMap).filter(key => {\n            return this.fileToEditorMap[key].activeKey !== editorRef.activeKey\n        }).reduce((pre, key) => {\n            pre[key] = this.fileToEditorMap[key]\n            return pre\n        }, {})\n        this.fileToEditorMap = tempFileToEditorMap\n    }\n\n    getCurrentEditor = () => {\n        return this.editorGroup.current.getCurrentEditor()\n    }\n\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <div style={{marginBottom: \"10px\"}}>\n                        <MLSQLETQuick ref={this.etRef} parent={this}/>\n                    </div>\n                    <TabEditor ref={this.editorGroup} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"300px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_TEAM = \"team\"\nexport const VIEW_DEMO = \"demo\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n\n\nexport const TEAM_VIEW_BASIC = \"team_view_basic\"\nexport const SETUP_VIEW_BASIC = \"setup_view_basic\"\nexport const CLUSTER_VIEW_BASIC = \"cluster_view_basic\"\nexport const AUTH_VIEW_BASIC = \"auth_view_basic\"\nexport const SETTING_VIEW_BASIC = \"setting_view_basic\"\n","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"300px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[0], -1)\n            } catch (e) {\n\n            }\n\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=\"200\" where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Icon, Input, Button, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHECK_TEAM_NAME, CREATE_TEAM} from \"../../service/BackendConfig\";\n\n\nclass CreateTeamForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.teamCards = props.parent\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CREATE_TEAM)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create team success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create team fail\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create team fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    teamNameCheck = (rule, value, callback) => {\n        if (value) {\n            const api = new MLSQLAPI(CHECK_TEAM_NAME)\n            api.request2({name: value}, (resJson) => {\n                if (!resJson[\"msg\"]) {\n                    callback(`${value} have been taken. Try another`);\n                }\n                else callback()\n            }, (failStr) => {\n                callback('server error:' + failStr);\n            })\n        } else {\n            callback()\n        }\n\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the team name!'},\n                            {validator: this.teamNameCheck}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>} placeholder=\"Team name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLCreateTeamForm = Form.create({name: 'create_team'})(CreateTeamForm);","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {\n    LIST_ROLES_MEMBER,\n    LIST_ROLES_TABLE,\n    LIST_TEAMS_MEMBER,\n    LIST_TEAMS_ROLE, LIST_TEAMS_TABLES, REMOVE_ROLES_MEMBER, REMOVE_ROLES_TABLE,\n    REMOVE_TEAMS_MEMBER,\n    REMOVE_TEAMS_ROLE, REMOVE_TEAMS_TABLE, RUN_SCRIPT\n} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchTeams(apiUrl, self, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByTeam(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_MEMBER)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchRoles(parent, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_ROLE)\n        api.request2({teamName: teamName}, resJson => {\n            parent.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTablesByRole(parent, teamName, roleName, stateKey) {\n        const api = new MLSQLAPI(LIST_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleMember(parent, teamName, roleName, userName, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName, userName: userName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByRole(parent, teamName, roleName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRole(parent, teamName, roleName) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_ROLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTeamMember(parent, teamName, userName, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_MEMBER)\n        api.request2({teamName: teamName, userName: userName}, resJson => {\n            callback()\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static teamInvite(self, apiUrl, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTables(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_TEAMS_TABLES)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTable(self, teamName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_TABLE)\n        api.request2({teamName: teamName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTableTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/tableTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchSourceTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/sourceTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchOperateTypes(self, stateKey) {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/operateTypes\\` as output;`, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleTable(self, teamName, roleName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ACCEPT_TEAMS_MEMBER,\n    LIST_TEAMS,\n    LIST_TEAMS_INVITED,\n    LIST_TEAMS_MEMBER,\n    REFUSE_TEAMS_MEMBER\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nexport class Teams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n\n    accept = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, ACCEPT_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n            this.teamCards.teamYourJoinRef.current.refresh()\n        })\n    }\n\n    refuse = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, REFUSE_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n        })\n    }\n\n    refresh = () => {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n    renderCommand = (value) => {\n        this.teamName = value\n        if (this.apiUrl === LIST_TEAMS_INVITED) {\n            return [<a onClick={this.accept}>accept</a>, <a onClick={this.refuse}>refuse</a>]\n        }\n        return []\n    }\n\n\n    render() {\n        return (\n            <div>\n                <List\n                    dataSource={this.state.data}\n                    renderItem={item => (\n                        <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                            <List.Item.Meta\n                                title={<a href=\"#\">{item.name}</a>}\n                            />\n                        </List.Item>\n                    )}\n                >\n                </List>\n            </div>\n        );\n    }\n}\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass InviteMember extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_MEMBER)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.setState({refresh: true})\n                        message.success(\"Invite success\", 3)\n                    } else {\n                        message.warning(\"Invite fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    self.teamCards.setState({refresh: true})\n                    message.error(\"Invite fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userNames', {\n                        rules: [\n                            {required: true, message: 'Please input the user name you want invite'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLInviteMember = Form.create({name: 'create_team'})(InviteMember);","import {Select} from \"antd\";\nimport * as React from \"react\";\nimport TeamService from \"./Service\";\n\nexport class Views {\n    static renderTeamsForSelect = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static onTeamSelect = (self, teamName) => {\n        self.currentTeamName = teamName\n        TeamService.fetchRoles(self, teamName, \"roles\")\n    }\n\n\n    static renderTeams = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    static renderRoles = (self) => {\n        return self.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderMembers = (self) => {\n        return self.state.members.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderBackends = (self) => {\n        return self.state.backends.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n    s\n    static teamSelect = (self, onChangeCallback) => {\n        return <Select\n            placeholder=\"Team name\"\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderTeams(self)}\n        </Select>\n    }\n\n    static roleSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"role name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderRoles(self)}\n        </Select>\n    }\n\n    static backendSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"backend name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderBackends(self)}\n        </Select>\n    }\n\n    static memberSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"member name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderMembers(self)}\n        </Select>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS_MEMBER} from \"../../service/BackendConfig\";\n\n\nexport class TeamMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchMembersByTeam(this, member, \"members\")\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            Service.removeTeamMember(self, self.currentTeam, userName, () => {\n                Service.fetchMembersByTeam(self, self.currentTeam, \"members\")\n            })\n        }\n        }>remove</a>]\n\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderMembers()}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass AddRoleForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleNames', {\n                        rules: [\n                            {required: true, message: 'Please input the role name you want to create'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"role\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddRoleForTeam = Form.create({name: 'add_role_for_team'})(AddRoleForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamRoles extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    refresh = () => {\n        if(this.currentTeam){\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n    }\n\n    renderCommand = (roleName) => {\n        return [<a onClick={() => {\n            Service.removeRole(this, this.currentTeam, roleName)\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.roles}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_MEMBER,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\n\n\nclass AddMemberForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_MEMBER)\n                api.request2(params, (resJson) => {\n                    console.log(resJson)\n                    console.log(\"----\")\n                    if (resJson[\"msg\"] === \"success\") {\n                        if (self.teamCards.roleMembersRef) {\n                            self.teamCards.roleMembersRef.current.refresh()\n                        }\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Views.onTeamSelect(this, teamName)\n        Service.fetchMembersByTeam(this, teamName, \"members\")\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            self.onTeamSelect(teamName)\n                        })\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name'}\n                        ],\n                    })(\n                        Views.roleSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userName', {\n                        rules: [\n                            {required: true, message: 'Please input the member name'}\n                        ],\n                    })(\n                        Views.memberSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddMemberForRole = Form.create({name: 'add_member_for_role'})(AddMemberForRole);","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, ADD_TEAMS_TABLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            tableTypes: [],\n            sourceTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n        Service.fetchTableTypes(this, \"tableTypes\")\n        Service.fetchSourceTypes(this, \"sourceTypes\")\n\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTableTypes = () => {\n        return this.state.tableTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n    renderSourceTypes = () => {\n        return this.state.sourceTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the table name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"table name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('db', {\n                        rules: [],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"db name\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('tableType', {\n                        rules: [\n                            {required: true, message: 'Please input the table type you want to create'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"table Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTableTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('sourceType', {\n                        rules: [],\n                    })(\n                        <Select\n                            placeholder=\"source Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderSourceTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForTeam = Form.create({name: 'add_table_for_team'})(AddTableForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchTables(this, member, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam) {\n            Service.fetchTables(this, this.currentTeam, \"tables\")\n        }\n    }\n\n    renderCommand = (tableId) => {\n        return [<a onClick={(evt) => {\n            evt.preventDefault()\n            Service.removeTable(this, this.currentTeam, tableId, null, () => {\n                Service.fetchTables(this, this.currentTeam, \"tables\")\n            })\n\n        }\n        }>remove</a>]\n    }\n\n    renderDB = (item) => {\n        if (item.db !== \"undefined\" && item.db) {\n            return item.db\n        } else return \"default\"\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={`${item.tableType}:${this.renderDB(item)}:${item.name}`}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    onRoleSelect = (roleName) => {\n        this.currentRoleName = roleName\n        Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n    }\n\n    refresh = () => {\n        if (this.currentTeamName && this.currentRoleName) {\n            Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n        }\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeamName && this.currentRoleName) {\n                Service.removeRoleMember(this, this.currentTeamName, this.currentRoleName, userName, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={item.name}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })}\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.roleSelect(self, self.onRoleSelect, \"default\")}\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderMembers()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {MLSQLCreateTeamForm} from \"./CreateTeam\";\nimport {Teams} from \"./Teams\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS, LIST_TEAMS_INVITED, LIST_TEAMS_JOINED} from \"../../service/BackendConfig\";\nimport {InviteMember, MLSQLInviteMember} from \"./InviteMember\";\nimport {TeamMembers} from \"./TeamMembers\";\nimport {MLSQLAddRoleForTeam} from \"./AddRoleForTeam\";\nimport {TeamRoles} from \"./TeamRoles\";\n\nimport {MLSQLAddMemberForRole} from \"./AddMemberForRole\";\nimport {RoleMembers} from \"./RoleMembers\";\n\n\nexport class TeamCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n        this.teamRolesRef = React.createRef()\n        this.teamMembersRef = React.createRef()\n        this.teamsRef = React.createRef()\n        this.roleTablesRef = React.createRef()\n        this.roleMembersRef = React.createRef()\n        this.teamYourJoinRef = React.createRef()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"Team belongs to you\" bordered={false}><Teams parent={this} ref={this.teamsRef}\n                                                                              apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Create new team\" bordered={false}>\n                        <MLSQLCreateTeamForm parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Team\" bordered={false}><TeamMembers ref={this.teamMembersRef}\n                                                                                     parent={this} apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Invite members\" bordered={false}>\n                        <MLSQLInviteMember parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Team you join\" bordered={false}><Teams parent={this} ref={this.teamYourJoinRef}\n                                                                        apiUrl={LIST_TEAMS_JOINED}/></Card>\n                </Col>\n\n                <Col span={12}>\n                    <Card title=\"Team inviting you\" bordered={false}><Teams parent={this} apiUrl={LIST_TEAMS_INVITED}/></Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n\n                <Col span={16}>\n                    <Card title=\"View Roles By Team\" bordered={false}><TeamRoles ref={this.teamRolesRef}\n                                                                                 parent={this} apiUrl={ADD_TEAMS_ROLE}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Add role to Team\" bordered={false}>\n                        <MLSQLAddRoleForTeam parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Role\" bordered={false}>\n                        <RoleMembers parent={this} ref={this.roleMembersRef}/>\n                    </Card>\n                </Col>\n\n\n                <Col span={8}>\n                    <Card title=\"Add Member to Role\" bordered={false}>\n                        <MLSQLAddMemberForRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {CLUSTER_MANAGER, LIST_BACKENDS_BY_TEAM} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchBackends(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/list\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static checkBackendName(self, name, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: name}, {action: \"/backend/name/check\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendsByNames(self, names, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({names: names}, {action: \"/backend/list/names\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendNamesByTeam(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_BACKENDS_BY_TEAM)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static addBackend(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/add\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeBackend(self, backendName, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: backendName}, {action: \"/backend/remove\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static updateBackendTags(self, backendName, tags, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({tags: tags, name: backendName}, {\n            action: \"/backend/tags/update\",\n            merge: \"append\"\n        })\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport Service from \"./remote/Service\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {Views as TeamViews} from \"../team/remote/Views\"\nimport TeamService from \"../team/remote/Service\"\nimport CluserService from \"./remote/Service\"\nimport {Row, Col, Button} from \"antd\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\nexport class ClusterBackends extends React.Component {\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.dataViewer = React.createRef()\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    renderBackends = () => {\n        return <MLSQLQueryDisplay ref={this.dataViewer} parent={this}/>\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        const tag = self.currentTeamName + \"_\" + roleName\n        Service.fetchBackends(this, {\n            tag: tag\n        }, \"backends\", () => {\n            self.dataViewer.current.update(self.state.backends.map(item => {\n                const {ecsResourcePoolId, id, tags, ...newitem} = item;\n                newitem[\"command\"] = <Button onClick={(evt) => {\n                    CluserService.removeBackend(self, newitem.name, null, () => {\n                        self.onRoleSelect(roleName)\n                    })\n                }}>remove</Button>\n                return newitem\n            }), {})\n        })\n    }\n\n    render() {\n        const self = this\n        return <div>\n            <Row>\n                <Col>\n                    {TeamViews.teamSelect(self, (teamName) => {\n                        TeamViews.onTeamSelect(self, teamName)\n                    })}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {TeamViews.roleSelect(self, self.onRoleSelect)}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {this.renderBackends()}\n                </Col>\n            </Row>\n        </div>\n\n    }\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddClusterBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, name, url} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n                ClusterService.addBackend(self, {\n                    name: name,\n                    url: url,\n                    tag: tag,\n                    teamName: teamName\n                }, null, () => {\n                    message.success(\"Add backend success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    checkBackendName = (rule, value, callback) => {\n        ClusterService.checkBackendName(this, value, null, (resJson) => {\n            if (resJson[\"msg\"]) {\n                callback(\"Name have been taken. Try another.\")\n            } else {\n                callback()\n            }\n        })\n\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the backend name'},\n                            {validator: this.checkBackendName},\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"backend name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('url', {\n                        rules: [\n                            {required: true, message: 'Please input the url name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddClusterBackend = Form.create({name: 'add_backend_for_cluster'})(AddClusterBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddTagToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const self = this\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n        ClusterService.fetchBackends(this, \"backends\", () => {\n            const tagsWithDuplicate = self.state.backends.map(item => {\n                return item.tags\n            }).reduce((items, item) => {\n                items.push(...item)\n                return items\n            }, [])\n            const tags = new Set(tagsWithDuplicate)\n            self.setState({tags: [...tags]})\n        })\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTagToRole = Form.create({name: 'add_tag_to_role'})(AddTagToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureDefaultBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"] === params.tag) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            }else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureDefaultBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass AddExistClusterBackendToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, backendName} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n\n                ClusterService.updateBackendTags(self, backendName, tag, null, () => {\n                    message.success(\"Update backend tags success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(this, (teamName) => {\n                            ClusterService.fetchBackendNamesByTeam(this, teamName, null, (backendNames) => {\n                                ClusterService.fetchBackendsByNames(this, backendNames.map(item => {\n                                    return item.name\n                                }).join(\",\"), \"backends\", () => {\n                                    console.log(this.state.backends)\n                                })\n                            })\n                            Views.onTeamSelect(this, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(this, (roleName) => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('backendName', {\n                        rules: [{required: true, message: 'Please input the backend name'}],\n                    })(\n                        Views.backendSelect(this, (backend) => {\n\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Confirm\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddExistClusterBackendToRole = Form.create({name: 'AddExistClusterBackendToRole'})(AddExistClusterBackendToRole);","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {ClusterBackends} from \"./ClusterBackends\";\nimport {MLSQLAddClusterBackend} from \"./AddClusterBackend\";\nimport {MLSQLAddTagToRole} from \"./AddTagToRole\";\nimport {MLSQLConfigureDefaultBackend} from \"./ConfigureDefaultBackend\";\nimport {MLSQLAddExistClusterBackendToRole} from \"./AddExistClusterBackendToRole\";\n\n\nexport class ClusterCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.backendsRef = React.createRef()\n        this.state = {}\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Set your default backend tag\" bordered={false}>\n                        <MLSQLConfigureDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add Backend\" bordered={false}>\n                        <MLSQLAddClusterBackend parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Your Backends\" bordered={false}>\n                        <ClusterBackends parent={this} ref={this.backendsRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Add role to backend\" bordered={false}>\n                        <MLSQLAddExistClusterBackendToRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    onRoleSelect = (roleName) => {\n        this.currentRole = roleName\n        Service.fetchTablesByRole(this, this.currentTeam, roleName, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam && this.currentRole) {\n            Service.fetchTablesByRole(this, this.currentTeam, this.currentRole, \"tables\")\n        }\n    }\n\n    renderCommand = (tableNameId) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeam && this.currentRole) {\n                Service.removeRoleTable(this, this.currentTeam, this.currentRole, tableNameId, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={item.tableType + \":\" + this.sourceType(item.sourceType, item.tableType) + \":\" + item.name + \":\" + item.operateType}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.selectTeam}\n                        >\n                            {Views.renderTeamsForSelect(this)}\n                        </Select>\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onRoleSelect}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderTables()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_TABLE,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.authCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tables: [],\n            operateTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.authCards.roleTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Service.fetchRoles(this, teamName, \"roles\")\n        Service.fetchTables(this, teamName, \"tables\")\n        Service.fetchOperateTypes(this, \"operateTypes\")\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return this.state.tables.map(item => {\n            return <Select.Option key={item.name}\n                                  value={item.id}>{item.tableType}:{this.sourceType(item.sourceType, item.tableType)}:{item.db}.{item.name}</Select.Option>\n        })\n    }\n\n    renderOperateTypes = () => {\n        return this.state.operateTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name '}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tableName', {\n                        rules: [\n                            {required: true, message: 'Please input the tableName name '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"table name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTables()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('operateType', {\n                        rules: [\n                            {required: true, message: 'Please input the operateType to Role '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Operate type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderOperateTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForRole = Form.create({name: 'add_table_for_role'})(AddTableForRole);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLAddTableForTeam} from \"../team/AddTableForTeam\";\n\nimport {RoleTables} from \"../team/RoleTables\";\nimport {MLSQLAddTableForRole} from \"../team/AddTableForRole\";\n\n\nexport class AuthCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Add Table to Team\" bordered={false}>\n                        <MLSQLAddTableForTeam parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add table to role\" bordered={false}>\n                        <MLSQLAddTableForRole parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"View tables By Role\" bordered={false}>\n                        <RoleTables parent={this} ref={this.roleTablesRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List, notification, Card, Col, Row} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLCreateTeamForm} from \"../team/CreateTeam\";\nimport {MLSQLAddRoleForTeam} from \"../team/AddRoleForTeam\";\nimport {MLSQLAddMemberForRole} from \"../team/AddMemberForRole\";\nimport {MLSQLAddClusterBackend} from \"../cluster/AddClusterBackend\";\nimport {MLSQLConfigureDefaultBackend} from \"../cluster/ConfigureDefaultBackend\";\nimport {RoleMembers} from \"../team/RoleMembers\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class Setup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.steps = this.generateSteps()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    generateSteps() {\n        const self = this\n        return [{\n            title: 'Create Team',\n            content: () => {\n                return <Card title={\"input your team name\"} bordered={true}>\n                    <MLSQLCreateTeamForm parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Create Role',\n            content: () => {\n                return <Card title={\"Add new role to the team you have created\"} bordered={true}>\n                    <MLSQLAddRoleForTeam parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Invite user to Role',\n            content: () => {\n                return <Card title={\"Add member to the role you have created\"} bordered={true}>\n                    <MLSQLAddMemberForRole parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Create Backend',\n            content: () => {\n                return <Card title={\"Add the cluster information you have setup\"} bordered={true}>\n                    <MLSQLAddClusterBackend parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Set default backend',\n            content: () => {\n                return <Card title={\"Configure the default backend you want use\"} bordered={true}>\n                    <MLSQLConfigureDefaultBackend parent={self}/>\n                </Card>\n            }\n        },\n            {\n                title: 'Congratulation!',\n                content: () => {\n                    return <Card title={\"All Done\"} bordered={true}>\n                        Please go to Console\n                    </Card>\n                }\n            }\n        ];\n    }\n\n    componentDidMount() {\n\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\" style={{\"margin-top\": \"30px\"}}>\n                    <Row gutter={24}>\n                        <Col span={8}>\n\n\n                        </Col>\n                        <Col span={8}>\n                            {this.steps[current].content()}\n\n                        </Col>\n                    </Row>\n\n                </div>\n\n            </div>\n        );\n    }\n\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHNAGE_PASSWORD} from \"../../service/BackendConfig\";\n\nclass ChangePassword extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CHNAGE_PASSWORD)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Success\", 3)\n                    } else {\n                        message.warning(\"Fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {required: true, message: 'Please input the original password'}\n                        ],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"old password\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('newPassword', {\n                        rules: [{required: true, message: 'Please input the new password'}],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"new password\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Apply\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLChangePassword = Form.create({name: 'change_password'})(ChangePassword);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLChangePassword} from \"../team/MLSQLChangePassword\";\n\nexport class SettingCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Change password\" bordered={false}>\n                        <MLSQLChangePassword parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {\n    AUTH_VIEW_BASIC,\n    CLUSTER_VIEW_BASIC,\n    SETTING_VIEW_BASIC,\n    SETUP_VIEW_BASIC,\n    TEAM_VIEW_BASIC\n} from \"../../common/ViewConst\";\nimport {TeamCards} from \"./TeamCards\";\nimport {ClusterCards} from \"../cluster/ClusterCards\";\nimport {AuthCards} from \"../auth/AuthCards\";\nimport Setup from \"../demo/Setup\";\nimport {SettingCards} from \"./SettingCards\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.app = props.parent\n        this.state = {\n            currentView: SETUP_VIEW_BASIC\n        }\n\n\n    }\n\n    switchToBasic = () => {\n        this.setState({currentView: TEAM_VIEW_BASIC})\n    }\n\n    switchToSetup = () => {\n        this.setState({currentView: SETUP_VIEW_BASIC})\n    }\n\n    switchToCluster = () => {\n        this.setState({currentView: CLUSTER_VIEW_BASIC})\n    }\n\n    switchToAuth = () => {\n        this.setState({currentView: AUTH_VIEW_BASIC})\n    }\n\n    switchToSetting = () => {\n        this.setState({currentView: SETTING_VIEW_BASIC})\n    }\n\n    renderView = () => {\n        if (this.state.currentView === SETUP_VIEW_BASIC) return <Setup/>\n        if (this.state.currentView === TEAM_VIEW_BASIC) return <TeamCards/>\n        if (this.state.currentView === CLUSTER_VIEW_BASIC) return <ClusterCards/>\n        if (this.state.currentView === AUTH_VIEW_BASIC) return <AuthCards/>\n        if (this.state.currentView === SETTING_VIEW_BASIC) return <SettingCards/>\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToSetup}>Setup</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBasic}>Team</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToCluster}>Cluster</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block onClick={this.switchToAuth}>Auth</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block onClick={this.switchToSetting}>Setting</Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./team/MainPage\";\nimport {TEAM_VIEW_BASIC} from \"../common/ViewConst\";\n\nexport class MLSQLManagerApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage parent={this}/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"../common/ViewConst\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\nimport {MLSQLManagerApp} from \"../components/MLSQLManagerApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n\n    }\n\n    componentDidMount() {\n        const self = this\n        this.auth.userName((name) => {\n            self.setState({userName: name})\n        })\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.auth.isLogin() && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_TEAM) return <MLSQLManagerApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n        const self = this\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            }, () => self.app.updateLoginoutStatus())\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_TEAM} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToTeam = () => {\n        this.setState({currentView: VIEW_TEAM})\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Team\" onClick={this.switchToTeam}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\"\n                             href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\"><img\n                        src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}