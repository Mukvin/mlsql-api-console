{"version":3,"sources":["backend_service/RemoteAction.js","backend_service/backend/RestConst.js","backend_service/Dicts.js","backend_service/backend/Backend.js","backend_service/ActionProxy.js","serviceWorker.js","service/HTTPMethod.js","service/MLSQLAPI.js","service/BackendConfig.js","user/MLSQLAuth.js","service2/CodeIntellegence.js","common/tool.js","components/et/ButtonToCommand.js","common/LogMonitor.js","components/MLSQLAceEditor.js","service/MLSQLTreeBuilder.js","components/MLSQLTreeNode.js","components/MLSQLQueryDisplay.js","components/upload/UploadDropZone.js","components/dash/MLSQLScatterChart.js","components/dash/MLSQLLineChart.js","components/dash/MLSQLStream.js","components/dash/MLSQLResource.js","components/dash/MLSQLHTML.js","components/query/MLSQLDash.js","components/notebook/CodeBlock.js","components/notebook/CommandGroup.js","components/notebook/service/Engine.js","components/notebook/DataTable.js","components/notebook/DisplayGroup.js","components/notebook/ExecuteUnit.js","components/notebook/NoteBook.js","components/python/PythonACE.js","components/python/PythonEditor.js","components/editor/TabEditor.js","components/et/ETLoadParams.js","components/et/ETPopLoad.js","components/et/ETPopAlgorithm.js","components/et/ETPopSave.js","components/et/ETBaseTool.js","components/et/ETPopTool.js","components/et/ETPopDownload.js","components/et/ETPopScriptUDF.js","components/et/ETExample.js","components/et/ETRegister.js","components/et/ETStringIndex.js","components/et/ETDownloadFile.js","components/et/ETStreamProgress.js","components/et/ETPop.js","components/et/MLSQLETQuick.js","components/MLSQLQueryApp.js","common/ViewConst.js","components/demo/BigDL.js","components/demo/NLP.js","components/demo/Basic.js","components/demo/Demos.js","components/demo/MainPage.js","components/MLSQLDemoApp.js","components/team/CreateTeam.js","components/team/remote/Service.js","components/team/Teams.js","components/team/InviteMember.js","components/team/remote/Views.js","components/team/TeamMembers.js","components/team/AddRoleForTeam.js","components/team/TeamRoles.js","components/team/AddMemberForRole.js","components/team/AddTableForTeam.js","components/team/TeamTables.js","components/team/RoleMembers.js","components/team/TeamCards.js","components/cluster/remote/Service.js","components/cluster/ClusterBackends.js","components/cluster/AddClusterBackend.js","components/cluster/AddTagToRole.js","components/cluster/ConfigureDefaultBackend.js","components/cluster/AddExistClusterBackendToRole.js","components/cluster/ConfigureSchedulerBackend.js","components/cluster/ClusterCards.js","components/team/RoleTables.js","components/team/AddTableForRole.js","components/auth/AuthCards.js","components/demo/Setup.js","components/team/MLSQLChangePassword.js","components/team/SettingCards.js","components/team/MainPage.js","components/MLSQLManagerApp.js","components/script_plugins/ResultView.js","components/script_plugins/ScriptPluginView.js","components/script_plugins/MainPage.js","components/script_plugins/MLSQLScriptPluginsApp.js","user/MLSQLRegisterOrLogin.js","App.js","index.js"],"names":["RemoteAction","RUN","USER_NAME","BACKEND_URL","Method","Object","classCallCheck","this","GET","POST","PUT","DELETE","AccessToken","name","GlobalParamNames","USER_ID","ADMIN_TOKEN","LOGIN_TOKEN","RestResponse","status","content","Backend","url","fetch_config","arguments","length","undefined","createClass","key","value","_request","asyncToGenerator","regenerator_default","a","mark","_callee","action","params","method","userName","formBody","property","encodedKey","encodedValue","newurl","basic_config","final_config","response","error","json","_args","wrap","_context","prev","next","toUpperCase","sessionStorage","getItem","encodeURIComponent","push","join","timeout","headers","Content-Type","Accept","Access-Token","body","objectSpread","console","log","fetch","sent","ok","text","abrupt","t0","stop","_x","_x2","apply","ActionProxy","backend","_userName","res","get","_runScript","_callee2","sql","jobName","_res$content","backendTags","finalParams","temp","_context2","owner","sessionPerUser","show_stack","skipAuth","tags","assign","post","_x3","_get","_callee3","_context3","request","_x4","_x5","_post","_callee4","_context4","_x6","_x7","Boolean","window","location","hostname","match","Status","Success","BadRequest","Unauthorized","Forbidden","ServerError","uuidv4","require","APIResponse","accessToken","_this","process","jsonErr","then","s","jsonObj","JSON","parse","e","MLSQLAPI","successCallback","serverErrorCallback","HTTP","wow","fail","str","toString","auth","Auth","self","user","jsonRes","background","async","callback","catch","okFun","failFun","new_request","resStatus","extractMsg","err","message","USER_TAGS_UPDATE","CREATE_SCRIPT_FILE","REMOVE_SCRIPT_FILE","GET_SCRIPT_FILE","RUN_SCRIPT","FILE_UPLOAD","CREATE_TEAM","CHECK_TEAM_NAME","LIST_TEAMS","LIST_TEAMS_INVITED","ADD_TEAMS_MEMBER","ACCEPT_TEAMS_MEMBER","REFUSE_TEAMS_MEMBER","ADD_TEAMS_ROLE","ADD_TEAMS_TABLE","ADD_ROLES_TABLE","ADD_ROLES_MEMBER","CHNAGE_PASSWORD","MLSQLAuth","apiResponse","removeItem","m","request2","password","_sCallBack","_errorCallBack","registerOrLogin","setItem","Cookies","set","path","serverError","default","CodeIntellegence","lineNum","columnNum","restClient","executeMode","isDebug","wordList","assert","condition","Error","ButtonToCommand","makeSQL","LogMonitor","appendLog","_cancelQueryLog","intervalTimer","clearInterval","_queryLog","cancelQueryLog","setInterval","api","runScript","concat","map","item","split","Option","Select","MLSQLAceEditor","props","possibleConstructorReturn","getPrototypeOf","call","scriptId","setState","aceEditorRef","current","editor","setValue","executeSave","BackendConfig","assertThisInitialized","messageBox","getMessageBoxAceEditor","state","id","getAceEditor","getValue","getAllText","getSelection","selectionRange","getSelectionRange","session","getTextRange","appendToEditor","p","getCursorPosition","insert","focus","queryApp","msg","row","getLength","column","getDashBoard","dash","getDisplay","display","enterLoading","commandGroup","loading","resourceProgressRef","enter","jobProgress","taskProgressRef","exitLoading","exit","etOver","evt","et","etRef","eventName","getData","popName","processType","pathAlias","tableHidden","pathHidden","outputTableHidden","outputTableAlias","tableAlias","etPop","language","parent","React","logMonitor","cancelQuery","bind","executeQuery","parentCallback","staticWordCompleter","getCompletions","_getCompletions","pos","prefix","getSuggestList","word","desc","extra","caption","meta","completers","newValue","measureTime","Date","getTime","startTime","queryLog","update","select","finalSQL","failRes","setData","stringify","_this2","react","className","onDragOver","preventDefault","onDrop","re_resizable_lib","defaultSize","height","onResize","resize","lib_default","ref","mode","theme","width","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","autoScrollEditorIntoView","MLSQLAceEditor_CommandGroup","MLSQLAceEditor_JobProgress","MLSQLAceEditor_TaskProgress","MLSQLAceEditor_ResourceProgress","CommandGroup","_this3","es_button","onClick","es_select","style","JobProgress","_this4","setTimeout","resourceCompute","hasOwnProperty","jsonArray","progress","currentJobIndex","totalJob","percent","successPercent","title","ResourceProgress","_this5","activeTasks","totalCores","currentJobGroupActiveTasks","TaskProgress","_this6","taskCompute","_jsonObj","numTasks","numActiveTasks","numCompletedTasks","forEach","MLSQLTreeNodeBuilder","build","list","node","i","tempMap","roots","childNodes","parentId","ScriptNodeTree","_React$Component","reloadData","backendConfig","rawData","treeRes","MLSQLTreeBuilder","sort","b","nodes","notok","isRootNode","nodeId","onNodeContextMenu","_nodePath","ContextMenu","show","MLSQLTreeNode_ScriptNodeTreeMenu","isDir","left","clientX","top","clientY","isContextMenuOpen","handNodeDoubleClick","isExpanded","toggleIsExpanded","scriptFile","openExistsOrNewEditor","handleNodeClick","nodeData","originallySelected","isSelected","shiftKey","forEachNode","n","handleNodeCollapse","handleNodeExpand","openCreateScriptDialog","inherits","tree","contents","onNodeClick","onNodeCollapse","onNodeExpand","onNodeDoubleClick","MLSQLTreeNode_CreateScriptDialog","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","return","CreateScriptDialog","fileName","target","finish","create","endsWith","close","directoryTree","classes","classNames","Classes","CARD","ELEVATION_4","overlay","isOpen","usePortal","html","color","formGroup","helperText","label","labelFor","labelInfo","inputGroup","placeholder","buttons","intent","Intent","DANGER","float","ScriptNodeTreeMenu","confirmDelete","confirmAlert","removeFile","closeOnEscape","closeOnClickOutside","isCreateProject","createDocMenuItem","menuItem","icon","createFolderTitle","createFolder","deleteMenu","menu","ReactMarkdown","MLSQLQueryDisplay","setRender","keyColumn","data","config","render","isPrototypeOf","type","substring","keys","basket","rows","dataIndex","index","new_item","columns","rowDoubleClick","event","view","enabled","disablePreview","table","onRow","onDoubleClick","dataSource","modal","visible","onCancel","onOk","cancelText","OkText","source","baseStyle","borderWidth","borderColor","borderStyle","borderRadius","activeStyle","backgroundColor","rejectStyle","fileListStyle","UploadDropzone","files","req","file","attach","end","f","react_default","createElement","size","es","getDataTransferItems","fromEvent","_ref","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","styles","acceptedFiles","rejectedFiles","Component","randomColor","generateColor","MLSQLThreeDimScatterChart","haveZ","dataTypeToItems","reduce","x","y","z","dataType","Map","_config","scatters","toConsumableArray","dataTypeConfig","fill","shape","recharts_es6","xConfig","dataKey","yConfig","zConfig","margin","right","bottom","cursor","strokeDasharray","basicCheck","fun","isShouldRender","MLSQLLineChart","ys","stroke","MLSQLStream","renderStream","dataForRender","dataForRender2","jsonItem","moment","utc","timestamp","format","inputRowsPerSecond","processedRowsPerSecond","numInputRows","titleMap","isStream","renderRawData","MLSQLResource","resourceRender","cpuRenderData","gcRenderData","taskTime","gcTime","executorsRenderData","activeExecutorNum","totalExecutorNum","memoryRenderData","totalMemory","usedMemory","shuffleInfo","info","ChartCard_default","tooltip_default","icon_default","total","dangerouslySetInnerHTML","__html","shuffleData","diskSpilled","memorySpilled","inputRecords","row_default","col_default","span","Charts","hasLegend","subTitle","pre","now","valueFormat","val","isResource","MLSQLHTML","MLSQLHTML_MLSQLHTMLPanel","MLSQLHTMLPanel","refresh","sandbox","srcDoc","frameBorder","scrolling","ifr","Panel","Collapse","TabPane","Tabs","MLSQLDash","_PureComponent","isNormalXY","xYRender","Bar_default","renderDash","MLSQLResource_MLSQLResource","MLSQLStream_MLSQLStream","queryResData","collapse","header","tabs","defaultActiveKey","tab","UploadDropZone_UploadDropzone","PureComponent","CodeBlock","originalEditor","container","lineHeight","maxLines","initialCode","evtExecute","isExecute","executeUnit","execute","cancelExecute","es_icon","spin","Engine","run","show_result","fail_result","newRunScript","saveFile","code","DataTable","parseData","_this$parseData","_this$parseData2","slicedToArray","_this$parseData3","_this$parseData4","DataTable_ReactMarkdown","DisplayGroup","displayData","errorMsg","displayTableRef","displayDashRef","displayDash","displayError","displayTable","DataTable_DataTable","ExecuteUnit","codeBlock","displayGroup","notebook","nextExecuteUnit","codeBlockIsEmpty","getCodeStr","CodeBlock_CodeBlock","CommandGroup_CommandGroup","DisplayGroup_DisplayGroup","CODE_SPLITTER","NodeBook","createNewExecuteUnit","ExecuteUnit_ExecuteUnit","addRef","instance","executeUnitRefs","slice","executeUnits","saveNoteBook","engine","PythonACE","runMode","ex","PythonACE_CommandGroup","PythonEditor","python_PythonACE","TabEditor","pushRef","myRefs","getCurrentEditor","activeKey","currentItem","panes","displayEditor","onEdit","targetKey","addFull","tabName","newTabIndex","src_components_MLSQLAceEditor","NoteBook_NodeBook","PythonEditor_PythonEditor","add","getPaneIndexByActiveKey","lastIndex","pane","remove","filter","editorRefList","closeEditor","TabEditor_TabPane","closable","InputGroup","Input","Group","ETLoadParams","etPopLoad","compact","ETPopLoad","getAttribute","sourceType","sourceTypeV","es_row","param","es_col","input","marginBottom","addonBefore","description","loadParamsRef","pathV","tableName","tableNameV","makeMLSQL","paramsArray","k","v","rv","replace","whereStr","etpop","datasourcesRender","ETPopLoad_Option","ETPopLoad_InputGroup","showSearch","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","ETLoadParams_ETLoadParams","TextArea","ETPopAlgorithm","renderParam","ETPopAlgorithm_InputGroup","ETPopSave","saveMode","saveModeV","partitionBy","partitionByV","fileNum","fileNumV","partitionByStr","fileNumStr","ETPopSave_Option","ETPopSave_InputGroup","ETBaseTool","ETBaseTool_TextArea","outputTableName","outputTableNameV","showTableName","ETBaseTool_InputGroup","showOutputTableName","pathNameForRender","showPathName","asStr","ETPopTool","_ETBaseTool","prototype","ETPopDownload","_ETPopTool","_getPrototypeOf2","_len","args","Array","_key","ETPopDownload_InputGroup","ETPopScriptUDF","udfName","udfNameV","dataTypeV","udfType","udfTypeV","codeV","langSelect","lang","codeCheckRef","checked","codeLang","setCodeExample","codeRef","codeExample","showDataType","ETPopScriptUDF_TextArea","showCode","switch_default","ETPopScriptUDF_Option","ETExample","etName","ETExample_Option","ETRegister","ETRegister_Option","ETStringIndex","sqlTrain","sqlBatchPredict","functionNameV","stripMargin","functionName","ETStringIndex_InputGroup","ETDownloadFile","link","document","href","appendChild","click","removeChild","ETStreamProgress","jobType","ETStreamProgress_Option","ETPop","disableEtModalVisible","etModalVisible","enableEtModalVisible","popChild","renderContent","ETPopLoad_ETPopLoad","ETPopSave_ETPopSave","ETPopDownload_ETPopDownload","ETStringIndex_ETStringIndex","ETDownloadFile_ETDownloadFile","ETExample_ETExample","ETStreamProgress_ETStreamProgress","ETPopScriptUDF_ETPopScriptUDF","ETRegister_ETRegister","ETPopTool_ETPopTool","ETPopAlgorithm_ETPopAlgorithm","Modal_default","okText","MLSQLETQuick","itemData","onDragStart","renderPop","ETPop_ETPop","etDoubleClick","padding","MLSQLETQuick_Panel","gutter","card","tag_default","tyle","help","draggable","processtype","pathalias","tablehidden","pathhidden","outputtablehidden","outputtablealias","tablealias","MLSQLQueryApp","script","fileToEditorMap","editorRef","editorGroup","tempFileToEditorMap","tableAndDash","MLSQLDash_MLSQLDash","MLSQLQueryDisplay_MLSQLQueryDisplay","sqlContent","createRef","MLSQLTreeNode_ScriptNodeTree","MLSQLETQuick_MLSQLETQuick","TabEditor_TabEditor","VIEW_CONSOLE","VIEW_TEAM","VIEW_DEMO","VIEW_SCRIPT_PLUGINS","DEMO_VIEW_BIGDL","DEMO_VIEW_NLP","DEMO_VIEW_STREAM","DEMO_VIEW_BASIC","TEAM_VIEW_BASIC","SETUP_VIEW_BASIC","CLUSTER_VIEW_BASIC","AUTH_VIEW_BASIC","SETTING_VIEW_BASIC","Step","Steps","BigDL","getEditor","techData","generateTechData","commandData","generateCommandData","steps","generateSteps","step","marginTop","footer","bordered","renderItem","Item","generateView","success","marginLeft","BigDL_ReactMarkdown","NLP","_BigDL","NLP_ReactMarkdown","Basic","Basic_ReactMarkdown","Demos","renderView","currentView","BigDL_BigDL","NLP_NLP","Basic_Basic","Header","Layout","Content","Footer","Sider","MainPage","switchToBigDL","demosRef","switchToNLP","switchToStream","switchToBasic","layout","minHeight","es_menu","defaultSelectedKeys","block","Demos_Demos","textAlign","MLSQLDemoApp","MainPage_MainPage","CreateTeamForm","handleSubmit","form","validateFields","resJson","teamCards","teamsRef","warning","failStr","teamNameCheck","rule","getFieldDecorator","es_form","onSubmit","rules","required","validator","htmlType","MLSQLCreateTeamForm","Form","Service","apiUrl","stateKey","defineProperty","MESSAGE_TIMEOUT","teamName","roleName","tableId","Teams","accept","teamInvite","fetchTeams","teamYourJoinRef","refuse","renderCommand","actions","Meta","InviteMember","renderTeams","teams","MLSQLInviteMember","Views","renderTeamsForSelect","onTeamSelect","currentTeamName","TeamService","fetchRoles","renderRoles","roles","renderMembers","members","renderBackends","backends","teamSelect","onChangeCallback","roleSelect","backendSelect","memberSelect","TeamMembers","selectTeam","member","currentTeam","fetchMembersByTeam","removeTeamMember","AddRoleForTeam","MLSQLAddRoleForTeam","TeamRoles","removeRole","AddMemberForRole","roleMembersRef","MLSQLAddMemberForRole","AddTableForTeam","renderTableTypes","tableTypes","renderSourceTypes","sourceTypes","fetchTableTypes","fetchSourceTypes","MLSQLAddTableForTeam","RoleMembers","onRoleSelect","currentRoleName","fetchMembersByRole","removeRoleMember","TeamCards","openNotificationWithIcon","notification","teamRolesRef","teamMembersRef","roleTablesRef","Teams_Teams","TeamMembers_TeamMembers","TeamRoles_TeamRoles","RoleMembers_RoleMembers","newParams","names","backendName","merge","ClusterBackends","dataViewer","tag","fetchBackends","ecsResourcePoolId","newitem","objectWithoutProperties","CluserService","removeBackend","TeamViews","AddClusterBackend","acc","ClusterService","addBackend","checkBackendName","MLSQLAddClusterBackend","AddTagToRole","renderTags","tagsWithDuplicate","items","Set","ConfigureDefaultBackend","includes","MLSQLConfigureDefaultBackend","AddExistClusterBackendToRole","updateBackendTags","fetchBackendNamesByTeam","backendNames","fetchBackendsByNames","MLSQLAddExistClusterBackendToRole","ConfigureSchedulerBackend","isScheduler","MLSQLConfigureSchedulerDefaultBackend","ClusterCards","backendsRef","ClusterBackends_ClusterBackends","RoleTables","currentRole","fetchTablesByRole","tableNameId","removeRoleTable","defaultValue","renderTables","tables","tableType","operateType","AddTableForRole","authCards","fetchTables","fetchOperateTypes","db","renderOperateTypes","operateTypes","MLSQLAddTableForRole","AuthCards","RoleTables_RoleTables","Setup","Setup_Step","margin-top","ChangePassword","MLSQLChangePassword","SettingCards","switchToSetup","switchToCluster","switchToAuth","switchToSetting","Setup_Setup","TeamCards_TeamCards","ClusterCards_ClusterCards","AuthCards_AuthCards","SettingCards_SettingCards","app","MainPage_Sider","MainPage_Header","MainPage_Content","MainPage_Footer","MLSQLManagerApp","team_MainPage_MainPage","ResultView","nav","entries","collected_params","current_plugin_name","formItemLayout","labelCol","wrapperCol","formTailLayout","offset","ScriptPluginView","buildForm","ResultView_ResultView","formItems","formItem","final","values","pushParam","ScriptPluginView_Step","ScriptPluginViewForm","showTut","pluginName","data_plugin","data_menu","script_plugins_MainPage_Sider","script_plugins_MainPage_Header","script_plugins_MainPage_Content","script_plugins_MainPage_Footer","MLSQLScriptPluginsApp","script_plugins_MainPage_MainPage","LOGIN","REGISTER","WelcomeMessage","getLoginOrRegisterManager","registerOrLoginRef","logout","updateLoginoutStatus","login","loginType","register","isLogin","LoginButton","LogoutButton","RegisterButton","MLSQLRegisterOrLogin","_React$Component2","registerSuccess","registerOrLoginSuccess","registerFail","FormValidate","validate","src_components_MLSQLQueryApp","MLSQLDemoApp_MLSQLDemoApp","MLSQLManagerApp_MLSQLManagerApp","MLSQLScriptPluginsApp_MLSQLScriptPluginsApp","validateUserName","validatePassword","isEmail","test","normal","inject","App","menuRef","switchToTeam","switchToConsole","switchToDemo","switchToScriptPlugins","switchToCnDoc","open","navbar","align","Alignment","LEFT","Heading","Divider","RIGHT","MLSQLRegisterOrLogin_WelcomeMessage","MLSQLRegisterOrLogin_MLSQLRegisterOrLogin","src","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a6c1df6.chunk.js","sourcesContent":["export default class RemoteAction{\n    static RUN = \"/api_v1/run/script\"\n    static USER_NAME = \"/api_v1/user/userName\"\n}","export const BACKEND_SERVER = \"\";\nexport const BACKEND_URL = BACKEND_SERVER;\n\n\nexport class Method{\n    static GET = \"get\"\n    static POST = \"post\"\n    static PUT = \"put\"\n    static DELETE  = \"delete\"    \n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n\n","export class LangKey{\n    static firstName = \"firstName\"   \n}\nexport class GlobalParamNames {\n    static USER_NAME = \"userName\"\n    static USER_ID = \"userId\"\n    static ADMIN_TOKEN = \"admin_token\"\n    static LOGIN_TOKEN = \"access-token\"\n}","import { BACKEND_URL, AccessToken } from './RestConst'\nimport { GlobalParamNames } from '../Dicts'\n\nexport class RestResponse {\n    constructor(status, content) {\n        this.status = status\n        this.content = content\n    }\n}\n\nexport class Backend {\n\n    constructor(url, fetch_config = {}) {\n        this.url = url\n        if (!this.url) {\n            this.url = BACKEND_URL\n        }\n        this.fetch_config = fetch_config\n    }\n\n    async request(action, params, method = \"GET\") {\n        method = method.toUpperCase();\n        const userName = sessionStorage.getItem(GlobalParamNames.USER_NAME)\n        //const loginToken = sessionStorage.getItem(GlobalParamNames.LOGIN_TOKEN)\n        if (userName) {\n            params[GlobalParamNames.USER_NAME] = userName\n        }\n\n        // if (loginToken) {\n        //     params[GlobalParamNames.LOGIN_TOKEN] = loginToken\n        // }\n\n        let formBody = [];\n        for (let property in params) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(params[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n        let newurl = this.url + action\n\n        if (formBody.length > 0) {\n            newurl = newurl + \"?\"\n        }\n\n        if (method === \"GET\") {\n            newurl = newurl + formBody.join(\"&\")\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n\n        const basic_config = {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(AccessToken) || ''\n            },\n            body: formBody\n        }\n\n        const final_config = { ...basic_config, ...this.fetch_config }\n\n        try {\n            console.log(newurl)\n            const response = await fetch(newurl, final_config);\n            if (!response.ok) {\n                const error = await response.text()\n                return new RestResponse(response.status, error);\n            }\n            const json = await response.json();\n            return new RestResponse(200, json);\n        } catch (err) {\n            return new RestResponse(500, err);\n        }\n    }\n}\n","import { RestResponse, Backend } from './backend/Backend'\nimport RemoteAction from './RemoteAction'\nimport { Method, Status } from './backend/RestConst'\n\n\nexport class ActionProxy {\n  constructor() {\n    this.backend = new Backend()\n  }\n\n  async userName() {\n    const res = await this.get(RemoteAction.USER_NAME, {})\n    return res\n  }\n\n  async runScript(sql, jobName, params) {\n    const res = await this.userName()\n    if (res.status !== 200) {\n      return res\n    }\n    const { userName, backendTags } = res.content\n\n    const finalParams = {\n      sql: sql,\n      owner: userName,\n      jobName: jobName,\n      sessionPerUser: true,\n      show_stack: true,\n      skipAuth: false,\n      tags: backendTags || \"\"\n    }\n    Object.assign(finalParams, params)\n    const temp = await this.post(RemoteAction.RUN, finalParams)\n    return temp\n  }\n\n  /**\n   * \n   * @param {string} action \n   * @param {{}} params \n   * @return {RestResponse}\n   */\n  async get(action, params) {\n    const res = await this.backend.request(action, params, Method.GET)\n    return res\n  }\n\n  /**\n   * \n   * @param {string} action \n   * @param {{}} params \n   * @returns {RestResponse}\n   */\n  async post(action, params) {\n    const res = await this.backend.request(action, params, Method.POST)\n    return res\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const Method = {\n    GET: \"get\",\n    POST: \"post\",\n    PUT: \"put\"\n}\n\nexport const Status = {\n    Success: 200,\n    BadRequest: 400,\n    Unauthorized: 401,\n    Forbidden: 404,\n    ServerError: 500\n}\n\nexport const AccessToken = {\n    name: \"access-token\"\n}\n","import * as HTTP from \"../service/HTTPMethod\";\nimport {MLSQLAuth as Auth} from \"../user/MLSQLAuth\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport class ServerError {\n    constructor(content) {\n        this.value = content\n    }\n}\n\nexport class APIResponse {\n    /**\n     * @param {Number} status\n     * @param {Promise<String>} content\n     * @param {String} accessToken\n     */\n    constructor(status, content, accessToken) {\n        this.status = status;\n        this.content = content;\n        this.accessToken = accessToken\n    }\n\n    json = (process, jsonErr) => {\n\n        this.content.then((s) => {\n            try {\n                const jsonObj = JSON.parse(s)\n                process(jsonObj)\n            } catch (e) {\n                console.log(e)\n                jsonErr(s)\n            }\n\n        })\n    }\n\n}\n\nexport class MLSQLAPI {\n\n    constructor(url) {\n        this.url = url;\n    }\n\n\n    request2(params, successCallback, serverErrorCallback) {\n        const self = this\n        self.request(HTTP.Method.POST, params, (ok) => {\n            ok.json((wow) => {\n                successCallback(wow)\n            }, (jsonErr) => {\n                serverErrorCallback(jsonErr)\n            })\n        }, (fail) => {\n            try {\n                fail.value().content((str) => {\n                    let res = str\n                    try {\n                        res = JSON.parse(str)[\"msg\"]\n                    } catch (e) {\n\n                    }\n                    serverErrorCallback(res)\n                })\n            } catch (e) {\n                serverErrorCallback(fail ? fail.toString() : \"result is null\")\n            }\n\n        })\n    }\n\n    runScript(params, sql, successCallback, serverErrorCallback) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes            \n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.request(HTTP.Method.POST, finalParams, (ok) => {\n                if (ok.status === 200) {\n                    ok.json((wow) => {\n                        successCallback(wow)\n                    }, (jsonErr) => {\n                        serverErrorCallback(jsonErr)\n                    })\n                } else {\n                    try {\n                        ok.content.then((str) => {\n                            let res = str\n                            try {\n                                res = JSON.parse(str)[\"msg\"]\n                            } catch (e) {\n\n                            }\n                            serverErrorCallback(\"backend status:\" + ok.status + \"\\n\" + res)\n                        })\n                    } catch (e) {\n                        serverErrorCallback(\"backend status:\" + ok.status)\n                    }\n                }\n\n            }, (fail) => {\n                try {\n                    fail.value().content((str) => {\n                        let res = str\n                        try {\n                            res = JSON.parse(str)[\"msg\"]\n                        } catch (e) {\n\n                        }\n                        serverErrorCallback(res)\n                    })\n                } catch (e) {\n                    serverErrorCallback(fail ? fail.toString() : \"result is null\")\n                }\n\n            })\n        })\n    }\n\n    request(method, body, successCallback, serverErrorCallback) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        }).then((res) => {\n            successCallback(new APIResponse(res.status, res.text(), res.headers.get(HTTP.AccessToken.name)))\n        })\n            .catch((res) => {\n                serverErrorCallback(new ServerError(res))\n            })\n    }\n\n    newRunScript(params, sql, okFun, failFun) {\n        const auth = new Auth()\n        const jobName = uuidv4()\n        const self = this\n        auth.user((jsonRes) => {\n            const {userName, backendTags} = jsonRes\n\n            if (!backendTags) {\n                failFun(`\n                \n                ---------------Warning--------------------\n                \n                Please make sure you have backend configured. \n                If not, please contact admin;\n                \n                ------------------------------------------\n                `)\n                return\n            }\n\n            const finalParams = {\n                sql: sql,\n                owner: userName,\n                jobName: jobName,\n                sessionPerUser: true,\n                show_stack: true,\n                skipAuth: false,\n                tags: backendTags || \"\"\n            }\n            Object.assign(finalParams, params)\n            const background = params.background || false\n            if (background) {\n                Object.assign(finalParams, {async: true, callback: \"\"})\n            }\n\n            self.new_request(HTTP.Method.POST, finalParams, okFun, failFun)\n        })\n    }\n\n    new_request(method, body, okFun, failFun) {\n        method = method.toUpperCase();\n\n        let formBody = [];\n        for (let property in body) {\n            let encodedKey = encodeURIComponent(property);\n            let encodedValue = encodeURIComponent(body[property]);\n            formBody.push(encodedKey + \"=\" + encodedValue);\n        }\n\n        let newurl = this.url\n\n        if (method === \"GET\") {\n            newurl = newurl + \"?\" + formBody\n            formBody = undefined\n        } else {\n            formBody = formBody.join(\"&\")\n        }\n        let resStatus = 0\n\n        return fetch(newurl, {\n            method: method,\n            timeout: 1000 * 60 * 60 * 24,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json',\n                'Access-Token': sessionStorage.getItem(HTTP.AccessToken.name) || ''\n            },\n            body: formBody\n        }).then((res) => {\n            resStatus = res.status\n            if (resStatus === 200) {\n                res.json().then((value) => {\n                    okFun(value)\n                })\n            }\n            return res\n        }).then(res => {\n            const extractMsg = () => {\n                res.text().then(value => {\n                        try {\n                            failFun(JSON.parse(value)[\"msg\"])\n                        } catch (e) {\n                            failFun(value)\n                        }\n                    }\n                )\n            }\n\n            switch (resStatus) {\n                case 201:\n                    break\n                case 400:\n                    extractMsg()\n                    break\n                case 500:\n                    extractMsg()\n                    break\n                default:\n                    console.log('unhandled')\n                    break\n            }\n        })\n            .catch((err) => {\n                failFun(err.message)\n            })\n    }\n}","export const BACKEND_SERVER = \"\";\nexport const REGISTER_URL = BACKEND_SERVER + \"/api_v1/user/register\";\nexport const USERNAME_URL = BACKEND_SERVER + \"/api_v1/user/userName\";\nexport const USER_TAGS_UPDATE = BACKEND_SERVER + \"/api_v1/user/tags/update\";\nexport const USERS_URL = BACKEND_SERVER + \"/api_v1/users\";\nexport const LOGIN_URL = BACKEND_SERVER + \"/api_v1/user/login\";\nexport const CREATE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file\";\nexport const REMOVE_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/remove\";\nexport const GET_SCRIPT_FILE = BACKEND_SERVER + \"/api_v1/script_file/get\";\nexport const RUN_SCRIPT = BACKEND_SERVER + \"/api_v1/run/script\";\nexport const CLUSTER_MANAGER = BACKEND_SERVER + \"/api_v1/cluster\";\nexport const FILE_UPLOAD = BACKEND_SERVER + \"/api_v1/file/upload\";\nexport const FILE_DOWNLOAD = BACKEND_SERVER + \"/api_v1/file/download\";\n\n\nexport const CREATE_TEAM = BACKEND_SERVER + \"/api_v1/team/create\";\nexport const CHECK_TEAM_NAME = BACKEND_SERVER + \"/api_v1/team/name/check\";\nexport const LIST_TEAMS = BACKEND_SERVER + \"/api_v1/team\";\n\nexport const LIST_TEAMS_JOINED = BACKEND_SERVER + \"/api_v1/team/joined\";\nexport const LIST_TEAMS_INVITED = BACKEND_SERVER + \"/api_v1/team/invited\";\n\nexport const LIST_TEAMS_IN = BACKEND_SERVER + \"/api_v1/team/in\";\n\n\nexport const ADD_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/add\";\nexport const REMOVE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/remove\";\nexport const LIST_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/members\";\n\nexport const ACCEPT_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/accept\";\nexport const REFUSE_TEAMS_MEMBER = BACKEND_SERVER + \"/api_v1/team/member/refuse\";\n\nexport const ADD_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/add\";\nexport const REMOVE_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/role/remove\";\nexport const LIST_TEAMS_ROLE = BACKEND_SERVER + \"/api_v1/team/roles\";\n\nexport const ADD_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/add\";\nexport const REMOVE_TEAMS_TABLE = BACKEND_SERVER + \"/api_v1/team/table/remove\";\nexport const LIST_TEAMS_TABLES = BACKEND_SERVER + \"/api_v1/team/tables\";\n\n\nexport const ADD_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/add\";\nexport const REMOVE_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/table/remove\";\nexport const LIST_ROLES_TABLE = BACKEND_SERVER + \"/api_v1/role/tables\";\n\nexport const ADD_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/add\";\nexport const REMOVE_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/member/remove\";\nexport const LIST_ROLES_MEMBER = BACKEND_SERVER + \"/api_v1/role/members\";\n\nexport const LIST_BACKENDS_BY_TEAM = BACKEND_SERVER + \"/api_v1/backends\";\n\nexport const CHNAGE_PASSWORD = BACKEND_SERVER + \"/api_v1/changepassword\";","import React from \"react\";\nimport {MLSQLAPI, APIResponse, ServerError} from \"../service/MLSQLAPI\";\nimport * as backendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport Cookies from 'universal-cookie';\n\n\nexport class MLSQLAuth {\n\n    isLogin() {\n        return sessionStorage.getItem(HTTP.AccessToken.name) !== null\n    }\n\n    /**\n     *\n     * @param callback {(userName)=>{}}\n     */\n    userName(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            /**\n             *  if server return unauthorized status, then we should\n             *  remove our token since it maybe invalidate.\n             */\n            if (apiResponse.status === HTTP.Status.Unauthorized) {\n                sessionStorage.removeItem(HTTP.AccessToken.name)\n            } else {\n                apiResponse.content.then((s => {\n                    callback(JSON.parse(s)[\"userName\"])\n                })).catch((error) => {\n                })\n            }\n        }\n\n        api.request(HTTP.Method.GET, {}, sCallBack, (m) => {\n            console.log(m)\n        })\n    }\n\n    user(callback) {\n\n        const api = new MLSQLAPI(backendConfig.USERNAME_URL)\n        api.request2({}, (json) => {\n            callback(json)\n        }, (str) => {\n\n        })\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    login(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.LOGIN_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    logout() {\n        sessionStorage.removeItem(HTTP.AccessToken.name)\n    }\n\n    /**\n     * @param {String} userName\n     * @param {String} password\n     */\n    register(userName, password, _sCallBack, _errorCallBack) {\n        this.registerOrLogin(backendConfig.REGISTER_URL, userName, password, _sCallBack, _errorCallBack)\n    }\n\n    registerOrLogin(url, userName, password, _sCallBack, _errorCallBack) {\n        const api = new MLSQLAPI(url)\n\n        const body = {\n            userName: userName,\n            password: password\n        }\n\n        /**\n         * @param  {APIResponse} apiResponse\n         */\n        const sCallBack = (apiResponse) => {\n            if (apiResponse.accessToken) {\n                sessionStorage.setItem(HTTP.AccessToken.name, apiResponse.accessToken)\n                const cookies = new Cookies();\n                cookies.set(HTTP.AccessToken.name, apiResponse.accessToken, { path: '/' });\n            }\n            _sCallBack(apiResponse)\n        }\n        /**\n         *\n         * @param {ServerError} serverError\n         */\n        const errorCallBack = (serverError) => {\n            _errorCallBack(serverError)\n        }\n        api.request(HTTP.Method.POST, body, sCallBack, errorCallBack)\n    }\n}","const { ActionProxy } = require(\"../backend_service/ActionProxy\");\nconst { default: RemoteAction } = require(\"../backend_service/RemoteAction\");\n\nexport default class CodeIntellegence {\n     static async getSuggestList(sql,lineNum,columnNum){\n    \n    const restClient = new ActionProxy()\n\n    const res = await restClient.post(RemoteAction.RUN,{\n        executeMode: \"autoSuggest\",\n        sql: sql, \n        lineNum: lineNum +1,\n        columnNum: columnNum,\n        isDebug: true \n    })\n\n    if(res && res.status == 200){\n        const wordList = res.content\n        return wordList\n    }else {\n        return []\n    } \n   } \n}","export const assert = (condition, message) => {\n    if (!condition) {\n        message = message || \"Assertion failed\";\n        if (typeof Error !== \"undefined\") {\n            throw new Error(message);\n        }\n        throw message; // Fallback\n    }\n}\n","export class ButtonToCommand {\n    makeSQL = (name) => {\n        if (name === \"JobList\") {\n            return `load _mlsql_.\\`jobs\\` as output;`\n        }\n        if (name === \"ConnectMySQL\") {\n            return `connect jdbc where\n url=\"jdbc:mysql://127.0.0.1:3306/wow?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\"\n and driver=\"com.mysql.jdbc.Driver\"\n and user=\"\"\n and password=\"\"\n as db_1;`\n        }\n\n        if (name === \"ShowResource\") {\n            return `load _mlsql_.\\`resource\\` as output;`\n        }\n        return \"\"\n    }\n}","import {ActionProxy} from '../backend_service/ActionProxy'\nconst uuidv4 = require('uuid/v4');\n\nexport class LogMonitor {\n    constructor(appendLog) {\n        this.appendLog = appendLog\n        this.log = {}\n    }\n    async cancelQueryLog() {\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer)\n            this.intervalTimer = null\n        }\n    }\n\n    async queryLog() {\n        this.cancelQueryLog()\n        this.intervalTimer = setInterval(async () => {\n            const jobName = uuidv4()\n            const api = new ActionProxy()            \n            const res = await api.runScript(`load _mlsql_.\\`log/${this.log['offset'] || -1}\\` where filePath=\"engine_log\" as output;`, jobName, {})\n            const jsonObj = res.content[0]\n            if (jsonObj['value'].length > 0) {\n                this.appendLog(jsonObj['value'].map(item => {\n                    return item.split(\"__MMMMMM__\")[1]\n                }).join(\"\\n\"))\n            }\n            this.log['offset'] = jsonObj[\"offset\"]\n        }, 2000)\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\nimport CodeIntellegence from '../service2/CodeIntellegence'\n\nimport './MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport {Button, Tooltip, Progress} from 'antd';\nimport {MLSQLAPI} from \"../service/MLSQLAPI\";\nimport * as BackendConfig from \"../service/BackendConfig\";\nimport * as HTTP from \"../service/HTTPMethod\";\nimport {assert} from \"../common/tool\"\nimport {ButtonToCommand} from \"./et/ButtonToCommand\";\nimport {Select} from 'antd';\nimport {Resizable} from \"re-resizable\";\nimport { LogMonitor } from \"../common/LogMonitor\";\nimport {ActionProxy} from '../backend_service/ActionProxy'\n\nconst {Option} = Select;\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass MLSQLAceEditor extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.language = this.props.language || \"sql\"\n        this.queryApp = this.props.parent\n        this.aceEditorRef = React.createRef()\n        this.commandGroup = React.createRef()\n        this.resourceProgressRef = React.createRef()\n        this.jobProgress = React.createRef()\n        this.taskProgressRef = React.createRef()\n\n        this.logMonitor = new LogMonitor(this.appendLog)\n\n        this.cancelQuery = this.cancelQuery.bind(this)\n        this.executeQuery = this.executeQuery.bind(this)\n\n        this.state = {value: \"\", loading: false}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({value: value, scriptId: scriptId}, () => {\n            this.aceEditorRef.current.editor.setValue(value, 1)\n        })\n\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n\n        var staticWordCompleter = {\n            getCompletions: async function(editor, session, pos, prefix, callback) {\n                var wordList = await CodeIntellegence.getSuggestList(editor.getValue(),pos.row,pos.column)\n                callback(null, wordList.map(function(word) {\n                    let desc = \"\"\n                    if(\"desc\" in word.extra){\n                        desc= word.extra[\"desc\"]\n                    }\n                    return {\n                        caption: word.name,\n                        value: word.name,\n                        meta: desc\n                    };\n                }));\n        \n            }\n        }\n        this.getAceEditor().completers = [staticWordCompleter]\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    self.appendLog(wow[\"msg\"])\n                }, (jsonErr) => {\n                    self.appendLog(jsonErr)\n                })\n            } else {\n                self.appendLog(\"saved\")\n            }\n\n        }, (fail) => {\n            self.appendLog(fail)\n        })\n\n    }\n\n    async executeQuery(){\n        this.logMonitor.queryLog()\n        const jobName = uuidv4()\n\n        this.enterLoading(jobName)    \n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n        self.getDisplay().update(JSON.parse(\"[]\"))\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const startTime = new Date().getTime();\n\n        function measureTime() {\n            self.exitLoading()\n            const endTime = new Date().getTime()\n            return endTime - startTime\n        }\n\n        const timeout = this.commandGroup.current.state.timeout\n        this.jobName = jobName\n\n        const api = new ActionProxy()\n        const res = await api.runScript(finalSQL, jobName, {\n            jobName: jobName,\n            background: (this.state.background || false),\n            timeout: timeout\n        }) \n        \n        //clean status\n        try {\n            this.logMonitor.cancelQueryLog()\n            self.exitLoading() \n            this.jobName = null\n        }catch(e){\n\n        }                \n        if(res.status !== 200){            \n            let failRes = \"\"\n            try {\n                failRes = JSON.parse(res.content)[0][\"msg\"]\n            } catch (e) {\n                failRes = res.content\n            }            \n            self.appendLog(failRes + \"\\nTime cost:\" + measureTime() + \"ms\")            \n            return \n        }\n\n        if(res.status === 200){\n            try {\n                self.queryApp.setData(res.content)\n                self.getDisplay().update(res.content)\n                self.appendLog(\"\\nTime cost:\" + measureTime() + \"ms\")\n            } catch (e) {\n                console.log(e)\n                self.appendLog(\"Can not display the result. raw data:\\n\" + JSON.stringify(res.content, null, 2))\n            }\n                                   \n        }        \n\n    }\n\n    async cancelQuery() {\n        if (!this.jobName) return\n        const jobName = uuidv4()\n        const api = new ActionProxy()\n        const res = await api.runScript(\"!kill \" + this.jobName+\";\", jobName, {})                        \n        try {\n            this.appendLog(res.content[0]['description'])                \n        }catch(e){\n            this.appendLog(res.content)\n        }\n        \n        this.jobName = null\n        this.logMonitor.cancelQueryLog()\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.current.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    appendLog = (msg) => {\n        const editor = this.getMessageBoxAceEditor()\n        const session = editor.session\n        session.insert({\n            row: session.getLength(),\n            column: 0\n        }, \"\\n\" + msg)\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    enterLoading = (jobName) => {\n        this.commandGroup.current.setState({loading: true});\n        this.resourceProgressRef.current.enter({jobName: jobName})\n        this.jobProgress.current.enter({jobName: jobName})\n        this.taskProgressRef.current.enter({jobName: jobName})        \n    }\n\n    exitLoading = () => {\n        this.commandGroup.current.setState({loading: false});\n        this.jobProgress.current.exit()\n        this.resourceProgressRef.current.exit()\n        this.taskProgressRef.current.exit()        \n    }\n    etOver = (evt) => {\n        const et = this.queryApp.etRef.current\n        const eventName = et.getData(\"eventName\")\n        const popName = et.getData(\"popName\")\n        const processType = et.getData(\"processType\")\n        const pathAlias = et.getData(\"pathAlias\")\n        const tableHidden = et.getData(\"tableHidden\")\n        const pathHidden = et.getData(\"pathHidden\")\n        const outputTableHidden = et.getData(\"outputTableHidden\")\n        const outputTableAlias = et.getData(\"outputTableAlias\")\n        const tableAlias = et.getData(\"tableAlias\")\n\n        if (processType === \"direct\") {\n            this.appendToEditor(new ButtonToCommand().makeSQL(eventName))\n        } else {\n            et.setState({\n                etPop: true,\n                eventName: eventName,\n                popName: popName,\n                processType: processType,\n                pathAlias: pathAlias,\n                tableHidden: tableHidden,\n                pathHidden: pathHidden,\n                outputTableHidden: outputTableHidden,\n                outputTableAlias: outputTableAlias,\n                tableAlias: tableAlias\n            })\n        }\n\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}>\n                    <Resizable defaultSize={{height: \"500px\"}} onResize={()=>{this.aceEditorRef.current.editor.resize();}}><AceEditor\n                        ref={this.aceEditorRef}\n                        mode={this.language}\n                        theme=\"github\"\n                        width={\"100%\"}\n                        height={\"100%\"}\n                        onChange={this.onChange}\n                        name=\"mlsql_editor\"\n                        fontSize={16}\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        editorProps={{\n                            $blockScrolling: Infinity\n                        }}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: false,\n                            showLineNumbers: true,\n                            tabSize: 2,\n                            autoScrollEditorIntoView: true\n                        }}\n                    /></Resizable>\n                </div>\n\n                <CommandGroup ref={this.commandGroup} parent={this}/>\n                <JobProgress ref={this.jobProgress} parent={this}></JobProgress>\n                <TaskProgress ref={this.taskProgressRef} parent={this}></TaskProgress>\n                <ResourceProgress ref={this.resourceProgressRef} parent={this}></ResourceProgress>\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, timeout: \"-1\"}\n        this.parent = props.parent\n    }\n\n    onChange = (value) => {\n        this.setState({timeout: value})\n    }\n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                        loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.cancelQuery}>Cancel</Button>      \n                <Button onClick={this.parent.executeSave}>Save</Button>                \n                Job Timeout:<Select\n                onChange={this.onChange}\n                style={{width: \"120px\"}}\n            >\n                <Option value=\"10000\">10s</Option>\n                <Option value=\"30000\">30s</Option>\n                <Option value=\"60000\">60s</Option>\n                <Option value=\"1800000\">30m</Option>\n                <Option value=\"7200000\">2h</Option>\n                <Option value=\"28800000\">8h</Option>\n                <Option value=\"-1\">unlimited</Option>\n            </Select>\n            </div>\n        )\n    }\n\n}\n\nclass JobProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`jobs/get/${jobName}\\` as wow;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    console.log(jsonObj)\n                                    const p = jsonObj.progress.currentJobIndex / jsonObj.progress.totalJob * 100\n                                    self.setState({\n                                        percent: p,\n                                        successPercent: p,\n                                        title: `Jobs: current/Total: ${jsonObj.progress.currentJobIndex}/${jsonObj.progress.totalJob })`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nclass ResourceProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n        setTimeout(() => {\n                if (self.state.mark) {\n                    self.setState({loading: true})\n                    self.intervalTimer = setInterval(() => {\n                            if (self.resourceCompute === \"loading\") {\n                                return\n                            }\n                            self.resourceCompute = \"loading\"\n                            const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                            assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                            const jobName = params[\"jobName\"]\n                            api.runScript({},\n                                `load _mlsql_.\\`resource/${jobName}\\` as output;`, (jsonArray) => {\n                                    const jsonObj = jsonArray[0]\n                                    self.setState({\n                                        percent: jsonObj.activeTasks / jsonObj.totalCores * 100,\n                                        successPercent: jsonObj.currentJobGroupActiveTasks / jsonObj.totalCores * 100,\n                                        title: `Resource (for all users): taken/Total: ${jsonObj.activeTasks}/${jsonObj.totalCores}(${jsonObj.currentJobGroupActiveTasks} you took)`\n                                    })\n                                    self.resourceCompute = \"loaded\"\n                                }, (str) => {\n                                    self.resourceCompute = \"loaded\"\n                                    try {\n                                        self.parent.appendLog(str)\n                                    } catch (e) {\n                                        console.log(e)\n                                    }\n\n                                })\n\n                        }\n                        ,\n                        1000\n                    )\n                }\n\n            }\n\n            ,\n            1000\n        )\n\n    }\n\n    exit = () => {\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\n\nclass TaskProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {loading: false, percent: 0, successPercent: 0, mark: false}\n        this.parent = props.parent\n    }\n\n    enter = (params) => {\n        const self = this\n        this.setState({mark: true})\n\n        setTimeout(() => {\n            if (self.state.mark) {\n                self.setState({loading: true})\n                self.intervalTimer = setInterval(() => {\n\n                        if (self.taskCompute === \"loading\") {\n                            return\n                        }\n                        self.taskCompute = \"loading\"\n                        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n                        assert(params.hasOwnProperty(\"jobName\"), \"jobName is required\")\n                        const jobName = params[\"jobName\"]\n                        api.runScript({}, `load _mlsql_.\\`jobs/${jobName}\\` as output;`, (jsonArray) => {\n                            self.taskCompute = \"loaded\"\n                            const _jsonObj = jsonArray[0]\n                            const jsonObj = {\n                                numTasks: 0,\n                                numActiveTasks: 0,\n                                numCompletedTasks: 0\n                            }\n                            _jsonObj[\"activeJobs\"].forEach((item) => {\n                                jsonObj[\"numTasks\"] += item[\"numTasks\"]\n                                jsonObj[\"numActiveTasks\"] += item[\"numActiveTasks\"]\n                                jsonObj[\"numCompletedTasks\"] += item[\"numCompletedTasks\"]\n                            })\n                            self.setState({\n                                percent: jsonObj.numActiveTasks / jsonObj.numTasks * 100,\n                                successPercent: jsonObj.numCompletedTasks / jsonObj.numTasks * 100,\n                                title: `Tasks (for all stages): Succeeded/Total:\\n${jsonObj.numCompletedTasks}/${jsonObj.numTasks}(${jsonObj.numActiveTasks} running)`\n                            })\n                        }, (str) => {\n                            self.taskCompute = \"loaded\"\n                            try {\n                                self.parent.appendLog(str)\n                            } catch (e) {\n                                console.log(e)\n                            }\n                        })\n\n                    }\n                    , 1000)\n            }\n\n        }, 1000)\n\n    }\n\n    exit = () => {\n        this.taskCompute = \"loaded\"\n        this.resourceCompute = \"loaded\"\n        this.setState({loading: false, percent: 0, successPercent: 0, mark: false})\n        if (this.intervalTimer) {\n            clearInterval(this.intervalTimer);\n        }\n    }\n\n    render() {\n        if (!this.state.loading) return <div></div>\n        return (\n            <div>{this.state.title}\n                <Progress percent={this.state.percent} successPercent={this.state.successPercent}/>\n            </div>\n        )\n    }\n\n}\n\nexport default MLSQLAceEditor\n\n","class MLSQLTreeNodeBuilder {\n\n    /**\n     *\n     * Usage:\n     *\n     * convert flat array to tree structure\n     *\n     * input data：\n     * [{\"id\":1,\"icon\":null,\"label\":null,\"parentId\":0},\n     * {\"id\":2,\"icon\":\"document\",\"label\":\"jack\",\"parentId\":0},\n     * {\"id\":3,\"icon\":\"document\",\"label\":\"dafe\",\"parentId\":0}\n     * ]\n     *\n     * output:\n     *\n     * @param {[{id:number,icon:string,label:string,parentId:number,childNodes:[]}]} list\n     */\n    build = (list) => {\n        let tempMap = {}, node, roots = [], i;\n        for (i = 0; i < list.length; i += 1) {\n            tempMap[list[i].id] = i;\n            list[i].childNodes = [];\n        }\n        for (i = 0; i < list.length; i += 1) {\n            node = list[i];\n            if (node.parentId !== 0) {\n                try {\n                    list[tempMap[node.parentId]].childNodes.push(node);\n                } catch (e) {\n                    console.log(\"------------\")\n                    console.log(node)\n                    console.log(tempMap[node.parentId])\n                }\n\n            } else {\n                roots.push(node);\n            }\n        }\n        return roots;\n    }\n\n\n}\n\nexport default MLSQLTreeNodeBuilder","import * as React from \"react\";\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n\nimport {\n    Button,\n    Classes,\n    Icon,\n    Overlay,\n    Position,\n    Tooltip,\n    Tree,\n    Code,\n    H3,\n    H5,\n    Intent,\n    Switch,\n    InputGroup, FormGroup\n} from \"@blueprintjs/core\";\nimport {ContextMenu, Menu, MenuItem} from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\nimport {MLSQLAPI, APIResponse} from \"../service/MLSQLAPI\";\nimport * as HTTP from \"../service/HTTPMethod\"\nimport './MLSQLTreeNode.scss'\nimport * as backendConfig from \"../service/BackendConfig\";\nimport MLSQLTreeBuilder from \"../service/MLSQLTreeBuilder\"\n\n//the directory tree in the left\nexport class ScriptNodeTree extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        /**\n         * @type {{isContextMenuOpen: boolean,openCreateScriptDialog: boolean}}\n         */\n        this.state = {isContextMenuOpen: false, openCreateScriptDialog: false};\n        this.parent = this.props.parent\n        this.reloadData()\n\n    }\n\n    reloadData = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            ok.content.then((s) => {\n                /**\n                 *\n                 * @type {[{id:number,icon:string,label:string,parentId:number,isDir:boolean,childNodes:[]}]}\n                 */\n                let rawData = []\n                try {\n                    rawData = JSON.parse(s || \"[]\")\n                } catch (e) {\n\n                }\n\n                const builder = new MLSQLTreeBuilder()\n                const treeRes = builder.build(rawData).sort((a, b) => {\n                    return a.id - b.id\n                })\n                self.setState({nodes: treeRes})\n            })\n        }\n        api.request(HTTP.Method.GET, {}, success, (notok) => {\n        })\n    }\n\n    render() {\n\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    onNodeContextMenu={this.onNodeContextMenu}\n                    onNodeDoubleClick={this.handNodeDoubleClick}\n                    className=\"mlsql-directory-tree\"\n                />\n                {this.state.openCreateScriptDialog ?\n                    <CreateScriptDialog nodeId={this.state.nodeId} parent={this}\n                                        queryApp={this.parent}></CreateScriptDialog> : \"\"}\n\n            </div>\n        );\n    }\n\n    isRootNode = (nodeId) => {\n        return this.state.nodes[0].id === nodeId\n    }\n\n    onNodeContextMenu = (node, _nodePath, e) => {\n        e.preventDefault()\n        const self = this;\n        ContextMenu.show(\n            <ScriptNodeTreeMenu isDir={node.isDir} parent={self} nodeId={node.id}/>,\n            {left: e.clientX, top: e.clientY},\n            () => this.setState({isContextMenuOpen: false}),\n        );\n        this.setState({isContextMenuOpen: true});\n    }\n\n    handNodeDoubleClick = (node, _nodePath, e) => {\n        if (node.isDir) {\n            node.isExpanded = !node.isExpanded;\n            this.toggleIsExpanded(node.id, node.isExpanded)\n        } else {\n            const api = new MLSQLAPI(backendConfig.GET_SCRIPT_FILE)\n            const self = this;\n            api.request(HTTP.Method.GET, {id: node.id}, (ok) => {\n                ok.content.then((s) => {\n                    const scriptFile = JSON.parse(s || \"{}\")\n                    self.parent.openExistsOrNewEditor({id: node.id, content: scriptFile.content, name: scriptFile.name})\n                })\n            }, (fail) => {\n            })\n\n\n        }\n        this.setState(this.state);\n\n    };\n\n    handleNodeClick = (nodeData, _nodePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    };\n\n    toggleIsExpanded = (id, isExpanded) => {\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n        api.request(HTTP.Method.POST, {id: id, isExpanded: isExpanded}, (ok) => {\n            ok.content.then((s) => {\n\n            })\n        }, (fail) => {\n        })\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.toggleIsExpanded(nodeData.id, false)\n        this.setState(this.state);\n    };\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.toggleIsExpanded(nodeData.id, true)\n        this.setState(this.state);\n    };\n\n    forEachNode(nodes, callback) {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n}\n\nclass CreateScriptDialog extends React.Component {\n\n    /**\n     *\n     * @param {{parentFolder:number,parent:ScriptNodeTree,nodeId:number}} props\n     */\n    constructor(props) {\n        super(props)\n        /**\n         * @type {{msg: string,fileName:string,content:string}}\n         */\n        this.state = {\n            msg: \"\"\n        }\n        this.messageBox = this.props.queryApp.messageBox.current.editor\n        this.directoryTree = this.props.parent\n    }\n\n    title = () => {\n        if (this.props.parent.state.isDir) {\n            return \"Create Folder\"\n        }\n        else return \"Create Script\"\n    }\n\n    fileName = (e) => {\n        this.setState({fileName: e.target.value})\n    }\n    content = (e) => {\n        this.setState({content: e.target.value})\n    }\n\n    finish = () => {\n        this.props.parent.setState({openCreateScriptDialog: false})\n        this.props.parent.reloadData()\n    }\n\n    create = () => {\n\n        const api = new MLSQLAPI(backendConfig.CREATE_SCRIPT_FILE)\n        const self = this;\n\n        /**\n         *\n         * @param {APIResponse} ok\n         */\n        const success = (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.finish()\n            } else {\n                ok.content.then((msg) => {\n                    this.setState({\"msg\": msg})\n                })\n\n            }\n        }\n\n        const params = {\n            fileName: this.state.fileName,\n            isDir: this.props.parent.state.isDir,\n            content: this.state.content,\n            parentId: this.props.nodeId\n        }\n\n        if (!params.fileName) {\n            this.setState({\"msg\": \"filename should not be empty\"})\n            return\n        }\n\n        if (!params.isDir && (!params.fileName.endsWith(\".mlsql\") && !params.fileName.endsWith(\".nb\") && !params.fileName.endsWith(\".py\"))) {\n            this.setState({\"msg\": \"filename should be ends with .mlsql or .nb or .py\"})\n            return\n        }\n\n        api.request(HTTP.Method.POST, params, success, (notok) => {\n            self.setState({msg: \"Server error\"})\n        })\n\n    }\n    close = () => {\n        /**\n         * @type {ScriptNodeTree}\n         */\n        const parent = this.props.parent;\n        parent.setState({openCreateScriptDialog: false})\n        parent.reloadData()\n    }\n\n    render() {\n        const OVERLAY_EXAMPLE_CLASS = \"docs-md-overlay-example-transition\";\n        const classes = classNames(Classes.CARD, Classes.ELEVATION_4, OVERLAY_EXAMPLE_CLASS);\n        return (\n            <div>\n                <Overlay className=\"msql-treenode-dialog\" isOpen={true} usePortal={true}>\n                    <div className={classes}>\n                        <H3>{this.title()} </H3>\n\n                        <div className=\"msql-treenode-dialog-form\">\n\n                            <p style={{color: \"red\"}}>\n                                {this.state.msg}\n                            </p>\n                            <FormGroup\n                                helperText=\"The file of name you want create.\"\n                                label=\"fileName\"\n                                labelFor=\"fileName\"\n                                labelInfo=\"(required)\">\n                                <InputGroup id=\"fileName\" placeholder=\"example.mlsql\" onChange={this.fileName}/>\n                            </FormGroup>\n                        </div>\n                        <br/>\n                        <Button onClick={this.create}>\n                            Create\n                        </Button>\n\n                        <Button intent={Intent.DANGER} onClick={this.close} style={{float: \"right\"}}>\n                            Close\n                        </Button>\n\n                    </div>\n                </Overlay>\n            </div>\n\n        )\n    }\n}\n\nclass ScriptNodeTreeMenu extends React.Component {\n\n    /**\n     *\n     * @param {{parent:ScriptNodeTree}} props\n     */\n    constructor(props) {\n        super(props)\n        this.parent = this.props.parent\n        this.nodeId = this.props.nodeId\n        this.isDir = this.props.isDir\n    }\n\n    confirmDelete = () => {\n        confirmAlert({\n            title: 'Confirm to delete',\n            message: 'Are you sure to do this ？',\n            buttons: [\n                {\n                    label: 'confirm',\n                    onClick: () => this.removeFile()\n                },\n                {\n                    label: 'cancel',\n                    onClick: () => {\n                    }\n                }\n            ],\n            closeOnEscape: true, closeOnClickOutside: false\n        });\n    }\n\n    removeFile = () => {\n        const api = new MLSQLAPI(backendConfig.REMOVE_SCRIPT_FILE)\n        const self = this;\n\n        api.request(HTTP.Method.POST, {\n            id: self.nodeId\n        }, (ok) => {\n            if (ok.status === HTTP.Status.Success) {\n                self.parent.reloadData()\n            } else {\n                ok.content.then((msg) => {\n                    self.parent.setState({msg: msg})\n                })\n\n            }\n\n        }, (fail) => {\n            self.parent.setState({msg: \"Server error\"})\n        })\n    }\n\n    isCreateProject = () => {\n        return this.parent.isRootNode(this.nodeId)\n    }\n\n    createDocMenuItem = () => {\n        if (!this.isCreateProject() && this.isDir) {\n            return <MenuItem icon=\"document\" text=\"Create Script\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: false\n                })\n            }).bind(this)}/>\n        }\n    }\n    createFolderTitle = () => {\n        if (!this.isCreateProject()) {\n            return \"Create Folder\"\n        }\n        else {\n            return \"Create Project\"\n        }\n    }\n    createFolder = () => {\n        if (this.isDir) {\n            return <MenuItem icon=\"folder-new\" text={this.createFolderTitle()} onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n        if (this.isCreateProject()) {\n            return <MenuItem icon=\"folder-new\" text=\"Create Project\" onClick={(() => {\n                this.parent.setState({\n                    openCreateScriptDialog: true,\n                    nodeId: this.nodeId,\n                    isDir: true\n                })\n            }).bind(this)}/>\n        }\n    }\n\n    deleteMenu = () => {\n        if (!this.isCreateProject()) {\n            return <MenuItem icon=\"remove\" text=\"Delete\" onClick={(() => {\n                this.confirmDelete()\n            }).bind(this)}/>\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Menu>\n                    {this.createDocMenuItem()}\n                    {this.createFolder()}\n                    {this.deleteMenu()}\n                </Menu>\n            </div>\n        )\n    }\n}\n\n\n\n","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table,Modal} from 'antd';\n\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class MLSQLQueryDisplay extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {columns: [], rows: [], view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (this.state.config && this.state.config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if (keyColumn.key == \"html\") {            \n            keyColumn[\"render\"] = value => <pre>{value.substring(0,300)}</pre>\n            return\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    update = (data, config) => {\n        // e.g. [{\"a\":1}]\n        this.setState({config: config})\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n\n        this.setState({columns: keys, data: rows})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={this.state.columns}\n                    dataSource={this.state.data}/>\n                <Modal\n                    title={\"View\"}\n                    visible={this.state.view.enabled}\n                    onCancel={this.disablePreview}\n                    onOk={this.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={this.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport Dropzone from 'react-dropzone'\nimport {fromEvent} from 'file-selector';\nimport request from \"superagent\";\nimport {FILE_UPLOAD} from '../../service/BackendConfig'\nimport * as HTTP from \"../../service/HTTPMethod\";\n\nconst baseStyle = {\n    width: 200,\n    height: 200,\n    borderWidth: 2,\n    borderColor: '#666',\n    borderStyle: 'dashed',\n    borderRadius: 5\n};\nconst activeStyle = {\n    borderStyle: 'solid',\n    borderColor: '#6c6',\n    backgroundColor: '#eee'\n};\nconst rejectStyle = {\n    borderStyle: 'solid',\n    borderColor: '#c66',\n    backgroundColor: '#eee'\n};\n\nconst fileListStyle = {\n    display: 'flex'\n}\n\n\nexport class UploadDropzone extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            files: []\n        }\n\n    }\n\n    onDrop = (files) => {\n        this.setState({files})\n        const req = request.post(FILE_UPLOAD);\n        req.set('Access-Token', sessionStorage.getItem(HTTP.AccessToken.name) || '')\n        files.forEach(file => {\n            req.attach(file.path, file);\n        });\n\n        req.end((err, res) => {\n            this.setState({files: []})\n            if (!err) {\n                if (res.ok) {\n                    this.setState({msg: \"total files:\" + files.length + \" are uploaded. \\n You can check the files with command: !hdfs -ls /tmp/upload; \"})\n                }\n            } else {\n                console.log(err)\n                this.setState({msg: err.toString() + \"\\n Sometimes this caused by your upload space is not enough or backend fails\"})\n            }\n        })\n    }\n\n\n    render() {\n\n        const files = this.state.files.map(f => (\n            <li key={f.name}>\n                {f.path} - {f.size} bytes\n            </li>\n        ))\n\n        return (\n            <section style={fileListStyle}>\n                <div>\n                    <Dropzone onDrop={this.onDrop}\n                              getDataTransferItems={evt => fromEvent(evt)}\n                    >\n                        {({getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject, acceptedFiles, rejectedFiles}) => {\n                            let styles = {...baseStyle}\n                            styles = isDragActive ? {...styles, ...activeStyle} : styles\n                            styles = isDragReject ? {...styles, ...rejectStyle} : styles\n\n                            return (\n                                <div\n                                    {...getRootProps()}\n                                    style={styles}\n                                >\n                                    <input {...getInputProps()} />\n                                    <div>\n                                        {isDragAccept ? 'Drop' : 'Drag'} files here...\n                                    </div>\n                                    {isDragReject && <div>Unsupported file type...</div>}\n                                </div>\n                            )\n                        }}\n                    </Dropzone>\n                </div>\n                <aside>\n                    <h4>{files.length == 0 ? \"\" : \"Files\"}</h4>\n                    <ul>{files}</ul>\n                </aside>\n                <div>{this.state.msg ? this.state.msg : \"\"}</div>\n            </section>\n        );\n    }\n}","import React, {PureComponent} from 'react';\nimport {\n    ScatterChart, Scatter, XAxis, YAxis, ZAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLThreeDimScatterChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLThreeDimScatterChart.basicCheck(data, (item) => {\n\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && (item.hasOwnProperty(\"_dash_config\") || item.hasOwnProperty(\"dash\")) && (\n                item[\"dash\"] === \"scatter\" || (item[\"_dash_config\"] || {})[\"dash\"] === \"scatter\"\n            )\n        })\n    }\n\n    static render(data) {\n        let haveZ = data[0].hasOwnProperty(\"z\")\n        if (!data.hasOwnProperty(\"dataType\")) {\n            data.forEach((item) => {\n                item[\"dataType\"] = \"default\"\n                if (!haveZ) {\n                    item[\"z\"] = 0\n                }\n            })\n        }\n        const dataTypeToItems = data.reduce((map, item) => {\n            const {x, y, z, dataType} = item\n            const prev = map.get(dataType)\n            if (prev) {\n                prev.push(item)\n            } else {\n                map.set(dataType, [item])\n            }\n            return map\n        }, new Map())\n\n        const item = data[0]\n        const _config = item[\"_dash_config\"] || {}\n\n        const scatters = [...dataTypeToItems.keys()].map((key) => {\n            const dataTypeConfig = Object.assign({fill: generateColor(), shape: \"triangle\"}, (_config[key] || {}))\n            return <Scatter key={key} name={key} data={dataTypeToItems.get(key)} {...dataTypeConfig}/>\n        })\n\n\n        const xConfig = Object.assign({type: \"number\", dataKey: \"x\"}, (_config[\"x\"] || {}))\n        const yConfig = Object.assign({type: \"number\", dataKey: \"y\"}, (_config[\"y\"] || {}))\n        const zConfig = Object.assign({type: \"number\", dataKey: \"z\"}, (_config[\"z\"] || {}))\n\n\n        return (\n            <ScatterChart\n                width={400}\n                height={400}\n                margin={{\n                    top: 20, right: 20, bottom: 20, left: 20,\n                }}\n            >\n                <CartesianGrid/>\n                <XAxis {...xConfig}/>\n                <YAxis {...yConfig}/>\n                {haveZ ? <ZAxis {...zConfig}/> : \"\"}\n                <Tooltip cursor={{strokeDasharray: '3 3'}}/>\n                <Legend/>\n                {scatters}\n            </ScatterChart>\n        );\n    }\n\n}\n\n","import React, {PureComponent} from 'react';\nimport {\n    XAxis,\n    YAxis,\n    LineChart,\n    CartesianGrid,\n    Legend,\n    Line,\n    Tooltip as JTooltip,\n    Bar as JBar,\n    BarChart,\n} from 'recharts';\n\nconst randomColor = require('randomcolor');\nconst generateColor = () => {\n    let color = randomColor()\n    if (color === \"#000000\") {\n        color = \"#8884d8\"\n    }\n    return color\n}\n\nexport default class MLSQLLineChart {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLLineChart.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        const ys = []\n        const _config = item[\"_dash_config\"] || {}\n        if (item[\"dash\"] === \"line\" || _config[\"dash\"] === \"line\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({stroke: generateColor()}, (_config[key] || {}))\n                    ys.push(<Line key={key} type=\"monotone\" dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <LineChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </LineChart>\n        }\n\n\n        if (item[\"dash\"] === \"bar\" || _config[\"dash\"] === \"bar\") {\n            Object.keys(item).forEach((key) => {\n                if ((typeof item[key]) === \"number\") {\n                    const dataTypeConfig = Object.assign({fill: generateColor()}, (_config[key] || {}))\n                    ys.push(<JBar key={key} dataKey={key} {...dataTypeConfig}/>)\n                }\n            })\n            return <BarChart\n                width={500}\n                height={300}\n                data={data}\n                margin={{\n                    top: 5, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <JTooltip/>\n                <Legend/>\n                {ys}\n            </BarChart>\n        }\n    }\n\n}","import React, {Component} from 'react';\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Legend} from 'recharts';\nimport moment from \"moment\";\n\n\nexport default class MLSQLStream extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n\n    }\n\n    componentDidMount() {\n        this.renderStream()\n    }\n\n    static isStream = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        try {\n            const item = JSON.parse(data[0][\"value\"])\n            if (!item[\"runId\"]) {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLStream.isStream(data)\n    }\n\n    renderStream = () => {\n        const data = this.state.data\n        const dataForRender = []\n        const dataForRender2 = []\n\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            const x = moment.utc(jsonItem.timestamp).format('DD,h:mm:ss')\n            dataForRender.push({\n                x: x,\n                inputRowsPerSecond: jsonItem.inputRowsPerSecond,\n                processedRowsPerSecond: jsonItem.processedRowsPerSecond\n            })\n\n            dataForRender2.push({\n                x: x,\n                numInputRows: jsonItem.numInputRows\n            })\n        })\n        this.setState({\n            dataForRender: dataForRender,\n            dataForRender2: dataForRender2\n        })\n    }\n\n    static renderRawData = (data) => {\n        if (!MLSQLStream.isShouldRender(data)) return \"\"\n        const dataForRender = []\n        data.forEach((item) => {\n            const jsonItem = JSON.parse(item[\"value\"])\n            dataForRender.push(JSON.stringify(jsonItem, null, 2))\n        })\n        return dataForRender.join(\"\\n\")\n    }\n\n    render() {\n        if (this.state.dataForRender.length === 0) return null\n        return <div>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender}>\n                <Line type=\"monotone\" dataKey=\"inputRowsPerSecond\" stroke=\"#8884d8\"/>\n                <Line type=\"monotone\" dataKey=\"processedRowsPerSecond\" stroke=\"#82ca9d\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n\n            <LineChart width={800} height={300} data={this.state.dataForRender2}>\n                <Line type=\"monotone\" dataKey=\"numInputRows\" stroke=\"#8884d8\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"x\"/>\n                <YAxis/>\n                <Legend/>\n            </LineChart>\n        </div>\n    }\n\n}\n\n","import React, {Component} from 'react';\nimport {Pie, TimelineChart} from \"../../../node_modules/ant-design-pro/lib/Charts\";\nimport moment from \"moment\";\nimport ChartCard from \"../../../node_modules/ant-design-pro/lib/Charts/ChartCard\";\nimport Tooltip from \"../../../node_modules/antd/lib/tooltip\";\nimport Icon from \"../../../node_modules/antd/lib/icon\";\nimport Row from \"../../../node_modules/antd/lib/grid/row\";\nimport Col from \"../../../node_modules/antd/lib/grid/col\";\n\n\nexport default class MLSQLResource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent.parent\n        this.state = {data: props.data, dataForRender: [], titleMap: {}}\n    }\n\n    static isResource = (data) => {\n        if (data.length < 1) {\n            return false\n        }\n        const item = data[0]\n        try {\n            return item.hasOwnProperty(\"activeTasks\") && item.hasOwnProperty(\"totalCores\") && item.hasOwnProperty(\"activeExecutorNum\")\n        } catch (e) {\n            return false\n        }\n\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLResource.isResource(data)\n    }\n\n    resourceRender = () => {\n        const data = this.state.data\n        const item = data[0]\n        //totalExecutorNum\n        const cpuRenderData = [{x: \"used\", y: item.activeTasks}, {x: \"free\", y: (item.totalCores - item.activeTasks)}]\n        const gcRenderData = [{x: \"taskTime\", y: item.taskTime}, {x: \"gcTime\", y: (item.gcTime)}]\n        const executorsRenderData = [{x: \"used\", y: item.activeExecutorNum}, {\n            x: \"free\",\n            y: (item.totalExecutorNum - item.activeExecutorNum)\n        }]\n\n        const memoryRenderData = item.totalMemory === -1 ? [] : [{x: \"used\", y: item.usedMemory / (1024 * 1024)}, {\n            x: \"free\",\n            y: (item.totalMemory - item.usedMemory) / (1024 * 1024)\n        }]\n\n\n        const shuffleInfo = (title, info, key) => {\n            return <ChartCard\n                title={title}\n                action={\n                    <Tooltip title={info}>\n                        <Icon type=\"info-circle-o\"/>\n                    </Tooltip>\n                }\n                total={() => (\n                    <span dangerouslySetInnerHTML={{__html: item.shuffleData[key] / (1024 * 1024)}}/>\n                )}\n            />\n        }\n\n        const diskSpilled = shuffleInfo(\"Disk Spilled\", \"The size(M) spilled in disk\", \"diskBytesSpilled\")\n        const memorySpilled = shuffleInfo(\"Memory Spilled\", \"The memory size(M) spilled in disk\", \"memoryBytesSpilled\")\n        const inputRecords = shuffleInfo(\"InputRecords\", \"Current active jobs have processed how many records\", \"inputRecords\")\n\n        return <div>\n            <Row>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"CPU\"\n                        subTitle=\"CPU\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: cpuRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={cpuRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Memory\"\n                        subTitle=\"Memory\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: (memoryRenderData.reduce((pre, now) => now.y + pre, 0) + \"\").split(\"\\.\")[0] + \"M\"\n                                }}\n                            />\n                        )}\n                        data={memoryRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: (val + \"\").split(\"\\.\")[0] + \"M\"}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Task/GC\"\n                        subTitle=\"Task/GC\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: gcRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={gcRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n                <Col span={6}>\n                    <Pie\n                        hasLegend\n                        title=\"Executors\"\n                        subTitle=\"Executors\"\n                        total={() => (\n                            <span\n                                dangerouslySetInnerHTML={{\n                                    __html: executorsRenderData.reduce((pre, now) => now.y + pre, 0)\n                                }}\n                            />\n                        )}\n                        data={executorsRenderData}\n                        valueFormat={val => <span dangerouslySetInnerHTML={{__html: val}}/>}\n                        height={200}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col span={8}>\n                    {diskSpilled}\n                </Col>\n                <Col span={8}>\n                    {memorySpilled}\n                </Col>\n                <Col span={8}>\n                    {inputRecords}\n                </Col>\n\n            </Row>\n\n\n        </div>\n    }\n\n    render() {\n        return this.resourceRender()\n    }\n\n}\n\n","import React from 'react';\nimport {Resizable} from \"re-resizable\";\n\n\nexport default class MLSQLHTML {\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n    static isShouldRender = (data) => {\n        return MLSQLHTML.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"html\") && (item.hasOwnProperty(\"dash\") || item.hasOwnProperty(\"_dash_config\"))\n        })\n    }\n\n    static render(data) {\n        const item = data[0]\n        return <MLSQLHTMLPanel data={item}></MLSQLHTMLPanel>\n    }\n\n}\n\nexport class MLSQLHTMLPanel extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {data: this.props.data}\n    }\n\n    refresh = (data) => {\n        this.setState({data: data})\n    }\n\n    render() {\n        return (\n            <div>\n                <Resizable defaultSize={{height: \"500px\"}}>\n                    <iframe\n                        sandbox=\"allow-scripts\"\n                        style={{width: '100%', height: \"100%\"}}\n                        srcDoc={this.state.data[\"html\"]}\n                        frameBorder=\"0\"\n                        scrolling=\"yes\"\n                        ref={(f) => {\n                            this.ifr = f;\n                        }}\n\n                    />\n                </Resizable>\n            </div>\n        );\n        \n    }\n\n\n}","import React, {Component, PureComponent} from 'react';\nimport {Collapse} from 'antd';\nimport {UploadDropzone} from '../upload/UploadDropZone'\nimport 'ant-design-pro/dist/ant-design-pro.css';\nimport {Tabs} from 'antd';\nimport Bar from \"../../../node_modules/ant-design-pro/lib/Charts/Bar\";\n\nimport MLSQLThreeDimScatterChart from \"../dash/MLSQLScatterChart\";\nimport MLSQLLineChart from \"../dash/MLSQLLineChart\";\nimport MLSQLStream from \"../dash/MLSQLStream\";\nimport MLSQLResource from \"../dash/MLSQLResource\";\nimport MLSQLHTML from \"../dash/MLSQLHTML\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nfunction callback(key) {\n\n}\n\nexport class MLSQLDash extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.queryApp = props.parent\n        this.state = {data: [], dataForRender: [], titleMap: {}}\n    }\n\n\n    static basicCheck = (data, fun) => {\n        if (data.length < 1) {\n            return false\n        }\n\n        try {\n            return fun(data[0])\n        } catch (e) {\n            return false\n        }\n\n        return true\n    }\n\n\n    isNormalXY = (data) => {\n        return MLSQLDash.basicCheck(data, (item) => {\n            return item.hasOwnProperty(\"x\") && item.hasOwnProperty(\"y\") && ((typeof item[\"y\"]) === \"number\")\n        })\n    }\n\n\n    xYRender = (data) => {\n        return <Bar\n            height={200}\n            title=\"Bar\"\n            data={data}\n        />\n    }\n\n\n    renderDash = () => {\n        const data = this.state.data\n        if (MLSQLResource.isShouldRender(data)) {\n            return <MLSQLResource data={data} parent={this}/>\n        }\n        if (MLSQLStream.isShouldRender(data)) {\n            return <MLSQLStream data={data} parent={this}/>\n        }\n\n        if (MLSQLThreeDimScatterChart.isShouldRender(data)) {\n            return MLSQLThreeDimScatterChart.render(data)\n        }\n\n        if (this.isNormalXY(data)) {\n            return this.xYRender(data)\n        }\n\n        if (MLSQLLineChart.isShouldRender(data)) {\n            return MLSQLLineChart.render(data)\n        }\n\n        if (MLSQLHTML.isShouldRender(data)) {\n            return MLSQLHTML.render(data)\n        }\n\n        return <div></div>\n\n    }\n\n    refresh() {\n        try {\n            const data = this.queryApp.queryResData || []\n            this.setState({data: data})\n        } catch (e) {\n\n        }\n\n    }\n\n\n    render() {\n        return (<Collapse onChange={callback}>\n            <Panel header=\"Tools/Dashboard\" key=\"1\">\n                <Tabs defaultActiveKey=\"1\" onChange={callback}>\n                    <TabPane tab=\"Upload\" key=\"1\">\n                        <UploadDropzone/>\n                    </TabPane>\n                    <TabPane tab=\"Dashboard\" key=\"2\">{this.renderDash()}</TabPane>\n                    <TabPane tab=\"RawData\" key=\"3\">\n                        <pre>{MLSQLStream.renderRawData(this.state.data)}</pre>\n                    </TabPane>\n                </Tabs>\n            </Panel>\n        </Collapse>)\n    }\n\n}","import React from 'react'\nimport AceEditor from \"react-ace\";\n\n/**\n * onLoad(editor){\n  // Your editor options comes here\n   editor.on('change', (arg, activeEditor) => {\n      const aceEditor = activeEditor;\n      const newHeight = aceEditor.getSession().getScreenLength() *\n        (aceEditor.renderer.lineHeight + aceEditor.renderer.scrollBar.getWidth());\n       aceEditor.container.style.height = `${newHeight}px`;\n      aceEditor.resize();\n    });\n}\n */\nexport default class CodeBlock extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    originalEditor = () => {\n        return this.editor.editor\n    }\n\n    componentDidMount() {\n        this.originalEditor().container.style.lineHeight = 3\n    }\n\n    render() {\n        return (\n            <AceEditor\n                maxLines={Infinity}\n                width={\"100%\"}\n                ref={et => {\n                    this.editor = et\n                }}\n                value={this.props.initialCode}\n                mode=\"sql\"\n                theme=\"github\"\n\n            />\n        )\n    }\n}","import React from 'react'\nimport {Icon} from \"antd\";\n\nexport default class CommandGroup extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {isExecute: false, executeUnit: props.executeUnit}\n    }\n\n    evtExecute = () => {\n        this.setState({isExecute: true})\n        this.state.executeUnit.execute()\n    }\n\n    cancelExecute = () => {\n        this.setState({isExecute: false})\n    }\n\n    render() {\n        return <div>\n            {\n                this.state.isExecute ? <span onClick={this.cancelExecute}><Icon type=\"sync\" spin/></span> :\n                    <span onClick={this.evtExecute}><Icon type=\"caret-right\"/></span>\n            }\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport * as BackendConfig from \"../../../service/BackendConfig\";\nimport * as HTTP from \"../../../service/HTTPMethod\";\n\nconst uuidv4 = require('uuid/v4');\n\nexport default class Engine {\n\n    /**\n     * @param {Number} timeout\n     */\n    constructor(timeout) {\n        this.timeout = timeout\n    }\n\n    /**\n     * @param {string} sql\n     * @param {(msg)=>{}} show_result\n     */\n    run = (sql, show_result, fail_result) => {\n        const jobName = uuidv4()\n        const api = new MLSQLAPI(BackendConfig.RUN_SCRIPT)\n\n        api.newRunScript({\n            jobName: jobName,\n            timeout: this.timeout\n        }, sql, show_result, fail_result)\n\n\n    }\n\n    /**\n     * @param {string} code\n     * @param {string} scriptId\n     * @param {(msg)=>{}} show_result\n     */\n    saveFile = (code, scriptId, show_result) => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        api.request(HTTP.Method.POST, {\n            id: scriptId,\n            content: code\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    show_result(wow[\"msg\"])\n                }, (jsonErr) => {\n                    show_result(jsonErr)\n                })\n            } else {\n                show_result(\"saved\")\n            }\n\n        }, (fail) => {\n            show_result(fail)\n        })\n    }\n}","import * as React from \"react\";\nimport 'antd/dist/antd.css';\nimport {Table, Modal} from 'antd';\n\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class DataTable extends React.Component {\n\n    constructor(props) {\n        super(props)\n        const [keys, rows] = this.parseData(props.data || [], props.config || {})\n        this.state = {columns: keys, rows: rows, view: {enabled: false}}\n    }\n\n    setRender = (keyColumn, data, config) => {\n\n        const value = data[0][keyColumn.key]\n\n        if (config && config[\"render\"]) {\n            const render = this.state.config[\"render\"][keyColumn.key]\n            if (render) {\n                keyColumn[\"render\"] = render\n            }\n            return\n        }\n\n        try {\n            if (React.Component.isPrototypeOf(value.type)) {\n                keyColumn[\"render\"] = value => <span>{value}</span>\n                return\n            }\n        }\n        catch (e) {\n        }\n\n        if ((typeof value) === 'object') {\n            keyColumn[\"render\"] = value => <span>{JSON.stringify(value).substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'array') {\n            keyColumn[\"render\"] = value => <span>{value.join(\",\").substring(0, 300)}</span>\n            return\n        }\n        if ((typeof value) === 'boolean') {\n            keyColumn[\"render\"] = value => <span>{value.toString()}</span>\n            return\n        }\n        if (keyColumn.key == \"fileSystem\" || keyColumn.key == \"message\" || keyColumn.key == \"info\") {\n            keyColumn[\"render\"] = value => <pre>{value.toString()}</pre>\n            return\n        }\n\n\n    }\n\n    parseData = (data, config) => {\n        let keys = []\n        let basket = {}\n        let rows = []\n        const self = this\n        //collect all keys\n        data.forEach(function (item) {\n            for (let key in item) {\n                if (!basket[key]) {\n                    const keyColumn = {\n                        title: key,\n                        dataIndex: key,\n                        key: key,\n                    }\n                    self.setRender(keyColumn, data)\n                    keys.push(keyColumn)\n                    basket[key] = true\n                }\n            }\n        })\n\n        // collect data\n        data.forEach(function (item, index) {\n            let new_item = {}\n            keys.forEach(function (key) {\n                new_item[key.key] = item[key.key]\n            })\n            new_item[\"key\"] = index\n            rows.push(new_item)\n        })\n        return [keys, rows]\n    }\n\n    refresh = (data, config) => {\n        // e.g. [{\"a\":1}]\n        const [keys, rows] = this.parseData(data, config)\n        this.setState({columns: keys, rows: rows, config: config})\n    }\n\n    rowDoubleClick = (row, index, event) => {\n        if (row.name === \"codeExample\" || row.name === \"doc\") {\n            this.setState({\n                view: {\n                    enabled: true,\n                    content: row.value\n                }\n            })\n        }\n    }\n\n    disablePreview = () => {\n        this.setState({\n            view: {\n                enabled: false\n            }\n        })\n    }\n\n    render() {\n        const self = this\n        return (<div>\n                <Table\n                    onRow={(row, index) => {\n                        return {\n                            onDoubleClick: (event) => {\n                                self.rowDoubleClick(row, index, event)\n\n                            }\n                        }\n                    }\n                    }\n\n                    columns={self.state.columns}\n                    dataSource={self.state.rows}/>\n                <Modal\n                    title={\"View\"}\n                    visible={self.state.view.enabled}\n                    onCancel={self.disablePreview}\n                    onOk={self.disablePreview}\n                    cancelText=\"Cancel\"\n                    OkText=\"Ok\"\n                >\n                    <ReactMarkdown source={self.state.view.content || \"\"}/>\n                </Modal>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport DataTable from \"./DataTable\";\nimport MLSQLHTML, {MLSQLHTMLPanel} from \"../dash/MLSQLHTML\";\nimport AceEditor from \"react-ace\";\n\nexport default class DisplayGroup extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {errorMsg: \"\"}\n    }\n\n\n    refresh = (displayData) => {\n        this.setState({displayData: displayData, errorMsg: \"\"})\n        if (this.displayTableRef) {\n            this.displayTableRef.refresh(this.state.displayData, {})\n        }\n\n        if (this.displayDashRef) {\n            const item = this.state.displayData[0]\n            this.displayDashRef.refresh(item)\n        }\n\n    }\n\n    fail = (msg) => {\n        this.setState({errorMsg: msg})\n        if (this.editor) {\n            this.editor.editor.setValue(msg)\n        }\n    }\n\n    displayDash = () => {\n        if (this.state.displayData && MLSQLHTML.isShouldRender(this.state.displayData)) {\n            const item = this.state.displayData[0]\n            return <MLSQLHTMLPanel data={item} ref={(et) => this.displayDashRef = et}></MLSQLHTMLPanel>\n        } else {\n            return <div></div>\n        }\n\n    }\n\n    displayError = () => {\n        if (this.state.errorMsg) {\n            return <div><AceEditor\n                maxLines={Infinity}\n                width={\"100%\"}\n                ref={et => {\n                    this.editor = et\n                }}\n                value={this.state.errorMsg}\n                mode=\"text\"\n                theme=\"ace/theme/textmate\"\n\n            /></div>\n        } else {\n            return <div></div>\n        }\n    }\n\n    displayTable = () => {\n        if (this.state.displayData) {\n            return <DataTable data={this.state.displayData} ref={(et) => this.displayTableRef = et}></DataTable>\n        } else {\n            return <div></div>\n        }\n\n    }\n\n    render() {\n        return <div>\n            {this.displayError()}\n            {\n                this.displayTable()\n            }{this.displayDash()}</div>\n\n    }\n}","import React from 'react'\nimport CodeBlock from \"./CodeBlock\";\nimport CommandGroup from \"./CommandGroup\";\nimport Engine from \"./service/Engine\";\nimport DisplayGroup from \"./DisplayGroup\";\n\n\nexport default class ExecuteUnit extends React.Component {\n    constructor(props) {\n        super(props)\n        this.notebook = props.parent\n    }\n\n    execute = () => {\n        const sql = this.codeBlock.originalEditor().getValue()\n        const engine = new Engine(5 * 60 * 1000)\n        engine.run(sql, (msg) => {\n            this.displayGroup.refresh(msg)\n            this.commandGroup.setState({isExecute: false})\n            this.notebook.nextExecuteUnit()\n        }, msg => {\n            this.displayGroup.fail(msg)\n            this.commandGroup.setState({isExecute: false})\n        })\n    }\n\n    codeBlockIsEmpty = () => {\n        return this.getCodeStr() === \"\"\n    }\n\n    getCodeStr = () => {\n        return this.codeBlock.originalEditor().getValue()\n    }\n\n\n    render() {\n        return <div>\n            <CodeBlock initialCode={this.props.initialCode} ref={et => {\n                this.codeBlock = et\n            }} executeUnit={this}/>\n            <CommandGroup ref={et => {\n                this.commandGroup = et\n            }} executeUnit={this}/>\n            <DisplayGroup ref={et => this.displayGroup = et}/>\n\n        </div>\n    }\n}\n\n","import React from 'react'\nimport ExecuteUnit from \"./ExecuteUnit\";\nimport Engine from \"./service/Engine\";\n\nconst CODE_SPLITTER = \"set notebooksplitter='notebooksplitter';\"\n\nexport default class NodeBook extends React.Component {\n    constructor(props) {\n        super(props)\n        this.executeUnitRefs = []\n        this.executeUnits = [this.createNewExecuteUnit(\"\")]\n        this.state = {executeUnits: this.executeUnits}\n        this.engine = new Engine(5 * 60 * 1000)\n    }\n\n    createNewExecuteUnit = (initialCode) => {\n        return <ExecuteUnit parent={this} initialCode={initialCode} ref={et => this.addRef(et)}/>\n    }\n\n    addRef = (instance) => {\n        if (instance) {\n            this.executeUnitRefs.push(instance)\n        }\n    }\n\n    nextExecuteUnit = () => {\n        const isLastEmpty = () => {\n            return this.executeUnitRefs.slice(-1)[0].codeBlockIsEmpty()\n        }\n        if (!isLastEmpty()) {\n            this.executeUnits.push(this.createNewExecuteUnit())\n            this.setState({executeUnits: this.executeUnits})\n        }\n        this.saveNoteBook()\n    }\n\n    saveNoteBook = () => {\n        const value = this.executeUnitRefs.map((instance) => {\n            return instance.getCodeStr()\n        }).join(CODE_SPLITTER)\n\n        this.engine.saveFile(value, this.scriptId, (msg) => {\n        })\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    text = (value, scriptId) => {\n        this.scriptId = scriptId\n        this.initialCode = value\n        if (value && value !== \"undefined\") {\n            this.executeUnitRefs = []\n            this.executeUnits = this.initialCode.split(CODE_SPLITTER).map((initialCode) => {\n                return this.createNewExecuteUnit(initialCode)\n            })\n            this.setState({executeUnits: this.executeUnits})\n        }\n    }\n\n    render() {\n        return <div>\n            {\n                this.state.executeUnits\n            }\n        </div>\n    }\n}","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/sql';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools';\n\nimport '../MLSQLAceEditor.scss'\nimport 'antd/dist/antd.css';\nimport { Button, Tooltip, Progress } from 'antd';\nimport { MLSQLAPI } from \"../../service/MLSQLAPI\";\nimport * as BackendConfig from \"../../service/BackendConfig\";\nimport * as HTTP from \"../../service/HTTPMethod\";\nimport { Select } from 'antd';\nimport { Resizable } from \"re-resizable\";\nimport {ActionProxy} from '../../backend_service/ActionProxy'\nimport { LogMonitor } from \"../../common/LogMonitor\";\n\nconst { Option } = Select;\n\nconst uuidv4 = require('uuid/v4');\n\n\nclass PythonACE extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.language = this.props.language || \"sql\"\n        this.queryApp = this.props.parent.queryApp\n\n        this.state = { value: \"\", loading: false }\n        \n        this.executeQuery = this.executeQuery.bind(this)\n        this.cancelQuery = this.cancelQuery.bind(this)\n        \n        this.logMonitor = new LogMonitor(this.appendLog)        \n        \n        this.log = {}\n    }\n\n    text = (value, scriptId) => {\n        this.setState({ value: value, scriptId: scriptId }, () => {\n            this.aceEditorRef.editor.setValue(value, 1)\n        })\n\n    }\n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }\n\n    onChange(newValue) {\n\n    }\n\n    executeSave = () => {\n        const api = new MLSQLAPI(BackendConfig.CREATE_SCRIPT_FILE)\n        const self = this\n\n        const messageBox = this.getMessageBoxAceEditor()\n\n        if (!self.state.scriptId) {\n            messageBox.setValue(\"no file are opened, cannot executeSave\")\n            return\n        }\n\n        api.request(HTTP.Method.POST, {\n            id: self.state.scriptId,\n            content: self.getAceEditor().getValue()\n        }, (ok) => {\n            if (ok.status != 200) {\n                ok.json((wow) => {\n                    self.appendLog(wow[\"msg\"])\n                }, (jsonErr) => {\n                    self.appendLog(jsonErr)\n                })\n            } else {\n                self.appendLog(\"saved\")\n            }\n\n        }, (fail) => {\n            self.appendLog(fail)\n        })\n\n    }\n\n    async executeQuery() {\n        this.commandGroup.setState({loading:true})\n        this.jobName = uuidv4()        \n        const api = new ActionProxy()\n        const self = this\n        self.getMessageBoxAceEditor().setValue(\"\")\n        self.getDisplay().update(JSON.parse(\"[]\"))\n\n        const select = self.getSelection()\n        let finalSQL = self.getAllText()\n\n\n        if (select !== '') {\n            finalSQL = select\n        }\n\n        const scriptId = self.state.scriptId\n        this.logMonitor.queryLog()\n        const res = await api.runScript(finalSQL, this.jobName, {\n            scriptId: scriptId,\n            runMode: \"python\",\n            executeMode: \"python\"\n        })        \n        if (res.status !== 200) {\n            this.logMonitor.cancelQueryLog()            \n            this.appendLog(res.content) \n            this.commandGroup.setState({loading:false})           \n            return\n        }\n        try {            \n            this.appendLog(res.content.join(\"\\n\"))\n        }catch(ex){\n            this.appendLog(res.content[\"msg\"])\n        }\n        this.logMonitor.cancelQueryLog()\n        this.commandGroup.setState({loading:false})\n    }\n\n    async cancelQuery() {\n        if (!this.jobName) return\n        const jobName = uuidv4()\n        const api = new ActionProxy()\n        const res = await api.runScript(\"!kill \" + this.jobName+\";\", jobName, {})                        \n        try {\n            this.appendLog(res.content[0]['description'])                \n        }catch(e){\n            this.appendLog(res.content)\n        }\n        \n        this.jobName = null\n        this.logMonitor.cancelQueryLog()\n    }\n\n    getAllText = () => {\n        return this.getAceEditor().getValue()\n    }\n\n    getSelection = () => {\n        let selectionRange = this.getAceEditor().getSelectionRange()\n        let content = this.getAceEditor().session.getTextRange(selectionRange);\n        return content\n    }\n\n    appendToEditor = (str) => {\n        const editor = this.getAceEditor()\n        const p = editor.getCursorPosition()\n        editor.session.insert(p, str)\n        editor.focus();\n    }\n\n    getAceEditor = () => {\n        return this.aceEditorRef.editor\n    }\n\n    getMessageBoxAceEditor = () => {\n        return this.queryApp.messageBox.current.editor\n    }\n\n    appendLog = (msg) => {\n        const editor = this.getMessageBoxAceEditor()\n        const session = editor.session\n        session.insert({\n            row: session.getLength(),\n            column: 0\n        }, \"\\n\" + msg)\n    }\n\n    getDashBoard = () => {\n        return this.queryApp.dash.current\n    }\n\n    getDisplay = () => {\n        return this.queryApp.display.current\n    }\n\n    render() {\n        const self = this\n        return (\n            <div className=\"mlsql-editor-area\">\n\n                <div onDragOver={(evt) => evt.preventDefault()} onDrop={this.etOver}>\n                    <Resizable defaultSize={{ height: \"500px\" }} onResize={() => { this.aceEditorRef.current.editor.resize(); }}><AceEditor\n                        ref={item => this.aceEditorRef=item}\n                        mode={this.language}\n                        theme=\"github\"\n                        width={\"100%\"}\n                        height={\"100%\"}\n                        onChange={this.onChange}\n                        name=\"mlsql_editor\"\n                        fontSize={16}\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        editorProps={{\n                            $blockScrolling: Infinity\n                        }}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: false,\n                            showLineNumbers: true,\n                            tabSize: 2,\n                            autoScrollEditorIntoView: true\n                        }}\n                    /></Resizable>\n                </div>\n\n                <CommandGroup ref={item => this.commandGroup=item} parent={this} />\n            </div>\n        )\n    }\n\n}\n\nclass CommandGroup extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { loading: false, timeout: \"-1\" }\n        this.parent = props.parent\n    }\n\n    onChange = (value) => {\n        this.setState({ timeout: value })\n    }\n    \n\n    render() {\n        return (\n            <div className=\"mslql-editor-buttons\">\n                <Button onClick={this.parent.executeQuery}\n                    loading={this.state.loading}>Run</Button>\n                <Button onClick={this.parent.cancelQuery}>Cancel</Button>\n                <Button onClick={this.parent.executeSave}>Save</Button>\n\n            </div>\n        )\n    }\n\n}\n\n\nexport default PythonACE\n\n","import React from 'react'\nimport PythonACE from './PythonACE';\n\n\nexport default class PythonEditor extends React.Component {\n    constructor(props) {\n        super(props)    \n        this.queryApp = this.props.parent\n    }\n\n    addRef = (instance) => {  \n        if(instance){\n            this.editor = instance\n        }      \n    }\n    \n\n    componentDidMount() {\n        if (this.props.parentCallback) {\n            this.props.parentCallback(this)\n        }\n    }    \n\n    text = (value, scriptId) => {        \n        this.editor.text(value, scriptId)     \n    }\n    \n\n    render() {\n        return <div>\n            <PythonACE parent={this} ref={et => this.addRef(et)} language=\"python\"></PythonACE>\n        </div>\n    }\n}","import * as React from \"react\"\nimport {Tabs} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport NodeBook from \"../notebook/NoteBook\";\nimport PythonEditor from \"../python/PythonEditor\";\n\nconst TabPane = Tabs.TabPane;\n\nexport class TabEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.parent = props.parent\n        this.myRefs = []\n        this.newTabIndex = 0;\n        const panes = [\n            {\n                title: 'MLSQL 1',\n                content: <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: \"newTab0\"})\n                }} activeKey='newTab0'/>,\n                key: 'newTab0'\n            },\n        ];\n        this.state = {\n            activeKey: panes[0].key,\n            panes,\n        };\n        this.newTabIndex++\n    }\n\n    pushRef = (ref) => {\n        this.myRefs.push(ref)\n    }\n\n    getCurrentEditor = () => {\n        const activeKey = this.state.activeKey;\n        let currentItem = null\n        this.myRefs.forEach(item => {\n            if (item.activeKey === activeKey) {\n                currentItem = item\n            }\n        })\n        return currentItem\n    }\n\n    onChange = (activeKey) => {\n\n        let currentItem = null\n\n        this.state.panes.forEach(item => {\n            if (item.key === activeKey) {\n                currentItem = item\n            }\n        })\n\n        if (currentItem && !currentItem.title.endsWith(\".mlsql\")) {\n            this.parent.setState({displayEditor: \"normal\"})\n        } else if(currentItem && !currentItem.title.endsWith(\".nb\")) {\n            this.parent.setState({displayEditor: \"notebook\"})\n        }else {\n            this.parent.setState({displayEditor: \"pythoneditor\"})\n        }\n\n        this.setState({activeKey});\n    }\n\n    onEdit = (targetKey, action) => {\n        this[action](targetKey);\n    }\n\n    addFull = (tabName, callback) => {\n        const editor = (activeKey) => {\n            if (tabName.endsWith(\".mlsql\")) {\n                return <MLSQLAceEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            } else if(tabName.endsWith(\".nb\")) {\n                return <NodeBook parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            }else if(tabName.endsWith(\".py\")) {\n                return <PythonEditor parent={this.parent} parentCallback={(ref) => {\n                    this.pushRef({ref: ref, activeKey: activeKey})\n                    if (callback) {\n                        callback({ref: ref, activeKey: activeKey})\n                    }\n                }} activeKey={activeKey}/>\n            }\n        }\n\n        const panes = this.state.panes;\n        const activeKey = `newTab${this.newTabIndex++}`;\n        panes.push({\n            title: tabName || 'MLSQL ' + this.newTabIndex,\n            content: editor(activeKey),\n            key: activeKey\n        });\n        this.setState({panes, activeKey});\n    }\n\n    add = () => {\n        this.addFull()\n    }\n\n    getPaneIndexByActiveKey = (targetKey) => {\n        let lastIndex;\n        this.state.panes.forEach((pane, i) => {\n            if (pane.key === targetKey) {\n                lastIndex = i - 1;\n            }\n        });\n        return lastIndex\n    }\n\n    remove = (targetKey) => {\n        let activeKey = this.state.activeKey;\n        let lastIndex = this.getPaneIndexByActiveKey(targetKey)\n\n        const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n        if (panes.length && activeKey === targetKey) {\n            if (lastIndex >= 0) {\n                activeKey = panes[lastIndex].key;\n            } else {\n                activeKey = panes[0].key;\n            }\n        }\n        const editorRefList = this.myRefs.filter((item) => item.activeKey === targetKey)\n        this.myRefs = this.myRefs.filter((item) => item.activeKey !== targetKey)\n        this.parent.closeEditor(editorRefList[0])\n\n        this.setState({panes, activeKey});\n    }\n\n    render() {\n        return (\n            <Tabs\n                onChange={this.onChange}\n                activeKey={this.state.activeKey}\n                type=\"editable-card\"\n                onEdit={this.onEdit}\n            >\n                {this.state.panes.map(pane => <TabPane tab={pane.title} key={pane.key}\n                                                       closable={pane.closable}>{pane.content}</TabPane>)}\n            </Tabs>\n        );\n    }\n}","import * as React from \"react\";\nimport {Input} from \"antd\";\n\nconst InputGroup = Input.Group;\n\nexport class ETLoadParams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etPopLoad = props.parent\n        this.state = {}\n    }\n\n    render() {\n        return <div>\n            <span>parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n        </div>\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopLoad extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {params:{}}\n        this.state = {datasourcesRender: []}\n        this.loadParamsRef = React.createRef()\n    }\n\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`datasources/params/${value}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Row key={item.param}>\n                    <Col>\n                        <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={self.params} type=\"text\"\n                               addonBefore={item.param}\n                               placeholder={item.description}/>\n                    </Col>\n                </Row>)\n            })\n            self.loadParamsRef.current.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n        return `load ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` ${whereStr} ${paramsArray.join(\"and\\\\n \")} as ${self.data.tableNameV};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" label=\"Path\" addonBefore=\"Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <ETLoadParams parent={this} ref={this.loadParamsRef}/>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport class ETPopAlgorithm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" && item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n\n        return `train ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV}\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n            <span>Training data and model path:</span>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"} addonBefore=\"tableName\"\n                               placeholder=\"the table of training data\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore=\"Model save path\"\n                               placeholder=\"the location you save you model\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <span>Algorithm parameters:</span>\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopSave extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.data = {}\n        this.state = {datasourcesRender: []}\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, \"load _mlsql_.`datasources` as output;\", (data) => {\n            const datasourcesRender = []\n            data.forEach(item => {\n                datasourcesRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({datasourcesRender: datasourcesRender})\n        }, fail => {\n\n        })\n    }\n\n    sourceType = (value, evt) => {\n        this.data.sourceTypeV = value\n    }\n\n    saveMode = (value, evt) => {\n        this.data.saveModeV = value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    partitionBy = (evt) => {\n        this.data.partitionByV = evt.target.value\n    }\n\n    fileNum = (evt) => {\n        this.data.fileNumV = evt.target.value\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let partitionByStr = \"\"\n        if (this.data.partitionByV) {\n            partitionByStr = \"partitionBy \" + this.data.partitionByV\n        }\n\n        let fileNumStr = `key=\"value\"`\n        if (this.data.fileNumV) {\n            fileNumStr = `fileNum=\"${this.data.fileNumV }\"`\n        }\n\n        return `save ${self.data.saveModeV} ${self.data.tableNameV} as ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` \\n where ${fileNumStr} ${partitionByStr};`\n    }\n\n    render() {\n        return <div>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        soureType:<Select\n                        onChange={this.sourceType}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose DataSource type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >{this.state.datasourcesRender}\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        SaveMode:<Select\n                        onChange={this.saveMode}\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Choose save mode type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option key={\"overwrite\"} value={\"overwrite\"}>overwrite</Option>\n                        <Option key={\"append\"} value={\"append\"}>append</Option>\n                        <Option key={\"errorIfExists\"} value={\"errorIfExists\"}>errorIfExists</Option>\n                        <Option key={\"ignore\"} value={\"ignore\"}>ignore</Option>\n                    </Select>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} label=\"tableName\" addonBefore=\"tableName\"\n                               placeholder=\"the tableName will be saved\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" addonBefore=\"Target Path\"\n                               placeholder=\"File path or tableName\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.partitionBy} addonBefore=\"partitionBy\"\n                               placeholder=\"partitionBy\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.fileNum} addonBefore=\"fileNum\"\n                               placeholder=\"fileNum\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\n\nexport default class ETBaseTool extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden,\n            outputTableHidden: props.outputTableHidden,\n            outputTableAlias: props.outputTableAlias,\n            tableAlias: props.tableAlias\n        }\n    }\n\n    renderParam = (item) => {\n        if (item.param === \"keepVersion\" || item.param === \"evaluateTable\") {\n            return null\n        }\n        if (item.param === \"code\" || item.param === \"fitParam.[group].code\") {\n            return <Row><Col>{item.param}:<TextArea style={{marginBottom: \"10px\"}} name={item.param}\n                                                    onChange={this.params}\n                                                    type=\"text\" rows={10}/></Col></Row>\n        }\n        return <Row key={item.param}>\n            <Col>\n                <Input style={{marginBottom: \"10px\"}} name={item.param} onChange={this.params} type=\"text\"\n                       addonBefore={item.param}\n                       placeholder={item.description}/>\n            </Col>\n        </Row>\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load modelParams.\\`${self.name}\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                const temp = this.renderParam(item)\n                if (temp !== null) {\n                    dataForRender.push(temp)\n                    dataForRender.push(<br/>)\n                }\n\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    params = (evt) => {\n        this.data.params[evt.target.getAttribute(\"name\")] = evt.target.value\n    }\n\n    path = (evt) => {\n        this.data.pathV = evt.target.value\n    }\n\n    tableName = (evt) => {\n        this.data.tableNameV = evt.target.value\n    }\n\n    outputTableName = (evt) => {\n        this.data.outputTableNameV = evt.target.value\n    }\n\n    _makeMLSQL() {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            let rv = \"\\\"\" + v + \"\\\"\"\n            if (k === \"code\" || k === \"fitParam.[group].code\") {\n                rv = \"'''\" + v + \"'''\"\n            }\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + rv)\n        }\n\n        let whereStr = \"\"\n        if (paramsArray.length > 0) {\n            whereStr = \"where\"\n        }\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run ${this.data.tableNameV || \"command\"} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${whereStr} ${paramsArray.join(\"and\\n \")} ${asStr};`\n    }\n\n    showTableName = () => {\n        if (this.state.tableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.tableName} size={\"large\"}\n                               addonBefore={this.state.tableAlias ? this.state.tableAlias : \"Input table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    showOutputTableName = () => {\n        if (this.state.outputTableHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input type=\"text\" onChange={this.outputTableName} size={\"large\"}\n                               addonBefore={this.state.outputTableAlias ? this.state.outputTableAlias : \"Output table\"}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return null\n    }\n\n    pathNameForRender = () => {\n        if (this.state.pathAlias) {\n            return this.state.pathAlias\n        } else {\n            return \"Save path\"\n        }\n    }\n    showPathName = () => {\n        if (this.state.pathHidden !== \"true\") {\n            return <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.path} type=\"text\" size={\"large\"} addonBefore={this.pathNameForRender()}\n                               placeholder=\"\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n        }\n        return \"\"\n    }\n\n    _render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport ETBaseTool from \"./ETBaseTool\";\n\n\nexport class ETPopTool extends ETBaseTool {\n    constructor(props) {\n        super(props)\n    }\n\n\n    makeMLSQL = () => {\n        return super._makeMLSQL()\n    }\n\n\n    render() {\n        return super._render()\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETPopDownload extends ETPopTool {\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        for (let k in this.data.params) {\n            let v = this.data.params[k]\n            paramsArray.push(k.replace(/\\[group\\]/g, '0') + \"=\" + \"\\\"\" + v + \"\\\"\")\n        }\n\n        if (paramsArray.length == 0) {\n            paramsArray.push(\"keepVersion=\\\"true\\\"\")\n        }\n        //run command as DownloadExt.`` where from=\"test2\" and to=\"/tmp/jack\";\n        return `run command as ${this.name}.\\`\\` where \n${paramsArray.join(\" and\\n \")};`\n    }\n\n    render() {\n        return <div>\n\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport brace from 'brace';\nimport 'brace/ext/searchbox';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/scala';\nimport 'brace/mode/python';\nimport 'brace/mode/java';\nimport 'brace/theme/github';\nimport 'brace/ext/language_tools'\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport Switch from \"../../../node_modules/antd/lib/switch\";\n\nconst Option = Select.Option;\nconst {TextArea} = Input;\n\nexport class ETPopScriptUDF extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {dataForRender: []}\n        this.codeRef = React.createRef()\n        this.codeCheckRef = React.createRef()\n    }\n\n    udfName = (evt) => {\n        this.data.udfNameV = evt.target.value\n    }\n\n    dataType = (evt) => {\n        this.data.dataTypeV = evt.target.value\n    }\n\n    udfType = (value) => {\n        this.udfTypeV = value\n    }\n\n    code = (newValue) => {\n        this.codeV = newValue\n    }\n\n\n    componentDidMount() {\n\n    }\n\n    langSelect = (value) => {\n        this.lang = value\n        this.codeCheckRef.current.checked = false\n        this.setState({dataType: false})\n        if (this.lang === \"python\") {\n            this.setState({dataType: true})\n        }\n        this.setState({codeLang: value})\n\n\n    }\n\n    setCodeExample = (checked) => {\n        if (checked) {\n            this.codeRef.current.editor.setValue(this.codeExample())\n        } else {\n            this.codeRef.current.editor.setValue(\"\")\n        }\n\n    }\n\n    codeExample = () => {\n        const lang = this.state.codeLang || \"scala\"\n        if (lang === \"scala\") {\n            return `def apply(a:Double,b:Double)={\n   a + b\n}`\n        }\n\n        if (lang === \"python\") {\n            return `def apply(self,m):\n    return m`\n        }\n\n        if (lang === \"java\") {\n            return `import java.util.HashMap;\nimport java.util.Map;\npublic class UDF {\n  public Map<String, Integer[]> apply(String s) {\n    Map<String, Integer[]> m = new HashMap<>();\n    Integer[] arr = {1};\n    m.put(s, arr);\n    return m;\n  }\n}`\n        }\n        return null\n    }\n\n    showDataType = () => {\n        if (this.state.dataType) {\n            return <Row>\n                <Col>\n                    dataType:<TextArea style={{marginBottom: \"10px\"}} name={\"dataType\"} rows={10}\n                                       onChange={this.dataType}\n                                       type=\"text\"\n                                       addonBefore={\"dataType\"}\n                                       placeholder={`This is not required when lang is scala\nAs we know python is not strongly typed language, so\nwe should manually spcify the return type.\nmap(string,string) means a map with key is string type,value also is string type.\narray(string) means a array with string type element.\nnested is support e.g. array(array(map(string,array(string))))\n\n`}/>\n                </Col>\n            </Row>\n\n        }\n        return null\n    }\n\n    showCode = () => {\n        return <div><Row>\n            <Col>\n                code:<AceEditor ref={this.codeRef}\n                                mode={this.state.codeLang || \"scala\"}\n                                theme=\"github\"\n                                width={\"400px\"}\n                                height={\"300px\"}\n                                name=\"code\"\n                                fontSize={16}\n                                showPrintMargin={true}\n                                showGutter={true}\n                                highlightActiveLine={true}\n                                onChange={this.code}\n                                editorProps={{\n                                    $blockScrolling: Infinity\n                                }}\n                                setOptions={{\n                                    enableBasicAutocompletion: true,\n                                    enableLiveAutocompletion: true,\n                                    enableSnippets: false,\n                                    showLineNumbers: true,\n                                    tabSize: 2,\n                                }}\n            />\n            </Col>\n        </Row>\n            <Row>\n                <Col>\n                    <Col span={8}>\n                        Show CodeExample:<Switch ref={this.codeCheckRef} onChange={this.setCodeExample}/>\n                    </Col>\n                </Col>\n            </Row></div>\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        let paramsArray = []\n        paramsArray.push(`lang=\"${this.lang}\"`)\n        paramsArray.push(`code='''${this.codeV}'''`)\n        paramsArray.push(`udfType=\"${this.udfTypeV}\"`)\n        if (this.dataTypeV) {\n            paramsArray.push(`dataType='''${this.dataTypeV}'''`)\n        }\n        return `register ScriptUDF.\\`\\` as ${this.data.udfNameV} where \n${paramsArray.join(\"\\nand \")};`\n    }\n\n    render() {\n        return <div>\n\n            <Row>\n                <Col>\n                    <Input onChange={this.udfName} type=\"text\" size={\"large\"} addonBefore=\"UDF Name\"\n                           placeholder=\"the name of udf\"/>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row>\n                <Col span={4}>\n                    <span>udfType:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        onChange={this.udfType}\n                        style={{width: 200}}\n                        placeholder=\"Select udf type\"\n                        optionFilterProp=\"children\"\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"udf\">udf</Option>\n                        <Option value=\"udaf\">udaf</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col span={4}>\n                    <span>Lang:</span>\n                </Col>\n                <Col span={20}>\n                    <Select\n                        showSearch\n                        style={{width: 200}}\n                        placeholder=\"Select language type\"\n                        optionFilterProp=\"children\"\n                        onChange={this.langSelect}\n                        filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                    >\n                        <Option value=\"java\">java</Option>\n                        <Option value=\"scala\">scala</Option>\n                        <Option value=\"python\">python</Option>\n                    </Select>\n                </Col>\n            </Row>\n            <br/>\n            {this.showDataType()}\n            <br/>\n            {this.showCode()}\n            <br/>\n            <Row>\n                <Col>\n                    <Input style={{marginBottom: \"10px\"}} name={\"methodName\"} onChange={this.params} type=\"text\"\n                           addonBefore={\"methodName\"}\n                           placeholder={\"methodName\"}/>\n                </Col>\n            </Row>\n\n\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETExample extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load modelExample.\\`${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\nimport {ETLoadParams} from \"./ETLoadParams\";\nimport {ETPopTool} from \"./ETPopTool\";\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETRegister extends ETPopTool {\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load model.\\`list\\` as output;`, (data) => {\n            const dataForRender = []\n            data.forEach(item => {\n                dataForRender.push(<Option key={item.name} value={item.name}>{item.name}</Option>)\n            })\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    makeMLSQL = () => {\n        const self = this\n        return `register ${self.data.sourceTypeV}.\\`${self.data.pathV}\\` as ${self.data.outputTableNameV};`\n    }\n\n    etName = (value) => {\n        this.data.sourceTypeV = value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <Row>\n                <Col>\n                    ET:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose DataSource type\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n\n        </div>\n    }\n\n\n}\n","import * as React from \"react\";\nimport {Col, Input, Row, Select} from \"antd\";\nimport ETBaseTool from \"./ETBaseTool\";\n\nconst InputGroup = Input.Group;\n\nexport default class ETStringIndex extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n\n        let asStr = \"\"\n\n        if (this.data.outputTableNameV) {\n            asStr = `as ${this.data.outputTableNameV}`\n        }\n\n        const sqlTrain = super._makeMLSQL().replace(asStr, \"\")\n\n        const sqlBatchPredict = `predict ${this.data.tableNameV} as ${this.name}.\\`${this.data.pathV || \"\"}\\` ${asStr};`\n\n        return (`${sqlTrain}\n        ${sqlBatchPredict}\n        register ${this.name}.\\`${this.data.pathV || \"\"}\\` as ${this.data.functionNameV}; \n        `).stripMargin()\n    }\n\n    functionName = (evt) => {\n        this.data.functionNameV = evt.target.value\n    }\n\n    render() {\n        return <div>\n            {this.showTableName()}\n            <br/>\n\n            {this.showOutputTableName()}\n            <br/>\n            {this.showPathName()}\n            <br/>\n            <InputGroup compact={true}>\n                <Row>\n                    <Col>\n                        <Input onChange={this.functionName} type=\"text\" size={\"large\"} addonBefore={\"functionName\"}\n                               placeholder=\"A function you can use to convert String to number or number to String\"/>\n                    </Col>\n                </Row>\n            </InputGroup>\n            <br/>\n            {this.state.dataForRender.length == 0 ? \"\" : <span>Parameters:</span>}\n            <InputGroup compact={true}>\n                {this.state.dataForRender}\n            </InputGroup>\n\n        </div>\n    }\n}","import ETBaseTool from \"./ETBaseTool\";\nimport * as React from \"react\";\n\nexport class ETDownloadFile extends ETBaseTool {\n\n    constructor(props) {\n        super(props)\n    }\n\n    makeMLSQL = () => {\n        const url = `/api_v1/public/file/download?fileName=${encodeURIComponent(this.data.pathV)}`\n        const link = document.createElement('a');\n        link.href = url;\n        link.target = \"_blank\"\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        return \"\"\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        return super._render()\n    }\n}","import * as React from \"react\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {\n    Select, Form, Icon, Input, Button, Checkbox, Col, Row\n} from 'antd';\n\nconst InputGroup = Input.Group;\nconst Option = Select.Option;\n\n\nexport class ETStreamProgress extends React.Component {\n    constructor(props) {\n        super(props)\n        this.etpop = props.parent\n        this.name = props.name\n        this.data = {params: {}}\n        this.state = {\n            dataForRender: [],\n            tableHidden: props.tableHidden,\n            pathAlias: props.pathAlias,\n            pathHidden: props.pathHidden\n        }\n    }\n\n    componentDidMount() {\n        const self = this\n        const api = new MLSQLAPI(RUN_SCRIPT)\n\n        api.runScript({}, `load _mlsql_.\\`jobs\\` as output;`, (data) => {\n\n            const dataForRender = data.filter(item => {\n                return item.jobType === \"stream\"\n            }).map(item => {\n                return <Option key={item.jobName} value={item.jobName}>{item.jobName}</Option>\n            })\n\n            self.setState({dataForRender: dataForRender})\n        }, fail => {\n\n        })\n    }\n\n    etName = (value) => {\n        this.etName = value\n    }\n    makeMLSQL = () => {\n        return `load _mlsql_.\\`progress/${this.etName}\\` as output;`\n    }\n\n    render() {\n        return <div>\n            <Row>\n                <Col>\n                    Stream Jobs:<Select\n                    onChange={this.etName}\n                    showSearch\n                    style={{width: 200}}\n                    placeholder=\"Choose Stream Name\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                >{this.state.dataForRender}\n                </Select>\n                </Col>\n            </Row>\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport Modal from \"../../../node_modules/antd/lib/modal/Modal\";\nimport {ETPopLoad} from \"./ETPopLoad\";\nimport {ETPopAlgorithm} from \"./ETPopAlgorithm\";\nimport {ETPopSave} from \"./ETPopSave\";\nimport {ETPopTool} from \"./ETPopTool\";\nimport {ETPopDownload} from \"./ETPopDownload\";\nimport {ETPopScriptUDF} from \"./ETPopScriptUDF\";\nimport {ETExample} from \"./ETExample\";\nimport {ETRegister} from \"./ETRegister\";\nimport ETStringIndex from \"./ETStringIndex\";\nimport {ETDownloadFile} from \"./ETDownloadFile\";\nimport {ETStreamProgress} from \"./ETStreamProgress\";\n\nexport class ETPop extends React.Component {\n    constructor(props) {\n        super(props)\n        this.et = props.parent\n        this.popChild = React.createRef()\n        this.state = {etModalVisible: true, title: props.title}\n        this.data = {}\n    }\n\n    disableEtModalVisible = () => {\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n    enableEtModalVisible = () => {\n        const sql = this.popChild.current.makeMLSQL()\n        this.et.makeMLSQL(sql)\n        this.et.setState({etPop: false, etModalVisible: false})\n    }\n\n    renderContent = () => {\n        if (this.et.state.eventName === \"load\") {\n            return <ETPopLoad parent={this} ref={this.popChild}/>\n        }\n        if (this.et.state.eventName === \"save\") {\n            return <ETPopSave name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadExt\") {\n            return <ETPopDownload name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"StringIndex\") {\n            return <ETStringIndex name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"DownloadFile\") {\n            return <ETDownloadFile name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.eventName === \"ETExample\") {\n            return <ETExample name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ETStreamProgress\") {\n            return <ETStreamProgress name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"ScriptUDF\") {\n            return <ETPopScriptUDF name={this.et.state.eventName} ref={this.popChild}/>\n        }\n\n        if (this.et.state.eventName === \"register\") {\n            return <ETRegister name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        if (this.et.state.processType === \"tool\") {\n            return <ETPopTool name={this.et.state.eventName} ref={this.popChild} {...this.et.state}/>\n        }\n\n        return <ETPopAlgorithm name={this.et.state.eventName} ref={this.popChild}/>\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={this.state.title}\n                    visible={this.state.etModalVisible}\n                    onCancel={this.disableEtModalVisible}\n                    onOk={this.enableEtModalVisible}\n                    okText=\"Ok\"\n                    cancelText=\"Cancel\"\n                >\n                    {this.renderContent()}\n                </Modal>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Collapse, Tabs} from 'antd';\nimport {Card, Col, Row} from 'antd';\nimport {ETPop} from \"./ETPop\";\nimport Tag from \"../../../node_modules/antd/lib/tag\";\n\n\nconst Panel = Collapse.Panel;\nconst TabPane = Tabs.TabPane;\n\nexport class MLSQLETQuick extends React.Component {\n    constructor(props) {\n        super(props)\n        this.queryApp = props.parent\n        this.state = {}\n        this.itemData = {}\n    }\n\n    componentDidMount() {\n\n    }\n\n    setData = (k, v) => {\n        this.itemData[k] = v\n    }\n\n    getData = (k) => {\n        return this.itemData[k]\n    }\n\n    onDragStart = (evt) => {\n        const processType = evt.target.getAttribute(\"processtype\")\n        this.setData(\"eventName\", evt.target.getAttribute(\"name\"));\n        this.setData(\"popName\", evt.target.getAttribute(\"help\"));\n        this.setData(\"processType\", processType);\n        this.setData(\"pathAlias\", evt.target.getAttribute(\"pathalias\") || \"\");\n        this.setData(\"outputTableAlias\", evt.target.getAttribute(\"outputtablealias\") || \"\");\n        this.setData(\"tableAlias\", evt.target.getAttribute(\"tablealias\") || \"\");\n        this.setData(\"tableHidden\", evt.target.getAttribute(\"tablehidden\") || false);\n        this.setData(\"pathHidden\", evt.target.getAttribute(\"pathhidden\") || false);\n        this.setData(\"outputTableHidden\", evt.target.getAttribute(\"outputtablehidden\") || false);\n\n\n    }\n\n    makeMLSQL = (sql) => {\n        this.queryApp.getCurrentEditor().ref.appendToEditor(sql)\n    }\n\n\n    renderPop = () => {\n        if (this.state.etPop) {\n            return <ETPop parent={this} title={this.state.popName}/>\n        }\n        return null\n    }\n\n\n    etDoubleClick = (evt) => {\n        this.onDragStart(evt)\n        this.queryApp.getCurrentEditor().ref.etOver(evt)\n    }\n\n    render() {\n        return (\n            <div>\n                <Collapse style={{margin: \"0px 0px\", padding: \"0px 0px\"}}>\n                    <Panel header=\"Quick Menu\" key=\"1\">\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title={\"Load/Save Data\"}>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Load/Save Data\"\n                                         onDragStart={this.onDragStart} name={\"load\"}\n                                         help={\"Load file/db as table\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Load\n                                        data</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} title=\"Save Data\" onDragStart={this.onDragStart}\n                                         name={\"save\"}\n                                         help={\"Save table into file/db \"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Save data</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Algorithms\">\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"TfIdfInPlace\"}\n                                         help={\"Use TfIdfInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>TfIdf</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart}\n                                         name={\"Word2VecInPlace\"}\n                                         help={\"Use Word2VecInPlace vectorize text\"}\n                                         draggable={true} color=\"magenta\" onDoubleClick={this.etDoubleClick}>Word2vec</Tag>\n\n                                    <Tag tyle={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RandomForest\"}\n                                         help={\"Use RandomForest to train a model\"}\n                                         draggable={true} color=\"magenta\">RandomForest</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonAlg\"}\n                                         help={\"Run python lib to train\"}\n                                         draggable={true} color=\"magenta\">Python Algorithm</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"BigDLClassifyExt\"}\n                                         help={\"Use BigDL to develop deep learning algorithm\"}\n                                         draggable={true} color=\"magenta\">Deep Learning</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"NaiveBayes\"}\n                                         help={\"Use NaiveBayes\"}\n                                         draggable={true} color=\"magenta\">NaiveBayes</Tag>\n                                </Card>\n                            </Col>\n\n                            <Col span={8}>\n                                <Card title=\"Python\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonEnvExt\"} processtype={\"tool\"}\n                                         help={\"Create Python Env\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Create Python Env</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"PythonParallelExt\"} processtype={\"tool\"}\n                                         help={\"Run python project\"}\n                                         pathalias={\"Temp directory\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Run python project</Tag>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                        <br/>\n                        <Row gutter={16}>\n                            <Col span={8}>\n                                <Card title=\"Register model as Function\">\n                                    <Tag onDragStart={this.onDragStart} name={\"ScriptUDF\"} processtype={\"tool\"} onDoubleClick={this.etDoubleClick}\n                                         help={\"Use ScriptUDF create udf\"}\n                                         draggable={true} color=\"magenta\">Create UDF</Tag>\n\n                                    <Tag onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"register\"}\n                                         help={\"Register model to function \"}\n                                         pathalias={\"Model saved path\"}\n                                         outputtablealias={\"Function name\"}\n                                         tablealias={\"Function name\"}\n                                         tablehidden={\"true\"}\n                                         pathhidden={\"false\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Register Model As Function</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Jobs\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"JobList\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Show jobs</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} name={\"Kill\"} onDoubleClick={this.etDoubleClick}\n                                         processtype={\"tool\"}\n                                         pathalias={\"groupId or jobName\"} tablehidden={\"true\"}\n                                         help={\"Kill your job\"}\n                                         draggable={true} color=\"magenta\">Kill job</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETStreamProgress\"} processtype={\"\"}\n                                         help={\"Show Progress of Stream\"}\n                                         draggable={true} color=\"magenta\">Show Stream Job Progress</Tag>\n                                </Card>\n                            </Col>\n                            <Col span={8}>\n                                <Card title=\"Tools\">\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadExt\"} processtype={\"tool\"}\n                                         help={\"Use DownloadExt to download files you have uploaded\"}\n                                         draggable={true} color=\"magenta\">Download uploaded file</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ImageLoaderExt\"} processtype={\"tool\"}\n                                         help={\"Use ImageLoaderExt to load images\"}\n                                         pathalias={\"\"} tablehidden={\"true\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Load images</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ConnectMySQL\"} processtype={\"direct\"}\n                                         help={\"\"}\n                                         draggable={true} color=\"magenta\">Connect MySQL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick} name={\"JDBC\"}\n                                         processtype={\"tool\"}\n                                         pathalias={\"DB name in connect\"} tablehidden={\"false\"}\n                                         help={\"Run DLL on MySQL\"}\n                                         draggable={true} color=\"magenta\">MySQL DDL</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"TreeBuildExt\"} processtype={\"tool\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         help={\"Build tree from parent-child\"}\n                                         draggable={true} color=\"magenta\">Parent-Child</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ETExample\"} processtype={\"\"}\n                                         help={\"Show Example of ET\"}\n                                         draggable={true} color=\"magenta\">Show ET Example</Tag>\n\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"RepartitionExt\"} processtype={\"tool\"}\n                                         help={\"Change Table Partition Num\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"false\"}\n                                         draggable={true} color=\"magenta\">Repartition table</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"SendMessage\"} processtype={\"tool\"}\n                                         help={\"Send email\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Send Mail</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"CacheExt\"} processtype={\"tool\"}\n                                         help={\"Cache table\"}\n                                         pathalias={\"\"} tablehidden={\"false\"} pathhidden={\"true\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Cache Table</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"StringIndex\"} processtype={\"tool\"}\n                                         help={\"Convert String to number\"}\n                                         pathalias={\"Mapping path\"} tablehidden={\"false\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Convert String to number</Tag>\n\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"DownloadFile\"} processtype={\"tool\"}\n                                         help={\"Download File\"}\n                                         pathalias={\"Target file\"} tablehidden={\"true\"} pathhidden={\"false\"}\n                                         outputtablehidden={\"true\"}\n                                         draggable={true} color=\"magenta\">Download File to computer</Tag>\n                                    <Tag style={{marginBottom: \"10px\"}} onDragStart={this.onDragStart} onDoubleClick={this.etDoubleClick}\n                                         name={\"ShowResource\"}\n                                         processtype={\"direct\"}\n                                         draggable={true} color=\"magenta\">Cluster Resource</Tag>\n\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Panel>\n                </Collapse>\n                {this.renderPop()}\n            </div>\n\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport MLSQLAceEditor from './MLSQLAceEditor'\nimport {ScriptNodeTree} from './MLSQLTreeNode'\nimport './MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLQueryDisplay} from \"./MLSQLQueryDisplay\";\nimport {MLSQLDash} from \"./query/MLSQLDash\";\nimport {TabEditor} from \"./editor/TabEditor\";\nimport {MLSQLETQuick} from \"./et/MLSQLETQuick\";\nimport {Resizable} from \"re-resizable\";\nimport ExecuteUnit from \"./notebook/ExecuteUnit\";\n\nclass MLSQLQueryApp extends Component {\n\n    constructor(props) {\n        super(props);\n        // create a ref to store the textInput DOM element\n        this.state = {sqlContent: \"\", displayEditor: \"normal\"}\n        this.directoryTree = React.createRef()\n        this.editorGroup = React.createRef()\n        this.messageBox = React.createRef()\n        this.display = React.createRef()\n        this.dash = React.createRef()\n        this.etRef = React.createRef()\n\n        // key is script id\n        // value is editor ref\n        this.fileToEditorMap = {}\n\n    }\n\n    openExistsOrNewEditor = (script) => {\n        const self = this\n\n        if (this.fileToEditorMap.hasOwnProperty(script.id)) {\n            const editorRef = this.fileToEditorMap[script.id]\n            editorRef.ref.text(script.content, script.id)\n            this.editorGroup.current.onChange(editorRef.activeKey)\n\n        } else {\n            this.editorGroup.current.addFull(script.name, (editorRef) => {\n                editorRef.ref.text(script.content, script.id)\n                self.fileToEditorMap[script.id] = editorRef\n            })\n\n        }\n\n        if (script.name.endsWith(\".nb\")) {\n            self.setState({displayEditor: \"notebook\"})\n        }else if (script.name.endsWith(\".py\")) {\n            self.setState({displayEditor: \"pythoneditor\"})\n        } else {\n            self.setState({displayEditor: \"normal\"})\n        }\n    }\n\n    closeEditor = (editorRef) => {\n        const tempFileToEditorMap = Object.keys(this.fileToEditorMap).filter(key => {\n            return this.fileToEditorMap[key].activeKey !== editorRef.activeKey\n        }).reduce((pre, key) => {\n            pre[key] = this.fileToEditorMap[key]\n            return pre\n        }, {})\n        this.fileToEditorMap = tempFileToEditorMap\n    }\n\n    getCurrentEditor = () => {\n        return this.editorGroup.current.getCurrentEditor()\n    }\n\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    tableAndDash = () => {\n        if (this.state.displayEditor !== \"notebook\" || this.state.displayEditor !== \"pythoneditor\") {\n            return <div>\n                <Resizable defaultSize={{height: \"300px\"}} onResize={() => {\n                    this.messageBox.current.editor.resize();\n                }}>\n                    <AceEditor\n                        height={\"100%\"}\n                        width={\"100%\"}\n                        ref={this.messageBox}\n                        mode=\"text\"\n                        theme=\"github\"\n                        name=\"message_box\"\n                    />\n                </Resizable>\n\n                <div>\n                    <MLSQLDash ref={this.dash} parent={this}/>\n                </div>\n                <div className=\"mlsql-query-display\">\n                    <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n            </div>\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div className=\"mlsql-queryapp\">\n\n                <div className=\"mlsql-directory-tree\">\n                    <ScriptNodeTree ref={this.directoryTree} parent={this}/>\n                </div>\n                <div className=\"mlsql-editor\">\n                    <div style={{marginBottom: \"10px\"}}>\n                        <MLSQLETQuick ref={this.etRef} parent={this}/>\n                    </div>\n                    <TabEditor ref={this.editorGroup} parent={this}/>\n                    {this.tableAndDash()}\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default MLSQLQueryApp","export const VIEW_CLUSTER = \"cluster\"\nexport const VIEW_CONSOLE = \"console\"\nexport const VIEW_TEAM = \"team\"\nexport const VIEW_DEMO = \"demo\"\nexport const VIEW_SCRIPT_PLUGINS = \"script_plugins\"\nexport const CLUSTER_VIEW_BackendForm = \"BackendForm\"\nexport const CLUSTER_VIEW_BackendList = \"BackendList\"\nexport const CLUSTER_VIEW_SetBackendTags = \"SetBackendTags\"\n\nexport const DEMO_VIEW_BIGDL = \"bigdl\"\nexport const DEMO_VIEW_NLP = \"nlp\"\nexport const DEMO_VIEW_STREAM = \"stream\"\nexport const DEMO_VIEW_BASIC = \"basic\"\n\n\nexport const TEAM_VIEW_BASIC = \"team_view_basic\"\nexport const SETUP_VIEW_BASIC = \"setup_view_basic\"\nexport const CLUSTER_VIEW_BASIC = \"cluster_view_basic\"\nexport const AUTH_VIEW_BASIC = \"auth_view_basic\"\nexport const SETTING_VIEW_BASIC = \"setting_view_basic\"\n","import * as React from \"react\";\nimport {Steps, Button, message, List} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class BigDL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.editor = React.createRef()\n        this.dash = React.createRef()\n        this.display = React.createRef()\n        this.messageBox = React.createRef()\n\n        this.techData = this.generateTechData()\n        this.commandData = this.generateCommandData()\n        this.steps = this.generateSteps()\n    }\n\n    generateView(step) {\n        return <div style={{marginTop: \"30px\"}}>\n            {this.techData[step].length > 0 && <List\n                header={<div>How to do:</div>}\n                footer={<div>Congratulations</div>}\n                bordered\n                dataSource={this.techData[step]}\n                renderItem={item => (<List.Item>{item}</List.Item>)}\n            />}\n\n            <div className=\"mlsql-queryapp\">\n                <div className=\"mlsql-editor\">\n                    <MLSQLAceEditor ref={this.editor} parent={this}/>\n                    <div className=\"mlsql-messagebox\">\n                        <AceEditor\n                            height={\"300px\"}\n                            width={\"100%\"}\n                            ref={this.messageBox}\n                            mode=\"text\"\n                            theme=\"github\"\n                            name=\"message_box\"\n                        />\n                    </div>\n                    <div>\n                        <MLSQLDash ref={this.dash} parent={this}/>\n                    </div>\n                    <div className=\"mlsql-query-display\">\n                        <MLSQLQueryDisplay ref={this.display} parent={this}/></div>\n                </div>\n            </div>\n        </div>\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Cifar10 Images',\n            content: this.generateView(0),\n        }, {\n            title: 'Resize Images',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Train',\n            content: this.generateView(3),\n        }, {\n            title: 'Predict',\n            content: this.generateView(4),\n        }];\n    }\n\n    setData = (data) => {\n        this.queryResData = data\n        this.dash.current.refresh()\n    }\n\n    getEditor = () => {\n        return this.editor.current.aceEditorRef.current.editor\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[0], -1)\n            } catch (e) {\n\n            }\n\n        }, 1000)\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n        setTimeout(() => {\n            try {\n                this.getEditor().setValue(this.commandData[current], -1)\n            } catch (e) {\n\n            }\n        }, 1000)\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\">{this.steps[current].content}</div>\n\n            </div>\n        );\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/cifar.tar' and field [to] with '/tmp'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(Since there are so many files, it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Load images\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened\\n\" +\n                \"fill field [Output table] with 'images'\\n\" +\n                \"field [imageDir]  with '/tmp/cifar'\\n\" +\n                \"field [code]  with \\n\" +\n                \"\\n\" +\n                \"```scala\\n\" +\n                \"def apply(params:Map[String,String]) = {\\n\" +\n                \"         Resize(256, 256) -> CenterCrop(224, 224) ->\\n\" +\n                \"          MatToTensor() -> ImageFrameToSample()\\n\" +\n                \"       }\\n\" +\n                \"```\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Use set statement to set a variable named labelMappingPath.\",\n                \"Step 1: extract the class name from path\",\n                \"Step 2: map label string to number\",\n                \"Step 3: add 1 to label number since the bigdl requires that.\",\n                \"Step 4: finally, we get features and label\",\n                \"Step 5: Click button Run\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Algorithms/Deep Learning\",\n                <ReactMarkdown source={\"Step 3: An dialog will be opened  \\n\" +\n                \"fill field [tableName] with 'trainData'  \\n\" +\n                \"field [Model save path]  with '/tmp/bigdl' \\n\" +\n                \"field [code]  with    \\n\" +\n                \"```scala  \\n\" +\n                \" def apply(params:Map[String,String])={\\n\" +\n                \"                        val model = Sequential()\\n\" +\n                \"                        model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\\n\" +\n                \"                        model.add(Convolution2D(6, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv1_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Convolution2D(12, 5, 5, activation = \\\"tanh\\\").setName(\\\"conv2_5x5\\\"))\\n\" +\n                \"                        model.add(MaxPooling2D())\\n\" +\n                \"                        model.add(Flatten())\\n\" +\n                \"                        model.add(Dense(100, activation = \\\"tanh\\\").setName(\\\"fc1\\\"))\\n\" +\n                \"                        model.add(Dense(params(\\\"classNum\\\").toInt, activation = \\\"softmax\\\").setName(\\\"fc2\\\"))\\n\" +\n                \"                    }\" +\n                \"```  \\n\"}/>,\n                \"Step 4: Click Ok in dialog\",\n                <ReactMarkdown source={\"Step 5: modify the where statement, add \\n\" +\n                \"```\\n\" +\n                \"fitParam.0.featureSize=\\\"[3,28,28]\\\"\\n\" +\n                \"and fitParam.0.classNum=\\\"10\\\"\\n\" +\n                \"and fitParam.0.maxEpoch=\\\"50\\\"\\n\" +\n                \"```\"}/>,\n                \"Step 6: Click button Run\"\n            ],\n            []\n        ]\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n            from=\"public/cifar.tar\" \n            and to=\"/tmp\";`.stripMargin(),\n\n\n            `run command as ImageLoaderExt.\\`/tmp/cifar\\` \n            where code='''\n        def apply(params:Map[String,String]) = {\n         Resize(256, 256) -> CenterCrop(224, 224) ->\n          MatToTensor() -> ImageFrameToSample()\n       }''' as images;`.stripMargin(),\n\n\n            `-- convert image path to number label \n            set labelMappingPath = \"/tmp/si\"; \n            select split(split(imageName,\"_\")[1],\"\\\\\\\\.\")[0] as labelStr,features from images as tempData;\n            --convert the label string to number \n            train tempData as StringIndex.\\`\\${labelMappingPath}\\` where inputCol=\"labelStr\" and outputCol=\"labelIndex\";\n            predict tempData as StringIndex.\\`\\${labelMappingPath}\\` as tempData;\n            -- Since the bigdl need label number from 1, we should plus one\n            select (cast(labelIndex as float) + 1) as label,features from tempData as trainData;`.stripMargin(),\n\n\n            `--train with LeNet5 model\n            set modelPath = \"/tmp/bigdl\";            \n            train trainData as BigDLClassifyExt.\\`\\${modelPath}\\` where\n            fitParam.0.featureSize=\"[3,28,28]\"\n            and fitParam.0.classNum=\"10\"\n            and fitParam.0.maxEpoch=\"50\"\n            and fitParam.0.code='''\n            |       def apply(params:Map[String,String])={\n            |            val model = Sequential()\n            |            model.add(Reshape(Array(3, 28, 28), inputShape = Shape(28, 28, 3)))\n            |            model.add(Convolution2D(6, 5, 5, activation = \"tanh\").setName(\"conv1_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Convolution2D(12, 5, 5, activation = \"tanh\").setName(\"conv2_5x5\"))\n            |            model.add(MaxPooling2D())\n            |            model.add(Flatten())\n            |            model.add(Dense(100, activation = \"tanh\").setName(\"fc1\"))\n            |            model.add(Dense(params(\"classNum\").toInt, activation = \"softmax\").setName(\"fc2\"))\n            |        }''';\n            `.stripMargin(),\n\n            `set modelPath = \"/tmp/bigdl\";\n            \n            -- batch predict            \n            predict trainData as BigDLClassifyExt.\\`\\${modelPath}\\` as predictdata;\n            \n            -- register BigDLClassifyExt.\\`/tmp/bigdl\\` as cifarPredict;\n            select vec_argmax(cifarPredict(vec_dense(features))) as predicted_label,\n            label from trainData\n            as output;`.stripMargin()\n\n\n        ]\n    }\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class NLP extends BigDL {\n\n    constructor(props) {\n        super(props)\n    }\n\n    generateSteps() {\n        return [{\n            title: 'Download Dataset SogouCS.WWW08',\n            content: this.generateView(0),\n        }, {\n            title: 'Parse the xml file',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Tools/Download uploaded file to Editor\",\n                \"Step 3: An dialog will be opened, fill field [from] with 'public/SogouCS.reduced.tar' and field [to] with '/tmp/nlp/sogo'\",\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Click button Run(it will take a while.)\"\n            ],\n            [\n                \"Step 0: Clear the content in editor\",\n                \"Step 1: Click Quick Menu\",\n                \"Step 2: Drag Load/Save Data/Load data\",\n                <ReactMarkdown source={`\n                |\n                |Step 3: An dialog will be opened,\n                |fill field [path] with '/tmp/nlp/sogo' and field [Output table] with 'xmlData',\n                |specify rowTag to doc and charset to GBK\n                |\"\n                |\n                `.stripMargin()}/>,\n                \"Step 4: Click Ok in dialog\",\n                \"Step 5: Use SQL to filter _corrupt_record\",\n                \"Step 6: Click button Run(it will take a while.)\"\n            ],\n            [\n                <ReactMarkdown source={`\n                | Step 0: We will treat url as label source, we use SQL to extract label from url:\n                |\n                |\n                |\\`\\`\\`\n                |-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n                |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp\n                |where temp.labelStr is not null\n                |as rawData;\n                |\\`\\`\\`\n                |\n                |For now , the label is string, we should convert them to number\n\n                `.stripMargin()}/>,\n\n                <ReactMarkdown source={`\n                |Step 1:  Drag Tools/Convert String to number, a dialog will open,\n                |\n                |\\`\\`\\`\n                |     1. set Input table as rawData,\n                |     2. Set save path as /tmp/nlp/label_mapping\n                |     3. Set inputCol as labelStr\n                |     4. Set outputCol as label\n                |     5. set Output table as rawDataWithLabel\n                |     6. set functionName table as rawDataWithLabel\n                |\\`\\`\\`\n                |We can use the functionName in SQL to convert String to number or number to String.\n                `.stripMargin()}/>\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/TfIdf, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Input table as rawDataWithLabel,\n                |         2. Set save path as /tmp/nlp/tfidf\n                |         3. Set inputCol as content\n                |         4. Set nGrams as 2\n                |         5. set Output table as trainData\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as tfidf_predict,\n                |         2. Set Model saved path as /tmp/nlp/tfidf\n                |         3. Set et as TfIdfInPlace\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Step 0:  Drag Algorithms/RandomForest, a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set tableName as trainData,\n                |         2. Set Model save path as /tmp/nlp/rf\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n                <ReactMarkdown source={`\n                |Step 1:  Drag [Register model as Function]/[Register Model As Function], a dialog will open,\n                |\n                |\\`\\`\\`\n                |         1. set Function name  as rf_predict,\n                |         2. Set Model saved path as /tmp/nlp/rf\n                |         3. Set et as RandomForest\n                |\\`\\`\\`\n                |Click Ok in dialog\n                `.stripMargin()}/>,\n\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ],\n            [\n                <ReactMarkdown source={`\n                |Paste:\n                |\n                |\\`\\`\\`sql\n                |select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;\n                |\\`\\`\\`\n                `.stripMargin()}/>,\n                \"Step 2: Click button Run(it will take a while.)\"\n\n            ]\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `run command as DownloadExt.\\`\\` where \n             |from=\"public/SogouCS.reduced.tar\" and\n             |to=\"/tmp/nlp/sogo\";`.stripMargin(),\n\n            `load xml.\\`/tmp/nlp/sogo\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport BigDL from \"./BigDL\";\n\nconst ReactMarkdown = require('react-markdown')\n\nexport class Basic extends BigDL {\n\n    generateSteps() {\n        return [{\n            title: 'Variable in MLSQL',\n            content: this.generateView(0),\n        }, {\n            title: 'Process excel',\n            content: this.generateView(1),\n        }, {\n            title: 'Extract Label',\n            content: this.generateView(2),\n        }, {\n            title: 'Run TFIDF',\n            content: this.generateView(3),\n        }, {\n            title: 'Train/Register',\n            content: this.generateView(4),\n        }, {\n            title: 'Predict',\n            content: this.generateView(5),\n        }];\n    }\n\n    generateTechData() {\n        return [\n            [\n                <ReactMarkdown source={`\n                |\n                |\n                |\n                `.stripMargin()}/>\n            ],\n            [],\n            [],\n            [],\n            [],\n            []\n\n        ]\n\n    }\n\n    generateCommandData() {\n        return [\n            `|-- set string\n             |set email=\"allwefantasy@gmail.com\";\n             |select \"\\${email}\" as email  as table1;\n             |             \n             |-- nested variable reference\n             |set email=\"allwefantasy@gmail.com\";\n             |set hello=\"hello \\${email}\";\n             |\n             |-- build-in variable: HOME OWNER date\n             |set day_id ='''\\${date.toString(\"yyyy-MM-dd\")}''';\n             |select \"\\${day_id}\" as a as test111;\n             |\n             |-- conf/spark.sql(\"set spark.sql.shuffle.partitions=200\")\n             |set spark.sql.shuffle.partitions=200 where type=\"conf\";\n             |\n             |-- shell\n             |set date=\\`date\\` where type=\"shell\";\n             |select \"\\${date}\" as dt as output;\n             |                \n             `.stripMargin(),\n\n            `load xml.\\`...xml..file...path\\` where rowTag=\"doc\" and charset=\"GBK\" as xmlData;\n            |select * from xmlData where _corrupt_record is null as xmlData; \n            `.stripMargin(),\n\n            `-- http://sports.sohu.com/20070422/n249599819.shtml extract sports from url\n            |select temp.* from (select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,content from xmlData) as temp \n            |where temp.labelStr is not null \n            |as rawData;\n            |-- select distinct(split(split(url,\"/\")[2],\"\\\\\\\\.\")[0]) as labelStr from rawData as output;\n            |-- select split(split(url,\"/\")[2],\"\\\\\\\\.\")[0] as labelStr,url from rawData as output;\n            |\n            |run rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` where inputCol=\"labelStr\"and\n            |outputCol=\"label\" ;\n            |predict rawData as StringIndex.\\`/tmp/nlp/label_mapping\\` as rawDataWithLabel;\n            |register StringIndex.\\`/tmp/nlp/label_mapping\\` as convert_label; `.stripMargin(),\n\n\n            `train rawDataWithLabel as TfIdfInPlace.\\`/tmp/nlp/tfidf\\` where inputCol=\"content\"\n            |and nGrams=\"2\" as trainData;\n            |\n            |register TfIdfInPlace.\\`/tmp/nlp/tfidf\\` as tfidf_predict;`.stripMargin(),\n\n            `train trainData as RandomForest.\\`/tmp/nlp/rf\\` where \n            |keepVersion=\"true\";\n            |\n            |register RandomForest.\\`/tmp/nlp/rf\\` as rf_predict;`.stripMargin(),\n\n            `select rf_predict(tfidf_predict(\"china is cool\")) as predicted as output;`.stripMargin()\n        ]\n    }\n\n}","import * as React from \"react\";\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP} from \"../../common/ViewConst\";\nimport BigDL from \"./BigDL\";\nimport {NLP} from \"./NLP\";\nimport {Basic} from \"./Basic\";\n\nexport class Demos extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentView: DEMO_VIEW_BASIC\n        }\n    }\n\n    renderView = () => {\n        if (this.state.currentView === DEMO_VIEW_BIGDL) {\n            return <BigDL/>\n        }\n        if (this.state.currentView === DEMO_VIEW_NLP) {\n            return <NLP/>\n        }\n        if (this.state.currentView === DEMO_VIEW_BASIC) {\n            return <Basic/>\n        }\n        return null\n    }\n\n    render() {\n        return this.renderView()\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {DEMO_VIEW_BASIC, DEMO_VIEW_BIGDL, DEMO_VIEW_NLP, DEMO_VIEW_STREAM} from \"../../common/ViewConst\";\nimport {Demos} from \"./Demos\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.demosRef = React.createRef()\n\n    }\n\n    switchToBigDL = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BIGDL})\n    }\n    switchToNLP = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_NLP})\n    }\n\n    switchToStream = (e) => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_STREAM})\n    }\n\n    switchToBasic = () => {\n        this.demosRef.current.setState({currentView: DEMO_VIEW_BASIC})\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToBasic}>Basic Tutorial</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBigDL}>Cifar10</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToNLP}>NLP</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block>Stream</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block>Excel</Button>\n                        </Menu.Item>\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            <Demos ref={this.demosRef}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./demo/MainPage\";\n\nexport class MLSQLDemoApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Icon, Input, Button, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHECK_TEAM_NAME, CREATE_TEAM} from \"../../service/BackendConfig\";\n\n\nclass CreateTeamForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        console.log(props)\n        this.teamCards = props.parent\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CREATE_TEAM)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create team success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create team fail\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create team fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    teamNameCheck = (rule, value, callback) => {\n        if (value) {\n            const api = new MLSQLAPI(CHECK_TEAM_NAME)\n            api.request2({name: value}, (resJson) => {\n                if (!resJson[\"msg\"]) {\n                    callback(`${value} have been taken. Try another`);\n                }\n                else callback()\n            }, (failStr) => {\n                callback('server error:' + failStr);\n            })\n        } else {\n            callback()\n        }\n\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the team name!'},\n                            {validator: this.teamNameCheck}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>} placeholder=\"Team name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLCreateTeamForm = Form.create({name: 'create_team'})(CreateTeamForm);","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {\n    LIST_ROLES_MEMBER,\n    LIST_ROLES_TABLE,\n    LIST_TEAMS_MEMBER,\n    LIST_TEAMS_ROLE, LIST_TEAMS_TABLES, REMOVE_ROLES_MEMBER, REMOVE_ROLES_TABLE,\n    REMOVE_TEAMS_MEMBER,\n    REMOVE_TEAMS_ROLE, REMOVE_TEAMS_TABLE, RUN_SCRIPT\n} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchTeams(apiUrl, self, stateKey = \"data\") {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByTeam(self, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_MEMBER)\n        api.request2({teamName: teamName}, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchRoles(parent, teamName, stateKey = \"data\") {\n        const api = new MLSQLAPI(LIST_TEAMS_ROLE)\n        api.request2({teamName: teamName}, resJson => {\n            parent.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTablesByRole(parent, teamName, roleName, stateKey) {\n        const api = new MLSQLAPI(LIST_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleMember(parent, teamName, roleName, userName, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName, userName: userName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchMembersByRole(parent, teamName, roleName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_ROLES_MEMBER)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n            if (stateKey) {\n                parent.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRole(parent, teamName, roleName) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_ROLE)\n        api.request2({teamName: teamName, roleName: roleName}, resJson => {\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTeamMember(parent, teamName, userName, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_MEMBER)\n        api.request2({teamName: teamName, userName: userName}, resJson => {\n            callback()\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static teamInvite(self, apiUrl, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(apiUrl)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTables(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_TEAMS_TABLES)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeTable(self, teamName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_TEAMS_TABLE)\n        api.request2({teamName: teamName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchTableTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/tableTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchSourceTypes(self, stateKey = \"data\") {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/sourceTypes\\` as output;`, resJson => {\n            self.setState({[stateKey]: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchOperateTypes(self, stateKey) {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.runScript({}, `load _mlsql_.\\`tables/operateTypes\\` as output;`, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeRoleTable(self, teamName, roleName, tableId, stateKey, callback) {\n        const api = new MLSQLAPI(REMOVE_ROLES_TABLE)\n        api.request2({teamName: teamName, roleName: roleName, tableId: tableId}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ACCEPT_TEAMS_MEMBER,\n    LIST_TEAMS,\n    LIST_TEAMS_INVITED,\n    LIST_TEAMS_MEMBER,\n    REFUSE_TEAMS_MEMBER\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nexport class Teams extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n\n    accept = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, ACCEPT_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n            this.teamCards.teamYourJoinRef.current.refresh()\n        })\n    }\n\n    refuse = (evt) => {\n        evt.preventDefault()\n        Service.teamInvite(this, REFUSE_TEAMS_MEMBER, this.teamName, null, () => {\n            Service.fetchTeams(this.apiUrl, this, \"data\")\n        })\n    }\n\n    refresh = () => {\n        Service.fetchTeams(this.apiUrl, this, \"data\")\n    }\n    renderCommand = (value) => {\n        this.teamName = value\n        if (this.apiUrl === LIST_TEAMS_INVITED) {\n            return [<a onClick={this.accept}>accept</a>, <a onClick={this.refuse}>refuse</a>]\n        }\n        return []\n    }\n\n\n    render() {\n        return (\n            <div>\n                <List\n                    dataSource={this.state.data}\n                    renderItem={item => (\n                        <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                            <List.Item.Meta\n                                title={<a href=\"#\">{item.name}</a>}\n                            />\n                        </List.Item>\n                    )}\n                >\n                </List>\n            </div>\n        );\n    }\n}\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass InviteMember extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_MEMBER)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.teamCards.setState({refresh: true})\n                        message.success(\"Invite success\", 3)\n                    } else {\n                        message.warning(\"Invite fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    self.teamCards.setState({refresh: true})\n                    message.error(\"Invite fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userNames', {\n                        rules: [\n                            {required: true, message: 'Please input the user name you want invite'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"team\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLInviteMember = Form.create({name: 'create_team'})(InviteMember);","import {Select} from \"antd\";\nimport * as React from \"react\";\nimport TeamService from \"./Service\";\n\nexport class Views {\n    static renderTeamsForSelect = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static onTeamSelect = (self, teamName) => {\n        self.currentTeamName = teamName\n        TeamService.fetchRoles(self, teamName, \"roles\")\n    }\n\n\n    static renderTeams = (self) => {\n        return self.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    static renderRoles = (self) => {\n        return self.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderMembers = (self) => {\n        return self.state.members.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    static renderBackends = (self) => {\n        return self.state.backends.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n    s\n    static teamSelect = (self, onChangeCallback) => {\n        return <Select\n            placeholder=\"Team name\"\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderTeams(self)}\n        </Select>\n    }\n\n    static roleSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"role name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderRoles(self)}\n        </Select>\n    }\n\n    static backendSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"backend name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderBackends(self)}\n        </Select>\n    }\n\n    static memberSelect = (self, onChangeCallback, mode = \"default\") => {\n        return <Select\n            placeholder=\"member name\"\n            mode={mode}\n            size={\"large\"}\n            style={{width: 200}}\n            onChange={onChangeCallback}\n        >\n            {Views.renderMembers(self)}\n        </Select>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS_MEMBER} from \"../../service/BackendConfig\";\n\n\nexport class TeamMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(this.apiUrl, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchMembersByTeam(this, member, \"members\")\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            Service.removeTeamMember(self, self.currentTeam, userName, () => {\n                Service.fetchMembersByTeam(self, self.currentTeam, \"members\")\n            })\n        }\n        }>remove</a>]\n\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderMembers()}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nclass AddRoleForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        if (self.teamCards.teamsRef) {\n                            self.teamCards.teamsRef.current.refresh()\n                        }\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(LIST_TEAMS)\n        const self = this\n        api.request2({}, resJson => {\n            self.setState({teams: resJson})\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, 15)\n        })\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleNames', {\n                        rules: [\n                            {required: true, message: 'Please input the role name you want to create'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"role\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"User name, split with ','\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddRoleForTeam = Form.create({name: 'add_role_for_team'})(AddRoleForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamRoles extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    refresh = () => {\n        if(this.currentTeam){\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n    }\n\n    renderCommand = (roleName) => {\n        return [<a onClick={() => {\n            Service.removeRole(this, this.currentTeam, roleName)\n            Service.fetchRoles(this, this.currentTeam, \"roles\")\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.roles}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={<a href=\"#\">{item.name}</a>}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_MEMBER,\n    ADD_TEAMS_MEMBER,\n    ADD_TEAMS_ROLE,\n    ADD_TEAMS_TABLE,\n    CREATE_TEAM,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\n\n\nclass AddMemberForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_MEMBER)\n                api.request2(params, (resJson) => {\n                    console.log(resJson)\n                    console.log(\"----\")\n                    if (resJson[\"msg\"] === \"success\") {\n                        if (self.teamCards.roleMembersRef) {\n                            self.teamCards.roleMembersRef.current.refresh()\n                        }\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Views.onTeamSelect(this, teamName)\n        Service.fetchMembersByTeam(this, teamName, \"members\")\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            self.onTeamSelect(teamName)\n                        })\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name'}\n                        ],\n                    })(\n                        Views.roleSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('userName', {\n                        rules: [\n                            {required: true, message: 'Please input the member name'}\n                        ],\n                    })(\n                        Views.memberSelect(self, () => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddMemberForRole = Form.create({name: 'add_member_for_role'})(AddMemberForRole);","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_MEMBER, ADD_TEAMS_ROLE, ADD_TEAMS_TABLE, CREATE_TEAM, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForTeam extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            tableTypes: [],\n            sourceTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n        Service.fetchTableTypes(this, \"tableTypes\")\n        Service.fetchSourceTypes(this, \"sourceTypes\")\n\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTableTypes = () => {\n        return this.state.tableTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n    renderSourceTypes = () => {\n        return this.state.sourceTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the table name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"table name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('db', {\n                        rules: [],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"db name\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('tableType', {\n                        rules: [\n                            {required: true, message: 'Please input the table type you want to create'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"table Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTableTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('sourceType', {\n                        rules: [],\n                    })(\n                        <Select\n                            placeholder=\"source Type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderSourceTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForTeam = Form.create({name: 'add_table_for_team'})(AddTableForTeam);","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    List, message, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\n\nexport class TeamTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchTables(this, member, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam) {\n            Service.fetchTables(this, this.currentTeam, \"tables\")\n        }\n    }\n\n    renderCommand = (tableId) => {\n        return [<a onClick={(evt) => {\n            evt.preventDefault()\n            Service.removeTable(this, this.currentTeam, tableId, null, () => {\n                Service.fetchTables(this, this.currentTeam, \"tables\")\n            })\n\n        }\n        }>remove</a>]\n    }\n\n    renderDB = (item) => {\n        if (item.db !== \"undefined\" && item.db) {\n            return item.db\n        } else return \"default\"\n    }\n\n    renderRoles = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={`${item.tableType}:${this.renderDB(item)}:${item.name}`}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Select\n                    placeholder=\"Team name\"\n                    size={\"large\"}\n                    style={{width: 200}}\n                    onChange={this.selectTeam}\n                >\n                    {Views.renderTeamsForSelect(this)}\n                </Select>\n                {this.renderRoles()}\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleMembers extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    onRoleSelect = (roleName) => {\n        this.currentRoleName = roleName\n        Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n    }\n\n    refresh = () => {\n        if (this.currentTeamName && this.currentRoleName) {\n            Service.fetchMembersByRole(this, this.currentTeamName, this.currentRoleName, \"members\")\n        }\n    }\n\n    renderCommand = (userName) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeamName && this.currentRoleName) {\n                Service.removeRoleMember(this, this.currentTeamName, this.currentRoleName, userName, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderMembers = () => {\n        return <List\n            dataSource={this.state.members}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.name)}>\n                    <List.Item.Meta\n                        title={item.name}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        const self = this\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })}\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {Views.roleSelect(self, self.onRoleSelect, \"default\")}\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderMembers()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {MLSQLCreateTeamForm} from \"./CreateTeam\";\nimport {Teams} from \"./Teams\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS, LIST_TEAMS_INVITED, LIST_TEAMS_JOINED} from \"../../service/BackendConfig\";\nimport {InviteMember, MLSQLInviteMember} from \"./InviteMember\";\nimport {TeamMembers} from \"./TeamMembers\";\nimport {MLSQLAddRoleForTeam} from \"./AddRoleForTeam\";\nimport {TeamRoles} from \"./TeamRoles\";\n\nimport {MLSQLAddMemberForRole} from \"./AddMemberForRole\";\nimport {RoleMembers} from \"./RoleMembers\";\n\n\nexport class TeamCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.state = {}\n        this.teamRolesRef = React.createRef()\n        this.teamMembersRef = React.createRef()\n        this.teamsRef = React.createRef()\n        this.roleTablesRef = React.createRef()\n        this.roleMembersRef = React.createRef()\n        this.teamYourJoinRef = React.createRef()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"Team belongs to you\" bordered={false}><Teams parent={this} ref={this.teamsRef}\n                                                                              apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Create new team\" bordered={false}>\n                        <MLSQLCreateTeamForm parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Team\" bordered={false}><TeamMembers ref={this.teamMembersRef}\n                                                                                     parent={this} apiUrl={LIST_TEAMS}/></Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Invite members\" bordered={false}>\n                        <MLSQLInviteMember parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Team you join\" bordered={false}><Teams parent={this} ref={this.teamYourJoinRef}\n                                                                        apiUrl={LIST_TEAMS_JOINED}/></Card>\n                </Col>\n\n                <Col span={12}>\n                    <Card title=\"Team inviting you\" bordered={false}><Teams parent={this} apiUrl={LIST_TEAMS_INVITED}/></Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n\n                <Col span={16}>\n                    <Card title=\"View Roles By Team\" bordered={false}><TeamRoles ref={this.teamRolesRef}\n                                                                                 parent={this} apiUrl={ADD_TEAMS_ROLE}/></Card>\n                </Col>\n\n                <Col span={8}>\n                    <Card title=\"Add role to Team\" bordered={false}>\n                        <MLSQLAddRoleForTeam parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n\n            <Row gutter={24}>\n                <Col span={16}>\n                    <Card title=\"View members By Role\" bordered={false}>\n                        <RoleMembers parent={this} ref={this.roleMembersRef}/>\n                    </Card>\n                </Col>\n\n\n                <Col span={8}>\n                    <Card title=\"Add Member to Role\" bordered={false}>\n                        <MLSQLAddMemberForRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n        </div>\n    }\n}","import {MLSQLAPI} from \"../../../service/MLSQLAPI\";\nimport {message} from \"antd\";\nimport {CLUSTER_MANAGER, LIST_BACKENDS_BY_TEAM} from \"../../../service/BackendConfig\";\n\nexport default class Service {\n\n    static MESSAGE_TIMEOUT = 10\n\n    static fetchBackends(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/list\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static checkBackendName(self, name, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: name}, {action: \"/backend/name/check\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendsByNames(self, names, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({names: names}, {action: \"/backend/list/names\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static fetchBackendNamesByTeam(self, teamName, stateKey, callback) {\n        const api = new MLSQLAPI(LIST_BACKENDS_BY_TEAM)\n        api.request2({teamName: teamName}, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback(resJson)\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static addBackend(self, params, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign(params, {action: \"/backend/add\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static removeBackend(self, backendName, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({name: backendName}, {action: \"/backend/remove\"})\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n\n    static updateBackendTags(self, backendName, tags, stateKey, callback) {\n        const api = new MLSQLAPI(CLUSTER_MANAGER)\n        const newParams = Object.assign({tags: tags, name: backendName}, {\n            action: \"/backend/tags/update\",\n            merge: \"append\"\n        })\n        api.request2(newParams, resJson => {\n            if (stateKey) {\n                self.setState({[stateKey]: resJson})\n            }\n            if (callback) {\n                callback()\n            }\n        }, failStr => {\n            message.warning(\"load data fail:\" + failStr, Service.MESSAGE_TIMEOUT)\n        })\n    }\n}","import * as React from \"react\";\nimport Service from \"./remote/Service\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {Views as TeamViews} from \"../team/remote/Views\"\nimport TeamService from \"../team/remote/Service\"\nimport CluserService from \"./remote/Service\"\nimport {Row, Col, Button} from \"antd\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\n\nexport class ClusterBackends extends React.Component {\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.dataViewer = React.createRef()\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    renderBackends = () => {\n        return <MLSQLQueryDisplay ref={this.dataViewer} parent={this}/>\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        const tag = self.currentTeamName + \"_\" + roleName\n        Service.fetchBackends(this, {\n            tag: tag\n        }, \"backends\", () => {\n            self.dataViewer.current.update(self.state.backends.map(item => {\n                const {ecsResourcePoolId, id, tags, ...newitem} = item;\n                newitem[\"command\"] = <Button onClick={(evt) => {\n                    CluserService.removeBackend(self, newitem.name, null, () => {\n                        self.onRoleSelect(roleName)\n                    })\n                }}>remove</Button>\n                return newitem\n            }), {})\n        })\n    }\n\n    render() {\n        const self = this\n        return <div>\n            <Row>\n                <Col>\n                    {TeamViews.teamSelect(self, (teamName) => {\n                        TeamViews.onTeamSelect(self, teamName)\n                    })}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {TeamViews.roleSelect(self, self.onRoleSelect)}\n                </Col>\n            </Row>\n            <br/>\n            <Row>\n                <Col>\n                    {this.renderBackends()}\n                </Col>\n            </Row>\n        </div>\n\n    }\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddClusterBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, name, url} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n                ClusterService.addBackend(self, {\n                    name: name,\n                    url: url,\n                    tag: tag,\n                    teamName: teamName\n                }, null, () => {\n                    message.success(\"Add backend success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    checkBackendName = (rule, value, callback) => {\n        ClusterService.checkBackendName(this, value, null, (resJson) => {\n            if (resJson[\"msg\"]) {\n                callback(\"Name have been taken. Try another.\")\n            } else {\n                callback()\n            }\n        })\n\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('name', {\n                        rules: [\n                            {required: true, message: 'Please input the backend name'},\n                            {validator: this.checkBackendName},\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"backend name\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('url', {\n                        rules: [\n                            {required: true, message: 'Please input the url name'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"table\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"url e.g. 127.0.0.1:9003\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddClusterBackend = Form.create({name: 'add_backend_for_cluster'})(AddClusterBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\n\nclass AddTagToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_TEAMS_ROLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Create roles success\", 3)\n                        self.teamCards.teamsRef.current.refresh()\n                    } else {\n                        message.warning(\"Create roles fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create roles fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        const self = this\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n        ClusterService.fetchBackends(this, \"backends\", () => {\n            const tagsWithDuplicate = self.state.backends.map(item => {\n                return item.tags\n            }).reduce((items, item) => {\n                items.push(...item)\n                return items\n            }, [])\n            const tags = new Set(tagsWithDuplicate)\n            self.setState({tags: [...tags]})\n        })\n    }\n\n    onTeamSelect = (teamName) => {\n        TeamService.fetchRoles(this, teamName, \"roles\")\n    }\n\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTagToRole = Form.create({name: 'add_tag_to_role'})(AddTagToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureDefaultBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"].includes(params.tag)) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            }else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureDefaultBackend);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {ADD_TEAMS_ROLE, LIST_TEAMS} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass AddExistClusterBackendToRole extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            backends: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const {teamName, roleName, backendName} = params\n\n                const tag = roleName.map(item => {\n                    return teamName + \"_\" + item\n                }).reduce((acc, item) => {\n                    acc.push(item)\n                    return acc\n                }, []).join(\",\")\n\n                ClusterService.updateBackendTags(self, backendName, tag, null, () => {\n                    message.success(\"Update backend tags success\")\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(this, (teamName) => {\n                            ClusterService.fetchBackendNamesByTeam(this, teamName, null, (backendNames) => {\n                                ClusterService.fetchBackendsByNames(this, backendNames.map(item => {\n                                    return item.name\n                                }).join(\",\"), \"backends\", () => {\n                                    console.log(this.state.backends)\n                                })\n                            })\n                            Views.onTeamSelect(this, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(this, (roleName) => {\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('backendName', {\n                        rules: [{required: true, message: 'Please input the backend name'}],\n                    })(\n                        Views.backendSelect(this, (backend) => {\n\n                        }, \"multiple\")\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Confirm\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddExistClusterBackendToRole = Form.create({name: 'AddExistClusterBackendToRole'})(AddExistClusterBackendToRole);","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_TEAMS_ROLE,\n    LIST_TEAMS,\n    LIST_TEAMS_IN,\n    LIST_TEAMS_JOINED, USER_SCHEDULER_TAGS_UPDATE,\n    USER_TAGS_UPDATE\n} from \"../../service/BackendConfig\";\nimport TeamService from \"../team/remote/Service\";\nimport ClusterService from \"./remote/Service\";\nimport {Views} from \"../team/remote/Views\";\n\nclass ConfigureSchedulerBackend extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tags: []\n\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(USER_TAGS_UPDATE)\n                api.request2({backendTags: params.tag, isScheduler: true}, (resJson) => {\n                    console.log(resJson)\n                    console.log(params.tag)\n                    if (resJson[\"backendTags\"].includes(params.tag)) {\n                        message.success(\"Set Default backend success\", 3)\n                    } else {\n                        message.warning(\"Set Default backend fail:\" + resJson[\"backendTags\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Set Default backend fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        TeamService.fetchTeams(LIST_TEAMS_IN, this, \"teams\")\n    }\n\n    renderTags = () => {\n        return this.state.tags.map(item => {\n            return <Select.Option key={item} name={item}>{item}</Select.Option>\n        })\n    }\n\n    onRoleSelect = (roleName) => {\n        const self = this\n        this.currentRoleName = roleName\n        const teamName = this.currentTeamName\n\n        ClusterService.fetchBackends(this, {tag: teamName + \"_\" + roleName}, \"backends\", () => {\n            if (self.state.backends.length > 0) {\n                self.setState({tags: [teamName + \"_\" + roleName]})\n            } else {\n                self.setState({tags: []})\n            }\n        })\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const self = this\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [{required: true, message: 'Please input the team name'}],\n                    })(\n                        Views.teamSelect(self, (teamName) => {\n                            Views.onTeamSelect(self, teamName)\n                        })\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [{required: true, message: 'Please input the role name'}],\n                    })(\n                        Views.roleSelect(self, (roleName) => {\n                            self.onRoleSelect(roleName)\n                        }, \"default\")\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tag', {\n                        rules: [\n                            {required: true, message: 'Please input the tag name'}\n                        ],\n                    })(\n                        <Select\n                            mode=\"default\"\n                            placeholder=\"tag name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTags()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Set Default\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLConfigureSchedulerDefaultBackend = Form.create({name: 'configure_default_backend'})(ConfigureSchedulerBackend);","import * as React from \"react\";\nimport {Col, Row, Card, notification} from \"antd\";\nimport {ClusterBackends} from \"./ClusterBackends\";\nimport {MLSQLAddClusterBackend} from \"./AddClusterBackend\";\nimport {MLSQLAddTagToRole} from \"./AddTagToRole\";\nimport {MLSQLConfigureDefaultBackend} from \"./ConfigureDefaultBackend\";\nimport {MLSQLAddExistClusterBackendToRole} from \"./AddExistClusterBackendToRole\";\nimport {MLSQLConfigureSchedulerDefaultBackend} from \"./ConfigureSchedulerBackend\";\n\n\nexport class ClusterCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.backendsRef = React.createRef()\n        this.state = {}\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n            <Row gutter={24}>\n                <Col span={8}>\n                    <Card title=\"Set default backend tag\" bordered={false}>\n                        <MLSQLConfigureDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Set default scheduler backend tag\" bordered={false}>\n                        <MLSQLConfigureSchedulerDefaultBackend parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={8}>\n                    <Card title=\"Add Backend\" bordered={false}>\n                        <MLSQLAddClusterBackend parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Your Backends\" bordered={false}>\n                        <ClusterBackends parent={this} ref={this.backendsRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"Add role to backend\" bordered={false}>\n                        <MLSQLAddExistClusterBackendToRole parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport \"./Teams.scss\"\nimport {\n    Card,\n    Col,\n    List, message, Row, Select\n} from 'antd';\nimport Service from \"./remote/Service\";\nimport {Views} from \"./remote/Views\";\nimport {LIST_TEAMS} from \"../../service/BackendConfig\";\nimport {TeamTables} from \"./TeamTables\";\nimport {MLSQLAddTableForTeam} from \"./AddTableForTeam\";\n\n\nexport class RoleTables extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.apiUrl = props.apiUrl\n        this.state = {\n            teams: [],\n            roles: []\n        }\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    selectTeam = (member) => {\n        this.currentTeam = member\n        Service.fetchRoles(this, member, \"roles\")\n    }\n\n    onRoleSelect = (roleName) => {\n        this.currentRole = roleName\n        Service.fetchTablesByRole(this, this.currentTeam, roleName, \"tables\")\n    }\n\n    refresh = () => {\n        if (this.currentTeam && this.currentRole) {\n            Service.fetchTablesByRole(this, this.currentTeam, this.currentRole, \"tables\")\n        }\n    }\n\n    renderCommand = (tableNameId) => {\n        const self = this\n        return [<a onClick={() => {\n            if (this.currentTeam && this.currentRole) {\n                Service.removeRoleTable(this, this.currentTeam, this.currentRole, tableNameId, null, () => {\n                    self.refresh()\n                })\n            }\n        }\n        }>remove</a>]\n    }\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return <List\n            dataSource={this.state.tables}\n            renderItem={item => (\n                <List.Item key={item.name} actions={this.renderCommand(item.id)}>\n                    <List.Item.Meta\n                        title={item.tableType + \":\" + this.sourceType(item.sourceType, item.tableType) + \":\" + item.name + \":\" + item.operateType}\n                    />\n                </List.Item>\n            )}\n        >\n        </List>\n    }\n\n    render() {\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.selectTeam}\n                        >\n                            {Views.renderTeamsForSelect(this)}\n                        </Select>\n                    </Col>\n\n                </Row>\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onRoleSelect}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    </Col>\n\n                </Row>\n\n\n                <br/>\n                <Row gutter={16}>\n                    <Col>\n                        {this.renderTables()}\n                    </Col>\n\n                </Row>\n\n            </div>\n        );\n    }\n\n}\n\n\n\n","import * as React from \"react\";\nimport \"./form.scss\"\nimport {\n    Form, Select, Button, message, Input, Icon\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {\n    ADD_ROLES_TABLE,\n    LIST_TEAMS\n} from \"../../service/BackendConfig\";\nimport Service from \"./remote/Service\";\n\n\nclass AddTableForRole extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.authCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            tables: [],\n            operateTypes: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(ADD_ROLES_TABLE)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        self.authCards.roleTablesRef.current.refresh()\n                        message.success(\"Create  success\", 3)\n                    } else {\n                        message.warning(\"Create  fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Create  fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    componentDidMount() {\n        Service.fetchTeams(LIST_TEAMS, this, \"teams\")\n    }\n\n    onTeamSelect = (teamName) => {\n        Service.fetchRoles(this, teamName, \"roles\")\n        Service.fetchTables(this, teamName, \"tables\")\n        Service.fetchOperateTypes(this, \"operateTypes\")\n    }\n\n    renderTeams = () => {\n        return this.state.teams.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n\n    renderRoles = () => {\n        return this.state.roles.map(item => {\n            return <Select.Option key={item.name} name={item.name}>{item.name}</Select.Option>\n        })\n    }\n\n    sourceType = (item, defaultValue) => {\n        if (item === \"undefined\") return defaultValue\n        else return item\n    }\n\n    renderTables = () => {\n        return this.state.tables.map(item => {\n            return <Select.Option key={item.name}\n                                  value={item.id}>{item.tableType}:{this.sourceType(item.sourceType, item.tableType)}:{item.db}.{item.name}</Select.Option>\n        })\n    }\n\n    renderOperateTypes = () => {\n        return this.state.operateTypes.map(item => {\n            return <Select.Option key={item.value} name={item.value}>{item.value}</Select.Option>\n        })\n    }\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n                <Form.Item>\n                    {getFieldDecorator('teamName', {\n                        rules: [\n                            {required: true, message: 'Please choose the team name'}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"Team name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                            onChange={this.onTeamSelect}\n                        >\n                            {this.renderTeams()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('roleName', {\n                        rules: [\n                            {required: true, message: 'Please input the role name '}\n                        ],\n                    })(\n                        <Select\n                            placeholder=\"role name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderRoles()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('tableName', {\n                        rules: [\n                            {required: true, message: 'Please input the tableName name '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"table name\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderTables()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    {getFieldDecorator('operateType', {\n                        rules: [\n                            {required: true, message: 'Please input the operateType to Role '}\n                        ],\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Operate type\"\n                            size={\"large\"}\n                            style={{width: 200}}\n                        >\n                            {this.renderOperateTypes()}\n                        </Select>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Create\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLAddTableForRole = Form.create({name: 'add_table_for_role'})(AddTableForRole);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLAddTableForTeam} from \"../team/AddTableForTeam\";\n\nimport {RoleTables} from \"../team/RoleTables\";\nimport {MLSQLAddTableForRole} from \"../team/AddTableForRole\";\n\n\nexport class AuthCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Add Table to Team\" bordered={false}>\n                        <MLSQLAddTableForTeam parent={this}/>\n                    </Card>\n                </Col>\n                <Col span={12}>\n                    <Card title=\"Add table to role\" bordered={false}>\n                        <MLSQLAddTableForRole parent={this}/>\n                    </Card>\n                </Col>\n            </Row>\n            <br/>\n\n            <Row gutter={24}>\n                <Col span={24}>\n                    <Card title=\"View tables By Role\" bordered={false}>\n                        <RoleTables parent={this} ref={this.roleTablesRef}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {Steps, Button, message, List, notification, Card, Col, Row} from 'antd';\nimport MLSQLAceEditor from \"../MLSQLAceEditor\";\nimport '../MLSQLQueryApp.scss'\nimport AceEditor from \"react-ace\";\nimport {MLSQLDash} from \"../query/MLSQLDash\";\nimport {MLSQLQueryDisplay} from \"../MLSQLQueryDisplay\";\nimport {MLSQLCreateTeamForm} from \"../team/CreateTeam\";\nimport {MLSQLAddRoleForTeam} from \"../team/AddRoleForTeam\";\nimport {MLSQLAddMemberForRole} from \"../team/AddMemberForRole\";\nimport {MLSQLAddClusterBackend} from \"../cluster/AddClusterBackend\";\nimport {MLSQLConfigureDefaultBackend} from \"../cluster/ConfigureDefaultBackend\";\nimport {RoleMembers} from \"../team/RoleMembers\";\n\nconst Step = Steps.Step;\nconst ReactMarkdown = require('react-markdown')\n\n\nexport default class Setup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n        }\n        this.steps = this.generateSteps()\n    }\n\n    openNotificationWithIcon = (type, message, description) => {\n        notification[type]({\n            message: message,\n            description: description\n        });\n    };\n\n    generateSteps() {\n        const self = this\n        return [{\n            title: 'Create Team',\n            content: () => {\n                return <Card title={\"input your team name\"} bordered={true}>\n                    <MLSQLCreateTeamForm parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Create Role',\n            content: () => {\n                return <Card title={\"Add new role to the team you have created\"} bordered={true}>\n                    <MLSQLAddRoleForTeam parent={self}/>\n                </Card>\n            },\n        }, {\n            title: 'Invite user to Role',\n            content: () => {\n                return <Card title={\"Add member to the role you have created\"} bordered={true}>\n                    <MLSQLAddMemberForRole parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Create Backend',\n            content: () => {\n                return <Card title={\"Add the cluster information you have setup\"} bordered={true}>\n                    <MLSQLAddClusterBackend parent={self}/>\n                </Card>\n            }\n        }, {\n            title: 'Set default backend',\n            content: () => {\n                return <Card title={\"Configure the default backend you want use\"} bordered={true}>\n                    <MLSQLConfigureDefaultBackend parent={self}/>\n                </Card>\n            }\n        },\n            {\n                title: 'Congratulation!',\n                content: () => {\n                    return <Card title={\"All Done\"} bordered={true}>\n                        Please go to Console\n                    </Card>\n                }\n            }\n        ];\n    }\n\n    componentDidMount() {\n\n    }\n\n    next() {\n        const current = this.state.current + 1;\n        this.setState({current});\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n                <div className=\"steps-action\" style={{marginBottom: \"30px\"}}>\n                    {\n                        current < this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n                <Steps current={current}>\n                    {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                </Steps>\n                <div className=\"steps-content\" style={{\"margin-top\": \"30px\"}}>\n                    <Row gutter={24}>\n                        <Col span={8}>\n\n\n                        </Col>\n                        <Col span={8}>\n                            {this.steps[current].content()}\n\n                        </Col>\n                    </Row>\n\n                </div>\n\n            </div>\n        );\n    }\n\n}","import * as React from \"react\";\nimport {Button, Form, Icon, Input, message, Select} from \"antd\";\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {CHNAGE_PASSWORD} from \"../../service/BackendConfig\";\n\nclass ChangePassword extends React.Component {\n    constructor(props) {\n        super(props)\n        this.teamCards = props.parent\n        this.state = {\n            teams: [],\n            roles: [],\n            members: []\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const self = this\n        this.props.form.validateFields((err, params) => {\n            if (!err) {\n                const api = new MLSQLAPI(CHNAGE_PASSWORD)\n                api.request2(params, (resJson) => {\n                    if (resJson[\"msg\"] === \"success\") {\n                        message.success(\"Success\", 3)\n                    } else {\n                        message.warning(\"Fail:\" + resJson[\"msg\"], 10)\n                    }\n\n                }, (failStr) => {\n                    message.error(\"Fail:\" + failStr, 10)\n                })\n            }\n        });\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n\n\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {required: true, message: 'Please input the original password'}\n                        ],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"old password\"/>\n                    )}\n                </Form.Item>\n\n                <Form.Item>\n                    {getFieldDecorator('newPassword', {\n                        rules: [{required: true, message: 'Please input the new password'}],\n                    })(\n                        <Input type={\"password\"} prefix={<Icon type=\"password\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               placeholder=\"new password\"/>\n                    )}\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Apply\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const MLSQLChangePassword = Form.create({name: 'change_password'})(ChangePassword);","import * as React from \"react\";\nimport {Card, Col, Row} from \"antd\";\nimport {MLSQLChangePassword} from \"../team/MLSQLChangePassword\";\n\nexport class SettingCards extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.parent = props.parent\n        this.roleTablesRef = React.createRef()\n        this.state = {}\n    }\n\n    render() {\n        return <div style={{background: '#ECECEC', padding: '30px'}}>\n\n\n            <Row gutter={24}>\n                <Col span={12}>\n                    <Card title=\"Change password\" bordered={false}>\n                        <MLSQLChangePassword parent={this}/>\n                    </Card>\n                </Col>\n\n            </Row>\n            <br/>\n\n        </div>\n    }\n}","import * as React from \"react\";\nimport {\n    Layout, Menu, Breadcrumb, Icon, Button\n} from 'antd';\nimport {\n    AUTH_VIEW_BASIC,\n    CLUSTER_VIEW_BASIC,\n    SETTING_VIEW_BASIC,\n    SETUP_VIEW_BASIC,\n    TEAM_VIEW_BASIC\n} from \"../../common/ViewConst\";\nimport {TeamCards} from \"./TeamCards\";\nimport {ClusterCards} from \"../cluster/ClusterCards\";\nimport {AuthCards} from \"../auth/AuthCards\";\nimport Setup from \"../demo/Setup\";\nimport {SettingCards} from \"./SettingCards\";\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.app = props.parent\n        this.state = {\n            currentView: SETUP_VIEW_BASIC\n        }\n\n\n    }\n\n    switchToBasic = () => {\n        this.setState({currentView: TEAM_VIEW_BASIC})\n    }\n\n    switchToSetup = () => {\n        this.setState({currentView: SETUP_VIEW_BASIC})\n    }\n\n    switchToCluster = () => {\n        this.setState({currentView: CLUSTER_VIEW_BASIC})\n    }\n\n    switchToAuth = () => {\n        this.setState({currentView: AUTH_VIEW_BASIC})\n    }\n\n    switchToSetting = () => {\n        this.setState({currentView: SETTING_VIEW_BASIC})\n    }\n\n    renderView = () => {\n        if (this.state.currentView === SETUP_VIEW_BASIC) return <Setup/>\n        if (this.state.currentView === TEAM_VIEW_BASIC) return <TeamCards/>\n        if (this.state.currentView === CLUSTER_VIEW_BASIC) return <ClusterCards/>\n        if (this.state.currentView === AUTH_VIEW_BASIC) return <AuthCards/>\n        if (this.state.currentView === SETTING_VIEW_BASIC) return <SettingCards/>\n    }\n\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        <Menu.Item key=\"0\">\n                            <Button block onClick={this.switchToSetup}>Setup</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"1\">\n                            <Button block onClick={this.switchToBasic}>Team</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Button block onClick={this.switchToCluster}>Cluster</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Button block onClick={this.switchToAuth}>Auth</Button>\n                        </Menu.Item>\n                        <Menu.Item key=\"4\">\n                            <Button block onClick={this.switchToSetting}>Setting</Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.renderView()}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./team/MainPage\";\nimport {TEAM_VIEW_BASIC} from \"../common/ViewConst\";\n\nexport class MLSQLManagerApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage parent={this}/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {Card} from \"antd\";\nimport AceEditor from \"react-ace\";\n\n\nexport default class ResultView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.nav = props.nav\n        this.state = {content: \"\"}\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            content: Object.entries(this.nav.collected_params).filter((item) => {\n                return item[1]\n            }).map((item) => {\n                return `set ${item[0]}='''${item[1]}''';`\n            }).join(\"\\n\") + `\\ninclude plugin.\\`${this.nav.current_plugin_name}\\`;`\n        })\n    }\n\n\n    render() {\n\n        return (\n\n\n            <div className=\"steps-content\"\n                 style={{\"margin-top\": \"30px\"}}>\n                <pre>\n                    {this.state.content}\n                </pre>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {Button, message, Steps, Form, Input, Card} from \"antd\";\nimport ResultView from \"./ResultView\";\n\nconst Step = Steps.Step;\nconst formItemLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 8},\n};\nconst formTailLayout = {\n    labelCol: {span: 4},\n    wrapperCol: {span: 8, offset: 4},\n};\n\nclass ScriptPluginView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: 0,\n            steps: props.steps.concat([{desc: \"MLSQL Script\", \"final\": true}])\n        }\n        this.nav = props.parent\n    }\n\n    next() {\n\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                const current = this.state.current + 1;\n                this.setState({current});\n                this.nav.pushParam(values)\n            }\n        });\n\n\n    }\n\n    prev() {\n        const current = this.state.current - 1;\n        this.setState({current});\n    }\n\n    buildForm = (item) => {\n        if (item.hasOwnProperty(\"final\")) {\n            return <ResultView nav={this.nav}/>\n        }\n        const formItems = item[\"params\"]\n        const {getFieldDecorator} = this.props.form;\n        return formItems.map((formItem) => {\n            return <Form.Item {...formItemLayout} label={formItem['name']}>\n                {getFieldDecorator(formItem['name'], {\n                    rules: [{required: formItem['required'], message: `Please input ${formItem['required']}!`}],\n                })(\n                    <Input type=\"input\" placeholder={formItem['desc']}/>\n                )}\n            </Form.Item>\n        })\n    }\n\n\n    render() {\n        const {current} = this.state;\n        return (\n            <div>\n\n                <Steps current={current}>\n                    {this.state.steps.map(item => <Step key={item.desc} title={item.desc}/>)}\n                </Steps>\n                <div className=\"steps-content\"\n                     style={{\"margin-top\": \"30px\"}}>\n                    <Card bordered={true}>\n                        <Form {...formTailLayout} style={{width: \"600px\"}}>\n                            {this.buildForm(this.state.steps[current])}\n                        </Form>\n                    </Card>\n\n\n                </div>\n                <div className=\"steps-action\" style={{marginTop: \"30px\"}}>\n                    {\n                        current < this.state.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => this.next()}>Next Step</Button>\n                    }\n                    {\n                        current === this.state.steps.length - 1\n                        && <Button type=\"primary\" onClick={() => message.success('Processing complete!')}>Done</Button>\n                    }\n                    {\n                        current > 0\n                        && (\n                            <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                Previous Step\n                            </Button>\n                        )\n                    }\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport const ScriptPluginViewForm = Form.create({name: \"plugin-tutorial\"})(ScriptPluginView);","import * as React from \"react\";\nimport {\n    Layout, Menu, Button\n} from 'antd';\nimport {MLSQLAPI} from \"../../service/MLSQLAPI\";\nimport {RUN_SCRIPT} from \"../../service/BackendConfig\";\nimport {ScriptPluginViewForm} from \"./ScriptPluginView\";\n\n\nconst {\n    Header, Content, Footer, Sider,\n} = Layout;\n\n\nexport default class MainPage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {data_menu: [], data_plugin: []}\n        this.collected_params = {}\n\n    }\n\n    componentDidMount() {\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.newRunScript({}, `!plugin list \"script\";`, json => {\n            this.setState({data_menu: json}, () => {\n                if (json.length > 0) {\n                    this.showTut(json[0]['pluginName'])\n                }\n            })\n        }, fail => {\n        })\n\n\n    }\n\n    pushParam = (item) => {\n        Object.assign(this.collected_params, item)\n    }\n\n    showTut = (pluginName) => {\n        this.current_plugin_name = pluginName\n        const api = new MLSQLAPI(RUN_SCRIPT)\n        api.newRunScript({}, `!plugin script show ${pluginName}/plugin.json;`, json => {\n\n            this.setState({\n                data_plugin: json.map((item) => {\n                    return JSON.parse(item['value'])[this.current_plugin_name]['compositor']\n                })\n            })\n        }, fail => {\n        })\n    }\n\n    render() {\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <Sider>\n                    <div className=\"logo\"/>\n                    <Menu theme=\"dark\" defaultSelectedKeys={[\"0\"]} mode=\"inline\">\n                        {this.state.data_menu.map((item) => {\n                                return (<Menu.Item key=\"0\" onClick={() => {\n                                    this.showTut(item['pluginName'])\n                                }}>\n                                    {item['pluginName']}\n                                </Menu.Item>)\n                            }\n                        )}\n\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header style={{background: '#fff', padding: 0}}/>\n                    <Content style={{margin: '0 16px'}}>\n                        <div style={{padding: 24, background: '#fff', minHeight: 360}}>\n                            {this.state.data_plugin.map((item) => {\n                                return <ScriptPluginViewForm parent={this}\n                                                             steps={item}/>\n                            })}\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center'}}>\n\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}","import * as React from \"react\";\nimport MainPage from \"./MainPage\";\n\nexport class MLSQLScriptPluginsApp extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <MainPage/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {FormGroup, InputGroup, Button, Navbar} from '@blueprintjs/core'\nimport './MLSQLRegister.scss'\nimport {MLSQLAuth as Auth} from './MLSQLAuth'\nimport * as HTTP from \"../service/HTTPMethod\";\nimport MLSQLQueryApp from \"../components/MLSQLQueryApp\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_SCRIPT_PLUGINS, VIEW_TEAM} from \"../common/ViewConst\";\nimport {MLSQLDemoApp} from \"../components/MLSQLDemoApp\";\nimport {MLSQLManagerApp} from \"../components/MLSQLManagerApp\";\nimport {MLSQLScriptPluginsApp} from \"../components/script_plugins/MLSQLScriptPluginsApp\";\n\n\nexport const LOGIN = \"login\"\nexport const REGISTER = \"register\"\n\nexport class WelcomeMessage extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.auth = new Auth()\n        this.state = {isLogin: this.auth.isLogin()}\n        this.app = this.props.parent\n\n    }\n\n    componentDidMount() {\n        const self = this\n        this.auth.userName((name) => {\n            self.setState({userName: name})\n        })\n    }\n\n    getLoginOrRegisterManager = () => {\n        return this.app.registerOrLoginRef.current\n    }\n\n\n    logout = () => {\n        this.auth.logout()\n        this.app.updateLoginoutStatus()\n    }\n\n    login = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: LOGIN})\n    }\n\n    register = () => {\n        this.logout()\n        this.getLoginOrRegisterManager().setState({loginType: REGISTER})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    render() {\n        const LoginButton = <Button className=\"bp3-minimal\" icon=\"log-in\" text=\"Login\" onClick={this.login}/>\n\n        const LogoutButton = <Button className=\"bp3-minimal\" icon=\"log-out\" text=\"Logout\"\n                                     onClick={this.logout}/>\n\n        const RegisterButton = <Button className=\"bp3-minimal\" icon=\"intersection\" text=\"Register\"\n                                       onClick={this.register}/>\n        return (\n            <div>{this.state.isLogin ? \"welcome  \" + this.state.userName : \"\"}\n                {this.state.isLogin ? LogoutButton : LoginButton}\n                {RegisterButton}\n            </div>\n        )\n    }\n}\n\nexport class MLSQLRegisterOrLogin extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.auth = new Auth()\n        this.app = this.props.parent\n\n        this.state = {\n            registerOrLoginSuccess: false,\n            msg: \"\",\n            isLogin: this.auth.isLogin(),\n            loginType: this.props.loginType || LOGIN\n        }\n\n\n    }\n\n    currentView = () => {\n        return this.app.state.currentView\n    }\n\n\n    render() {\n        if (this.auth.isLogin() && this.currentView() === VIEW_CONSOLE) return <MLSQLQueryApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_DEMO) return <MLSQLDemoApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_TEAM) return <MLSQLManagerApp/>\n        if (this.auth.isLogin() && this.currentView() === VIEW_SCRIPT_PLUGINS) return <MLSQLScriptPluginsApp/>\n        return (\n            <div className=\"mlsql-register\">\n                <div className=\"mlsql-register-form\">\n                    <FormGroup\n                        helperText=\"email\"\n                        label=\"userName\"\n                        labelFor=\"userName\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"userName\" placeholder=\"email\" onChange={this.userName}/>\n                    </FormGroup>\n                    <FormGroup\n                        helperText=\"password\"\n                        label=\"password\"\n                        labelFor=\"password\"\n                        labelInfo=\"(required)\">\n                        <InputGroup id=\"password\" type=\"password\" placeholder=\"password\" onChange={this.password}/>\n                    </FormGroup>\n\n                    <Button type=\"submit\" text={this.state.loginType === LOGIN ? \"Login\" : \"Register\"}\n                            onClick={this.state.loginType === LOGIN ? this.login : this.register}/>\n                    {this.state.msg !== \"\" && <div className=\"mlsql-register-messagebox\">{this.state.msg}</div>}\n                </div>\n\n            </div>\n        )\n    }\n\n    userName = (e) => {\n        this.setState({userName: e.target.value})\n    }\n\n    password = (e) => {\n        this.setState({password: e.target.value})\n    }\n\n    updateLoginoutStatus = () => {\n        this.setState({isLogin: this.auth.isLogin()})\n    }\n\n    /**\n     * @param  {APIResponse} apiResponse\n     */\n    registerSuccess = (apiResponse) => {\n        const self = this\n        if (apiResponse.status === HTTP.Status.Success) {\n            this.setState({\n                registerOrLoginSuccess: true\n            }, () => self.app.updateLoginoutStatus())\n        } else {\n            const self = this;\n            const log = (s) => {\n                let msg = s;\n                try {\n                    msg = JSON.parse(s)[\"msg\"]\n                } catch (e) {\n                }\n                self.setState({msg: msg})\n            }\n            apiResponse.content.then(log).catch(log)\n\n        }\n\n    }\n\n    /**\n     *\n     * @param {ServerError} serverError\n     */\n    registerFail = (serverError) => {\n        this.setState({msg: serverError.value.message})\n    }\n\n    login = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.login(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n\n    register = () => {\n        const validator = new FormValidate(this)\n        if (validator.validate()) {\n            this.auth.register(\n                this.state.userName,\n                this.state.password, this.registerSuccess, this.registerFail)\n        }\n    }\n}\n\n\nclass FormValidate {\n\n    /**\n     *\n     * @param  {{registerSuccess: boolean, msg: string, userName: string, password: string}} state\n     * @param {MLSQLRegisterOrLogin} parent\n     */\n    constructor(parent) {\n        this.parent = parent\n    }\n\n    validate() {\n        return this.validateUserName() && this.validatePassword()\n    }\n\n\n    validateUserName() {\n        const pattern = /[a-zA-Z0-9]+[\\.]?([a-zA-Z0-9]+)?[\\@][a-z]{3,9}[\\.][a-z]{2,5}/g;\n        const isEmail = pattern.test(this.parent.state.userName);\n        if (!isEmail) {\n            this.parent.setState({msg: \"userName should be email\"})\n        }\n        return isEmail\n    }\n\n    validatePassword() {\n        const normal = this.parent.state.password.length >= 4\n        if (!normal) {\n            this.parent.setState({\"msg\": \"the length of password should > 4\"})\n        }\n        return normal\n    }\n\n\n}\n\n","import React, {Component} from 'react';\nimport './App.scss';\nimport {Alignment, Button, Navbar} from \"@blueprintjs/core\";\nimport {notification} from 'antd';\nimport {LOGIN, MLSQLRegisterOrLogin, WelcomeMessage} from \"./user/MLSQLRegisterOrLogin\";\nimport {VIEW_CLUSTER, VIEW_CONSOLE, VIEW_DEMO, VIEW_SCRIPT_PLUGINS, VIEW_TEAM} from \"./common/ViewConst\"\nimport {MLSQLAuth} from \"./user/MLSQLAuth\";\n\nconst s = require('stripmargin');\ns.inject()\n\nconst openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n        message: message,\n        description: description\n    });\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.menuRef = React.createRef()\n        this.registerOrLoginRef = React.createRef()\n        this.state = {currentView: VIEW_CONSOLE}\n    }\n\n    updateLoginoutStatus = () => {\n        this.menuRef.current.updateLoginoutStatus()\n        this.registerOrLoginRef.current.updateLoginoutStatus()\n    }\n\n    switchToTeam = () => {\n        this.setState({currentView: VIEW_TEAM})\n\n    }\n\n    switchToConsole = () => {\n        this.setState({currentView: VIEW_CONSOLE})\n    }\n\n    switchToDemo = () => {\n        this.setState({currentView: VIEW_DEMO})\n    }\n\n    switchToScriptPlugins = () => {\n        this.setState({currentView: VIEW_SCRIPT_PLUGINS})\n    }\n\n    switchToCnDoc = () => {\n        window.open(\"http://docs.mlsql.tech/zh/\", \"_blank\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar>\n                    <Navbar.Group align={Alignment.LEFT}>\n                        <Navbar.Heading>MLSQL Web Console</Navbar.Heading>\n                        <Navbar.Divider/>\n                        <Button className=\"bp3-minimal\" icon=\"home\" text=\"Console\" onClick={this.switchToConsole}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Demo Center\" onClick={this.switchToDemo}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Team\" onClick={this.switchToTeam}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"Script Plugins\"\n                                onClick={this.switchToScriptPlugins}/>\n                        <Button className=\"bp3-minimal\" icon=\"document\" text=\"中文文档\"\n                                onClick={this.switchToCnDoc}/>\n                    </Navbar.Group>\n                    <Navbar.Group align={Alignment.RIGHT}>\n                        <WelcomeMessage ref={this.menuRef} parent={this}/>\n                    </Navbar.Group>\n                </Navbar>\n                <MLSQLRegisterOrLogin ref={this.registerOrLoginRef} parent={this} loginType={LOGIN}/>\n\n\n                <div style={{bottom: \"100px\", textAlign: \"center\", width: \"100%\"}}>\n                    MLSQL Licensed under the Apache License, Version 2.0. @<a className=\"copyright\"\n                                                                              href=\"http://www.miitbeian.gov.cn/\">浙ICP备18052520号</a>\n                    <div>@<a target=\"_blank\"\n                             href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=33010802009683\"><img\n                        src=\"\"/>浙公网安备 33010802009683号</a></div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './mlsql.scss';\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}